schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type stagingoptimismgoerli_AggregateRoot {
  id: ID!
  root: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AggregateRoot_orderBy {
  id
  root
}

type stagingoptimismgoerli_Asset {
  id: ID!
  key: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: stagingoptimismgoerli_Bytes
  localAsset: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
}

type stagingoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingoptimismgoerli_Router!
  asset: stagingoptimismgoerli_Asset!
}

input stagingoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input stagingoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: stagingoptimismgoerli_Bytes
  adoptedAsset_not: stagingoptimismgoerli_Bytes
  adoptedAsset_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_contains: stagingoptimismgoerli_Bytes
  adoptedAsset_not_contains: stagingoptimismgoerli_Bytes
  localAsset: stagingoptimismgoerli_Bytes
  localAsset_not: stagingoptimismgoerli_Bytes
  localAsset_in: [stagingoptimismgoerli_Bytes!]
  localAsset_not_in: [stagingoptimismgoerli_Bytes!]
  localAsset_contains: stagingoptimismgoerli_Bytes
  localAsset_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar stagingoptimismgoerli_BigDecimal

scalar BigInt

input stagingoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_Block_height {
  hash: stagingoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar stagingoptimismgoerli_Bytes

type stagingoptimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingoptimismgoerli_Bytes
  amb_not: stagingoptimismgoerli_Bytes
  amb_in: [stagingoptimismgoerli_Bytes!]
  amb_not_in: [stagingoptimismgoerli_Bytes!]
  amb_contains: stagingoptimismgoerli_Bytes
  amb_not_contains: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  rootManager_not: stagingoptimismgoerli_Bytes
  rootManager_in: [stagingoptimismgoerli_Bytes!]
  rootManager_not_in: [stagingoptimismgoerli_Bytes!]
  rootManager_contains: stagingoptimismgoerli_Bytes
  rootManager_not_contains: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
  mirrorConnector_not: stagingoptimismgoerli_Bytes
  mirrorConnector_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_not_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_contains: stagingoptimismgoerli_Bytes
  mirrorConnector_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingoptimismgoerli_DestinationMessage {
  id: ID!
  leaf: stagingoptimismgoerli_Bytes
  processed: Boolean
  returnData: stagingoptimismgoerli_Bytes
  success: Boolean
  transactionHash: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
}

input stagingoptimismgoerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: stagingoptimismgoerli_Bytes
  returnData_not: stagingoptimismgoerli_Bytes
  returnData_in: [stagingoptimismgoerli_Bytes!]
  returnData_not_in: [stagingoptimismgoerli_Bytes!]
  returnData_contains: stagingoptimismgoerli_Bytes
  returnData_not_contains: stagingoptimismgoerli_Bytes
  success: Boolean
  success_not: Boolean
  success_in: [Boolean!]
  success_not_in: [Boolean!]
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  success
  transactionHash
  blockNumber
}

type stagingoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  status: stagingoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_Router_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_Router_filter): [stagingoptimismgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingoptimismgoerli_Bytes
  slippage: BigInt
  originSender: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingoptimismgoerli_Bytes
  asset: stagingoptimismgoerli_Asset
  executedCaller: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input stagingoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingoptimismgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  delegate_not: stagingoptimismgoerli_Bytes
  delegate_in: [stagingoptimismgoerli_Bytes!]
  delegate_not_in: [stagingoptimismgoerli_Bytes!]
  delegate_contains: stagingoptimismgoerli_Bytes
  delegate_not_contains: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  executedCaller: stagingoptimismgoerli_Bytes
  executedCaller_not: stagingoptimismgoerli_Bytes
  executedCaller_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_not_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_contains: stagingoptimismgoerli_Bytes
  executedCaller_not_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTransactionHash_not: stagingoptimismgoerli_Bytes
  executedTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledCaller_not: stagingoptimismgoerli_Bytes
  reconciledCaller_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_contains: stagingoptimismgoerli_Bytes
  reconciledCaller_not_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingoptimismgoerli_OrderDirection {
  asc
  desc
}

type stagingoptimismgoerli_OriginMessage {
  id: ID!
  transferId: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: stagingoptimismgoerli_Bytes
  index: BigInt
  root: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  rootCount: stagingoptimismgoerli_RootCount
}

input stagingoptimismgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  message_not: stagingoptimismgoerli_Bytes
  message_in: [stagingoptimismgoerli_Bytes!]
  message_not_in: [stagingoptimismgoerli_Bytes!]
  message_contains: stagingoptimismgoerli_Bytes
  message_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: stagingoptimismgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
  blockNumber
  rootCount
}

type stagingoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  status: stagingoptimismgoerli_TransferStatus
  messageHash: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingoptimismgoerli_Bytes
  slippage: BigInt
  originSender: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingoptimismgoerli_Bytes
  asset: stagingoptimismgoerli_Asset
  message: stagingoptimismgoerli_OriginMessage
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  messageHash: stagingoptimismgoerli_Bytes
  messageHash_not: stagingoptimismgoerli_Bytes
  messageHash_in: [stagingoptimismgoerli_Bytes!]
  messageHash_not_in: [stagingoptimismgoerli_Bytes!]
  messageHash_contains: stagingoptimismgoerli_Bytes
  messageHash_not_contains: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  delegate_not: stagingoptimismgoerli_Bytes
  delegate_in: [stagingoptimismgoerli_Bytes!]
  delegate_not_in: [stagingoptimismgoerli_Bytes!]
  delegate_contains: stagingoptimismgoerli_Bytes
  delegate_not_contains: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingoptimismgoerli_OriginMessage_filter
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Sequencer
  stagingoptimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Sequencer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Sequencer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootCount
  stagingoptimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootCount_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootCount!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
}

type stagingoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingoptimismgoerli_Bytes
  relayer_not: stagingoptimismgoerli_Bytes
  relayer_in: [stagingoptimismgoerli_Bytes!]
  relayer_not_in: [stagingoptimismgoerli_Bytes!]
  relayer_contains: stagingoptimismgoerli_Bytes
  relayer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingoptimismgoerli_RootCount {
  id: ID!
  count: BigInt
}

input stagingoptimismgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootCount_orderBy {
  id
  count
}

type stagingoptimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingoptimismgoerli_Bytes
  count: BigInt
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_AssetBalance_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_AssetBalance_filter): [stagingoptimismgoerli_AssetBalance!]!
}

input stagingoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingoptimismgoerli_Bytes
  owner_not: stagingoptimismgoerli_Bytes
  owner_in: [stagingoptimismgoerli_Bytes!]
  owner_not_in: [stagingoptimismgoerli_Bytes!]
  owner_contains: stagingoptimismgoerli_Bytes
  owner_not_contains: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  recipient_not: stagingoptimismgoerli_Bytes
  recipient_in: [stagingoptimismgoerli_Bytes!]
  recipient_not_in: [stagingoptimismgoerli_Bytes!]
  recipient_contains: stagingoptimismgoerli_Bytes
  recipient_not_contains: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedOwner_not: stagingoptimismgoerli_Bytes
  proposedOwner_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_not_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_contains: stagingoptimismgoerli_Bytes
  proposedOwner_not_contains: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingoptimismgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: stagingoptimismgoerli_Bytes
  sequencer_not: stagingoptimismgoerli_Bytes
  sequencer_in: [stagingoptimismgoerli_Bytes!]
  sequencer_not_in: [stagingoptimismgoerli_Bytes!]
  sequencer_contains: stagingoptimismgoerli_Bytes
  sequencer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type stagingoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type stagingoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: stagingoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingoptimismgoerli_Bytes
  swapPool_not: stagingoptimismgoerli_Bytes
  swapPool_in: [stagingoptimismgoerli_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_Bytes!]
  swapPool_contains: stagingoptimismgoerli_Bytes
  swapPool_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Sequencer
  stagingoptimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Sequencer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Sequencer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootCount
  stagingoptimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootCount_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootCount!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
}

enum stagingoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type stagingoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}