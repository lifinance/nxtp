schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type optimismgoerli_AggregateRoot {
  id: ID!
  root: optimismgoerli_Bytes!
}

input optimismgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AggregateRoot_orderBy {
  id
  root
}

type optimismgoerli_Asset {
  id: ID!
  key: optimismgoerli_Bytes
  local: optimismgoerli_Bytes!
  adoptedAsset: optimismgoerli_Bytes!
  canonicalId: optimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type optimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: optimismgoerli_Router!
  asset: optimismgoerli_Asset!
}

input optimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: optimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input optimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: optimismgoerli_Bytes
  key_not: optimismgoerli_Bytes
  key_in: [optimismgoerli_Bytes!]
  key_not_in: [optimismgoerli_Bytes!]
  key_contains: optimismgoerli_Bytes
  key_not_contains: optimismgoerli_Bytes
  local: optimismgoerli_Bytes
  local_not: optimismgoerli_Bytes
  local_in: [optimismgoerli_Bytes!]
  local_not_in: [optimismgoerli_Bytes!]
  local_contains: optimismgoerli_Bytes
  local_not_contains: optimismgoerli_Bytes
  adoptedAsset: optimismgoerli_Bytes
  adoptedAsset_not: optimismgoerli_Bytes
  adoptedAsset_in: [optimismgoerli_Bytes!]
  adoptedAsset_not_in: [optimismgoerli_Bytes!]
  adoptedAsset_contains: optimismgoerli_Bytes
  adoptedAsset_not_contains: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar optimismgoerli_BigDecimal

scalar BigInt

input optimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input optimismgoerli_Block_height {
  hash: optimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar optimismgoerli_Bytes

type optimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: optimismgoerli_Bytes!
  rootManager: optimismgoerli_Bytes!
  mirrorConnector: optimismgoerli_Bytes!
}

input optimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: optimismgoerli_Bytes
  amb_not: optimismgoerli_Bytes
  amb_in: [optimismgoerli_Bytes!]
  amb_not_in: [optimismgoerli_Bytes!]
  amb_contains: optimismgoerli_Bytes
  amb_not_contains: optimismgoerli_Bytes
  rootManager: optimismgoerli_Bytes
  rootManager_not: optimismgoerli_Bytes
  rootManager_in: [optimismgoerli_Bytes!]
  rootManager_not_in: [optimismgoerli_Bytes!]
  rootManager_contains: optimismgoerli_Bytes
  rootManager_not_contains: optimismgoerli_Bytes
  mirrorConnector: optimismgoerli_Bytes
  mirrorConnector_not: optimismgoerli_Bytes
  mirrorConnector_in: [optimismgoerli_Bytes!]
  mirrorConnector_not_in: [optimismgoerli_Bytes!]
  mirrorConnector_contains: optimismgoerli_Bytes
  mirrorConnector_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type optimismgoerli_DestinationMessage {
  id: ID!
  leaf: optimismgoerli_Bytes
  processed: Boolean
  returnData: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
}

input optimismgoerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: optimismgoerli_Bytes
  leaf_not: optimismgoerli_Bytes
  leaf_in: [optimismgoerli_Bytes!]
  leaf_not_in: [optimismgoerli_Bytes!]
  leaf_contains: optimismgoerli_Bytes
  leaf_not_contains: optimismgoerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: optimismgoerli_Bytes
  returnData_not: optimismgoerli_Bytes
  returnData_in: [optimismgoerli_Bytes!]
  returnData_not_in: [optimismgoerli_Bytes!]
  returnData_contains: optimismgoerli_Bytes
  returnData_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type optimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  to: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: optimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: optimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_Router_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_Router_filter): [optimismgoerli_Router!]
  originSender: optimismgoerli_Bytes
  transactingAsset: optimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: optimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input optimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: optimismgoerli_Bytes
  agent_not: optimismgoerli_Bytes
  agent_in: [optimismgoerli_Bytes!]
  agent_not_in: [optimismgoerli_Bytes!]
  agent_contains: optimismgoerli_Bytes
  agent_not_contains: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  recovery_not: optimismgoerli_Bytes
  recovery_in: [optimismgoerli_Bytes!]
  recovery_not_in: [optimismgoerli_Bytes!]
  recovery_contains: optimismgoerli_Bytes
  recovery_not_contains: optimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: optimismgoerli_Bytes
  callback_not: optimismgoerli_Bytes
  callback_in: [optimismgoerli_Bytes!]
  callback_not_in: [optimismgoerli_Bytes!]
  callback_contains: optimismgoerli_Bytes
  callback_not_contains: optimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: optimismgoerli_Router_filter
  originSender: optimismgoerli_Bytes
  originSender_not: optimismgoerli_Bytes
  originSender_in: [optimismgoerli_Bytes!]
  originSender_not_in: [optimismgoerli_Bytes!]
  originSender_contains: optimismgoerli_Bytes
  originSender_not_contains: optimismgoerli_Bytes
  transactingAsset: optimismgoerli_Bytes
  transactingAsset_not: optimismgoerli_Bytes
  transactingAsset_in: [optimismgoerli_Bytes!]
  transactingAsset_not_in: [optimismgoerli_Bytes!]
  transactingAsset_contains: optimismgoerli_Bytes
  transactingAsset_not_contains: optimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: optimismgoerli_Bytes
  localAsset_not: optimismgoerli_Bytes
  localAsset_in: [optimismgoerli_Bytes!]
  localAsset_not_in: [optimismgoerli_Bytes!]
  localAsset_contains: optimismgoerli_Bytes
  localAsset_not_contains: optimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: optimismgoerli_Bytes
  executedCaller_not: optimismgoerli_Bytes
  executedCaller_in: [optimismgoerli_Bytes!]
  executedCaller_not_in: [optimismgoerli_Bytes!]
  executedCaller_contains: optimismgoerli_Bytes
  executedCaller_not_contains: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTransactionHash_not: optimismgoerli_Bytes
  executedTransactionHash_in: [optimismgoerli_Bytes!]
  executedTransactionHash_not_in: [optimismgoerli_Bytes!]
  executedTransactionHash_contains: optimismgoerli_Bytes
  executedTransactionHash_not_contains: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: optimismgoerli_Bytes
  reconciledCaller_not: optimismgoerli_Bytes
  reconciledCaller_in: [optimismgoerli_Bytes!]
  reconciledCaller_not_in: [optimismgoerli_Bytes!]
  reconciledCaller_contains: optimismgoerli_Bytes
  reconciledCaller_not_contains: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTransactionHash_not: optimismgoerli_Bytes
  reconciledTransactionHash_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_contains: optimismgoerli_Bytes
  reconciledTransactionHash_not_contains: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum optimismgoerli_OrderDirection {
  asc
  desc
}

type optimismgoerli_OriginMessage {
  id: ID!
  transferId: optimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: optimismgoerli_Bytes
  index: BigInt
  root: optimismgoerli_Bytes
  message: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
}

input optimismgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: optimismgoerli_Bytes
  leaf_not: optimismgoerli_Bytes
  leaf_in: [optimismgoerli_Bytes!]
  leaf_not_in: [optimismgoerli_Bytes!]
  leaf_contains: optimismgoerli_Bytes
  leaf_not_contains: optimismgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  message: optimismgoerli_Bytes
  message_not: optimismgoerli_Bytes
  message_in: [optimismgoerli_Bytes!]
  message_not_in: [optimismgoerli_Bytes!]
  message_contains: optimismgoerli_Bytes
  message_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type optimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  to: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: optimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: optimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: optimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: optimismgoerli_Bytes
  bridgedAmount: BigInt
  message: optimismgoerli_OriginMessage
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: optimismgoerli_Bytes
  agent_not: optimismgoerli_Bytes
  agent_in: [optimismgoerli_Bytes!]
  agent_not_in: [optimismgoerli_Bytes!]
  agent_contains: optimismgoerli_Bytes
  agent_not_contains: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  recovery_not: optimismgoerli_Bytes
  recovery_in: [optimismgoerli_Bytes!]
  recovery_not_in: [optimismgoerli_Bytes!]
  recovery_contains: optimismgoerli_Bytes
  recovery_not_contains: optimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: optimismgoerli_Bytes
  callback_not: optimismgoerli_Bytes
  callback_in: [optimismgoerli_Bytes!]
  callback_not_in: [optimismgoerli_Bytes!]
  callback_contains: optimismgoerli_Bytes
  callback_not_contains: optimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: optimismgoerli_Bytes
  transactingAsset_not: optimismgoerli_Bytes
  transactingAsset_in: [optimismgoerli_Bytes!]
  transactingAsset_not_in: [optimismgoerli_Bytes!]
  transactingAsset_contains: optimismgoerli_Bytes
  transactingAsset_not_contains: optimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: optimismgoerli_Bytes
  bridgedAsset_not: optimismgoerli_Bytes
  bridgedAsset_in: [optimismgoerli_Bytes!]
  bridgedAsset_not_in: [optimismgoerli_Bytes!]
  bridgedAsset_contains: optimismgoerli_Bytes
  bridgedAsset_not_contains: optimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: optimismgoerli_OriginMessage_filter
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageProcessed
  optimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageProcessed_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
}

type optimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: optimismgoerli_Bytes
}

input optimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: optimismgoerli_Bytes
  relayer_not: optimismgoerli_Bytes
  relayer_in: [optimismgoerli_Bytes!]
  relayer_not_in: [optimismgoerli_Bytes!]
  relayer_contains: optimismgoerli_Bytes
  relayer_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type optimismgoerli_RootMessageProcessed {
  id: ID!
  root: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_AssetBalance_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_AssetBalance_filter): [optimismgoerli_AssetBalance!]!
}

input optimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: optimismgoerli_Bytes
  owner_not: optimismgoerli_Bytes
  owner_in: [optimismgoerli_Bytes!]
  owner_not_in: [optimismgoerli_Bytes!]
  owner_contains: optimismgoerli_Bytes
  owner_not_contains: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  recipient_not: optimismgoerli_Bytes
  recipient_in: [optimismgoerli_Bytes!]
  recipient_not_in: [optimismgoerli_Bytes!]
  recipient_contains: optimismgoerli_Bytes
  recipient_not_contains: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedOwner_not: optimismgoerli_Bytes
  proposedOwner_in: [optimismgoerli_Bytes!]
  proposedOwner_not_in: [optimismgoerli_Bytes!]
  proposedOwner_contains: optimismgoerli_Bytes
  proposedOwner_not_contains: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: optimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type optimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: optimismgoerli_Bytes!
}

input optimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type optimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: optimismgoerli_Bytes!
}

input optimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: optimismgoerli_Bytes
  sponsorVault_not: optimismgoerli_Bytes
  sponsorVault_in: [optimismgoerli_Bytes!]
  sponsorVault_not_in: [optimismgoerli_Bytes!]
  sponsorVault_contains: optimismgoerli_Bytes
  sponsorVault_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type optimismgoerli_StableSwap {
  id: ID!
  canonicalId: optimismgoerli_Bytes!
  domain: BigInt
  swapPool: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: optimismgoerli_Bytes
  swapPool_not: optimismgoerli_Bytes
  swapPool_in: [optimismgoerli_Bytes!]
  swapPool_not_in: [optimismgoerli_Bytes!]
  swapPool_contains: optimismgoerli_Bytes
  swapPool_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageProcessed
  optimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageProcessed_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
}

enum optimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type optimismgoerli__Block_ {
  """The hash of the block"""
  hash: optimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type optimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: optimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}