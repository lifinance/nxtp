/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IInboxInterface extends utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "createRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
    "createRetryableTicketNoRefundAliasRewrite(address,uint256,uint256,address,address,uint256,uint256,bytes)": FunctionFragment;
    "depositEth(uint256)": FunctionFragment;
    "pauseCreateRetryables()": FunctionFragment;
    "sendContractTransaction(uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "sendL1FundedContractTransaction(uint256,uint256,address,bytes)": FunctionFragment;
    "sendL1FundedUnsignedTransaction(uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "sendL2Message(bytes)": FunctionFragment;
    "sendUnsignedTransaction(uint256,uint256,uint256,address,uint256,bytes)": FunctionFragment;
    "startRewriteAddress()": FunctionFragment;
    "stopRewriteAddress()": FunctionFragment;
    "unpauseCreateRetryables()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "createRetryableTicket"
      | "createRetryableTicketNoRefundAliasRewrite"
      | "depositEth"
      | "pauseCreateRetryables"
      | "sendContractTransaction"
      | "sendL1FundedContractTransaction"
      | "sendL1FundedUnsignedTransaction"
      | "sendL2Message"
      | "sendUnsignedTransaction"
      | "startRewriteAddress"
      | "stopRewriteAddress"
      | "unpauseCreateRetryables"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createRetryableTicket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRetryableTicketNoRefundAliasRewrite",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseCreateRetryables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendContractTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL1FundedContractTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL1FundedUnsignedTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendL2Message",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnsignedTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startRewriteAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopRewriteAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseCreateRetryables",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRetryableTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRetryableTicketNoRefundAliasRewrite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCreateRetryables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendContractTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL1FundedContractTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL1FundedUnsignedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendL2Message",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUnsignedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRewriteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopRewriteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseCreateRetryables",
    data: BytesLike
  ): Result;

  events: {
    "InboxMessageDelivered(uint256,bytes)": EventFragment;
    "InboxMessageDeliveredFromOrigin(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InboxMessageDelivered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InboxMessageDeliveredFromOrigin"
  ): EventFragment;
}

export interface InboxMessageDeliveredEventObject {
  messageNum: BigNumber;
  data: string;
}
export type InboxMessageDeliveredEvent = TypedEvent<
  [BigNumber, string],
  InboxMessageDeliveredEventObject
>;

export type InboxMessageDeliveredEventFilter =
  TypedEventFilter<InboxMessageDeliveredEvent>;

export interface InboxMessageDeliveredFromOriginEventObject {
  messageNum: BigNumber;
}
export type InboxMessageDeliveredFromOriginEvent = TypedEvent<
  [BigNumber],
  InboxMessageDeliveredFromOriginEventObject
>;

export type InboxMessageDeliveredFromOriginEventFilter =
  TypedEventFilter<InboxMessageDeliveredFromOriginEvent>;

export interface IInbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IInboxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    createRetryableTicket(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRetryableTicketNoRefundAliasRewrite(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL1FundedContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL1FundedUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  createRetryableTicket(
    destAddr: PromiseOrValue<string>,
    arbTxCallValue: PromiseOrValue<BigNumberish>,
    maxSubmissionCost: PromiseOrValue<BigNumberish>,
    submissionRefundAddress: PromiseOrValue<string>,
    valueRefundAddress: PromiseOrValue<string>,
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRetryableTicketNoRefundAliasRewrite(
    destAddr: PromiseOrValue<string>,
    arbTxCallValue: PromiseOrValue<BigNumberish>,
    maxSubmissionCost: PromiseOrValue<BigNumberish>,
    submissionRefundAddress: PromiseOrValue<string>,
    valueRefundAddress: PromiseOrValue<string>,
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    maxSubmissionCost: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseCreateRetryables(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendContractTransaction(
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    destAddr: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL1FundedContractTransaction(
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    destAddr: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL1FundedUnsignedTransaction(
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    destAddr: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendL2Message(
    messageData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendUnsignedTransaction(
    maxGas: PromiseOrValue<BigNumberish>,
    gasPriceBid: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    destAddr: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startRewriteAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopRewriteAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseCreateRetryables(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    createRetryableTicket(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRetryableTicketNoRefundAliasRewrite(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositEth(
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseCreateRetryables(overrides?: CallOverrides): Promise<void>;

    sendContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendL1FundedContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendL1FundedUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startRewriteAddress(overrides?: CallOverrides): Promise<void>;

    stopRewriteAddress(overrides?: CallOverrides): Promise<void>;

    unpauseCreateRetryables(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "InboxMessageDelivered(uint256,bytes)"(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;
    InboxMessageDelivered(
      messageNum?: PromiseOrValue<BigNumberish> | null,
      data?: null
    ): InboxMessageDeliveredEventFilter;

    "InboxMessageDeliveredFromOrigin(uint256)"(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;
    InboxMessageDeliveredFromOrigin(
      messageNum?: PromiseOrValue<BigNumberish> | null
    ): InboxMessageDeliveredFromOriginEventFilter;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    createRetryableTicket(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRetryableTicketNoRefundAliasRewrite(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositEth(
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL1FundedContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL1FundedUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createRetryableTicket(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRetryableTicketNoRefundAliasRewrite(
      destAddr: PromiseOrValue<string>,
      arbTxCallValue: PromiseOrValue<BigNumberish>,
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      submissionRefundAddress: PromiseOrValue<string>,
      valueRefundAddress: PromiseOrValue<string>,
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      maxSubmissionCost: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL1FundedContractTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL1FundedUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendL2Message(
      messageData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendUnsignedTransaction(
      maxGas: PromiseOrValue<BigNumberish>,
      gasPriceBid: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      destAddr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopRewriteAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseCreateRetryables(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
