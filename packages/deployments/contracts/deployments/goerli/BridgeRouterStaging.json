{
  "address": "0xB2Ee96FAf8D0C0A1909FB147A31FEB81F731add0",
  "abi": [
    {
      "inputs": [],
      "name": "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "originAndNonce",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "toId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "toHook",
          "type": "bool"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DUST_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_custom",
          "type": "address"
        }
      ],
      "name": "enrollCustom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "liquidityProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oldRepr",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "remotes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteHook",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "sendToHook",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "setXAppConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "contract ITokenRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xAppConnectionManager",
      "outputs": [
        {
          "internalType": "contract IConnectorManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf7bbbf8a5206e5e993c04eb89f3e3eac524235b9743317a713f9fea9b4b708f9",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0xB2Ee96FAf8D0C0A1909FB147A31FEB81F731add0",
    "transactionIndex": 22,
    "gasUsed": "2890986",
    "logsBloom": "0x
    "blockHash": "0x528f1e25a82ab470c7c992fb0de8ca507fcc3addf772b9441ccaecc7b6dc1fb3",
    "transactionHash": "0xf7bbbf8a5206e5e993c04eb89f3e3eac524235b9743317a713f9fea9b4b708f9",
    "logs": [],
    "blockNumber": 7593516,
    "cumulativeGasUsed": "10833027",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "cd3909b11f0b53138f35dc7cc1c054f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"originAndNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toHook\",\"type\":\"bool\"}],\"name\":\"Send\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DUST_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_custom\",\"type\":\"address\"}],\"name\":\"enrollCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"liquidityProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldRepr\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remotes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteHook\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"sendToHook\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"setXAppConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract ITokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAppConnectionManager\",\"outputs\":[{\"internalType\":\"contract IConnectorManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Receive(uint64,address,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being received\",\"liquidityProvider\":\"The account providing liquidity\",\"originAndNonce\":\"Domain where the transfer originated and the        unique identifier for the message from origin to destination,        combined in a single field ((origin << 32) & nonce)\",\"recipient\":\"The address receiving the tokens; the original        recipient of the transfer\",\"token\":\"The address of the local token contract being received\"}},\"Send(address,address,uint32,bytes32,uint256,bool)\":{\"params\":{\"amount\":\"the amount of tokens sent\",\"from\":\"the address sending tokens\",\"toDomain\":\"the domain of the chain the tokens are being sent to\",\"toHook\":\"True if sent to a hook, on the remote chain, false        otherwise\",\"toId\":\"the bytes32 address of the recipient of the tokens\",\"token\":\"the address of the token contract\"}}},\"kind\":\"dev\",\"methods\":{\"enrollCustom(uint32,bytes32,address)\":{\"params\":{\"_custom\":\"the address of the custom implementation to use.\",\"_domain\":\"the domain of the canonical Token to enroll\",\"_id\":\"the bytes32 ID of the canonical of the Token to enroll\"}},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote xApp Router\",\"_router\":\"The address of the remote xApp Router\"}},\"handle(uint32,uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_nonce\":\"The unique identifier for the message from origin to        destination\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"migrate(address)\":{\"details\":\"This is explicitly opt-in to allow dapps to decide when and how to      upgrade to the new representation.\",\"params\":{\"_oldRepr\":\"The address of the old token to migrate\"}},\"renounceOwnership()\":{\"details\":\"should be impossible to renounce ownership;      we override OpenZeppelin OwnableUpgradeable's      implementation of renounceOwnership to make it a no-op\"},\"send(address,uint256,uint32,bytes32,bool)\":{\"params\":{\"_amount\":\"The token amount\",\"_destination\":\"The destination domain\",\"_recipient\":\"The recipient address\",\"_token\":\"The token address\"}},\"sendToHook(address,uint256,uint32,bytes32,bytes)\":{\"params\":{\"_amount\":\"The token amount\",\"_destination\":\"The destination domain\",\"_extraData\":\"Extra data that will be passed to the hook for        execution\",\"_remoteHook\":\"The hook contract on the remote chain\",\"_token\":\"The token address\"}},\"setXAppConnectionManager(address)\":{\"params\":{\"_xAppConnectionManager\":\"The address of the xAppConnectionManager contract\"}}},\"title\":\"BridgeRouter\",\"version\":1},\"userdoc\":{\"events\":{\"Receive(uint64,address,address,address,uint256)\":{\"notice\":\"emitted when tokens are dispensed to an account on this domain         emitted both when fast liquidity is provided, and when the         transfer ultimately settles\"},\"Send(address,address,uint32,bytes32,uint256,bool)\":{\"notice\":\"emitted when tokens are sent from this domain to another domain\"}},\"kind\":\"user\",\"methods\":{\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"enrollCustom(uint32,bytes32,address)\":{\"notice\":\"Enroll a custom token. This allows projects to work with         governance to specify a custom representation.\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same xApp on a remote chain\"},\"handle(uint32,uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"migrate(address)\":{\"notice\":\"Migrate all tokens in a previous representation to the latest         custom representation. This works by looking up local mappings         and then burning old tokens and minting new tokens.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"send(address,uint256,uint32,bytes32,bool)\":{\"notice\":\"Send tokens to a recipient on a remote chain\"},\"sendToHook(address,uint256,uint32,bytes32,bytes)\":{\"notice\":\"Send tokens to a hook on the remote chain\"},\"setXAppConnectionManager(address)\":{\"notice\":\"Modify the contract the xApp uses to validate Replica contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/BridgeRouter.sol\":\"BridgeRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/core/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\n// ============ External Imports ============\\nimport {IMessageRecipient} from \\\"../messaging/interfaces/IMessageRecipient.sol\\\";\\n\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\n  // ============ Mutable Storage ============\\n\\n  mapping(uint32 => bytes32) public remotes;\\n\\n  // ============ Upgrade Gap ============\\n\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from a remote Router contract\\n   * @param _origin The domain the message is coming from\\n   * @param _router The address the message is coming from\\n   */\\n  modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n    require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\n    _;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\\n    remotes[_domain] = _router;\\n  }\\n\\n  // ============ Virtual functions ============\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external virtual override;\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Return true if the given domain / router is the address of a remote xApp Router\\n   * @param _domain The domain of the potential remote xApp Router\\n   * @param _router The address of the potential remote xApp Router\\n   */\\n  function _isRemoteRouter(uint32 _domain, bytes32 _router) internal view returns (bool) {\\n    return remotes[_domain] == _router && _router != bytes32(0);\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = remotes[_domain];\\n    require(_remote != bytes32(0), \\\"!remote\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf962fb33b875d0820e9f506d54d74f5fc35d6ef5413a64098bf88ee2a5f28f82\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {IOutbox} from \\\"../messaging/interfaces/IOutbox.sol\\\";\\nimport {IConnectorManager} from \\\"../messaging/interfaces/IConnectorManager.sol\\\";\\n\\nimport {ProposedOwnableUpgradeable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\nabstract contract XAppConnectionClient is ProposedOwnableUpgradeable {\\n  // ============ Mutable Storage ============\\n\\n  IConnectorManager public xAppConnectionManager;\\n\\n  // ============ Upgrade Gap ============\\n\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from an Nomad Replica contract\\n   */\\n  modifier onlyReplica() {\\n    require(_isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function __XAppConnectionClient_initialize(address _xAppConnectionManager) internal initializer {\\n    xAppConnectionManager = IConnectorManager(_xAppConnectionManager);\\n    __ProposedOwnable_init();\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\\n    xAppConnectionManager = IConnectorManager(_xAppConnectionManager);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @notice Get the local Home contract from the xAppConnectionManager\\n   * @return The local Home contract\\n   */\\n  function _home() internal view returns (IOutbox) {\\n    return xAppConnectionManager.home();\\n  }\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function _isReplica(address _potentialReplica) internal view returns (bool) {\\n    return xAppConnectionManager.isReplica(_potentialReplica);\\n  }\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function _localDomain() internal view virtual returns (uint32) {\\n    return xAppConnectionManager.localDomain();\\n  }\\n}\\n\",\"keccak256\":\"0x5713e125e350fdd32f4d6639c9914a2fd255c14124a7cc44d854cafbae95f772\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/interfaces/ITokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenRegistry {\\n  function isLocalOrigin(address _token) external view returns (bool);\\n\\n  function ensureLocalToken(uint32 _domain, bytes32 _id) external returns (address _local);\\n\\n  function mustHaveLocalToken(uint32 _domain, bytes32 _id) external view returns (IERC20);\\n\\n  function getLocalAddress(uint32 _domain, bytes32 _id) external view returns (address _local);\\n\\n  function getTokenId(address _token) external view returns (uint32, bytes32);\\n\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external;\\n\\n  function oldReprToCurrentRepr(address _oldRepr) external view returns (address _currentRepr);\\n}\\n\",\"keccak256\":\"0x79aff891b84bd1f25051f1f7ec2397a661eef1c5504d6dc92077a21680eee3d1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\n/**\\n * @notice Each router extends the `XAppConnectionClient` contract. This contract\\n * allows an admin to call `setXAppConnectionManager` to update the underlying\\n * pointers to the messaging inboxes (Replicas) and outboxes (Homes).\\n *\\n * @dev This interface only contains the functions needed for the `XAppConnectionClient`\\n * will interface with.\\n */\\ninterface IConnectorManager {\\n  /**\\n   * @notice Get the local inbox contract from the xAppConnectionManager\\n   * @return The local inbox contract\\n   * @dev The local inbox contract is a SpokeConnector with AMBs, and a\\n   * Home contract with nomad\\n   */\\n  function home() external view returns (IOutbox);\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function isReplica(address _potentialReplica) external view returns (bool);\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xa2c9a88a7b76a89615fe199d8a78878e5deb8dd13b036a86b575d31966beab1a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IMessageRecipient {\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7a889873cf54269ffefdb4e796b3d15b6ce6f4d87410e7da7fa2dcf76098ccc6\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @notice Interface for all contracts sending messages originating on their\\n * current domain.\\n *\\n * @dev These are the Home.sol interface methods used by the `Router`\\n * and exposed via `home()` on the `XAppConnectionClient`\\n */\\ninterface IOutbox {\\n  /**\\n   * @notice Emitted when a new message is added to an outbound message merkle root\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   * @return bytes32 The leaf added to the tree\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe6a213bd3c9e0c4dcf0e982cdef2a6a613a49b7bca3d6ad662c179e509de6c2b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __GAP;\\n}\\n\",\"keccak256\":\"0xf4c67a5db702cb9775ad3a0ed49bbe137e5a55b4000c507dd6fef3397f3607e3\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0xfb763d8c311e5972fd6e7d7334ce10cc3f5dbe8a922308b3c160bfb722109f63\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x818736bf6004223f78f8949c534c74f144b741f5b1ece635670f0fd9b2217344\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe3b9e398dff8870d5a597de93a9cb0aa139f27ed27c12bbe78c8ff60d85b0aaf\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/test/BridgeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../shared/libraries/TypedMemView.sol\\\";\\n\\nlibrary BridgeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  // The Types enum has to do with the TypedMemView library and it defines\\n  // the types of `views` that we use in BridgeMessage. A view is not interesting data\\n  // itself, but rather it points to a specific part of the memory where\\n  // the data we care about live. When we give a `type` to a view, we define what type\\n  // is the data it points to, so that we can do easy runtime assertions without\\n  // having to fetch the whole data from memory and check for ourselves. In BridgeMessage.sol\\n  // the types of `data` we can have are defined in this enum and may belong to different taxonomies.\\n  // For example, a `Message` includes a `TokenId` and an Action, either a `Transfer` or a `TransferToHook`.\\n  // The Message is a different TYPE of data than a TokenId or Transfer, as TokenId and Transfer live inside\\n  // the message. For that reason, we define them as different data types and we add them to the same enum\\n  // for ease of use.\\n  enum Types {\\n    Invalid, // 0\\n    TokenId, // 1\\n    Message, // 2\\n    Transfer, // 3\\n    DeprecatedFastTransfer, // 4\\n    TransferToHook, // 5\\n    ExtraData // 6\\n  }\\n\\n  // ============ Structs ============\\n\\n  // Tokens are identified by a TokenId:\\n  // domain - 4 byte chain ID of the chain from which the token originates\\n  // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\n  struct TokenId {\\n    uint32 domain;\\n    bytes32 id;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n  uint256 private constant IDENTIFIER_LEN = 1;\\n  uint256 private constant TRANSFER_LEN = 97; // 1 byte identifier + 32 bytes recipient + 32 bytes amount + 32 bytes detailsHash\\n  uint256 private constant MIN_TRANSFER_HOOK_LEN = 129; // 1 byte identifier + 32 bytes hook address + 32 bytes amount + 32 bytes detailsHash + 32 bytes sender + X bytes extraData\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Checks that Action is valid type\\n   * @param _action The action\\n   * @return TRUE if action is valid\\n   */\\n  function isValidAction(bytes29 _action) internal pure returns (bool) {\\n    return isTransfer(_action) || isTransferToHook(_action);\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == TOKEN_ID_LEN + TRANSFER_LEN || _len >= TOKEN_ID_LEN + MIN_TRANSFER_HOOK_LEN;\\n  }\\n\\n  /**\\n   * @notice Formats an action message\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   * @return The formatted message\\n   */\\n  function formatMessage(bytes29 _tokenId, bytes29 _action)\\n    internal\\n    view\\n    typeAssert(_tokenId, Types.TokenId)\\n    returns (bytes memory)\\n  {\\n    require(isValidAction(_action), \\\"!action\\\");\\n    bytes29[] memory _views = new bytes29[](2);\\n    _views[0] = _tokenId;\\n    _views[1] = _action;\\n    return TypedMemView.join(_views);\\n  }\\n\\n  /**\\n   * @notice Returns the type of the message\\n   * @param _view The message\\n   * @return The type of the message\\n   */\\n  function messageType(bytes29 _view) internal pure returns (Types) {\\n    return Types(uint8(_view.typeOf()));\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of the specified type\\n   * @param _type the type to check for\\n   * @param _action The message\\n   * @return True if the message is of the specified type\\n   */\\n  function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type Transfer\\n   * @param _action The message\\n   * @return True if the message is of type Transfer\\n   */\\n  function isTransfer(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.Transfer);\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type TransferToHook\\n   * @param _action The message\\n   * @return True if the message is of type TransferToHook\\n   */\\n  function isTransferToHook(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.TransferToHook);\\n  }\\n\\n  /**\\n   * @notice Formats Transfer\\n   * @param _to The recipient address as bytes32\\n   * @param _amnt The transfer amount\\n   * @param _detailsHash The hash of the token name, symbol, and decimals\\n   * @return\\n   */\\n  function formatTransfer(\\n    bytes32 _to,\\n    uint256 _amnt,\\n    bytes32 _detailsHash\\n  ) internal pure returns (bytes29) {\\n    return abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash).ref(uint40(Types.Transfer));\\n  }\\n\\n  /**\\n   * @notice Formats TransferToHook message\\n   * @param _hook The hook that will handle this token transfer\\n   * @param _amnt The transfer amount\\n   * @param _detailsHash The hash of the token name, symbol, and decimals\\n   * @param _extraData User-provided data for the receiving hook\\n   * @return\\n   */\\n  function formatTransferToHook(\\n    bytes32 _hook,\\n    uint256 _amnt,\\n    bytes32 _detailsHash,\\n    bytes32 _sender,\\n    bytes memory _extraData\\n  ) internal pure returns (bytes29) {\\n    return\\n      abi.encodePacked(Types.TransferToHook, _hook, _amnt, _detailsHash, _sender, _extraData).ref(\\n        uint40(Types.TransferToHook)\\n      );\\n  }\\n\\n  /**\\n   * @notice Serializes a Token ID struct\\n   * @param _tokenId The token id struct\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29) {\\n    return formatTokenId(_tokenId.domain, _tokenId.id);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized Token ID from components\\n   * @param _domain The domain\\n   * @param _id The ID\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29) {\\n    return abi.encodePacked(_domain, _id).ref(uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Formats the keccak256 hash of the token details\\n   * Token Details Format:\\n   *      length of name cast to bytes - 32 bytes\\n   *      name - x bytes (variable)\\n   *      length of symbol cast to bytes - 32 bytes\\n   *      symbol - x bytes (variable)\\n   *      decimals - 1 byte\\n   * @param _name The name\\n   * @param _symbol The symbol\\n   * @param _decimals The decimals\\n   * @return The Details message\\n   */\\n  function getDetailsHash(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(bytes(_name).length, _name, bytes(_symbol).length, _symbol, _decimals));\\n  }\\n\\n  /**\\n   * @notice Retrieves the domain from a TokenID\\n   * @param _tokenId The message\\n   * @return The domain\\n   */\\n  function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32) {\\n    return uint32(_tokenId.indexUint(0, 4));\\n  }\\n\\n  /**\\n   * @notice Retrieves the ID from a TokenID\\n   * @param _tokenId The message\\n   * @return The ID\\n   */\\n  function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32) {\\n    // before = 4 bytes domain\\n    return _tokenId.index(4, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM ID\\n   * @param _tokenId The message\\n   * @return The EVM ID\\n   */\\n  function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address) {\\n    // before = 4 bytes domain + 12 bytes empty to trim for address\\n    return _tokenId.indexAddress(16);\\n  }\\n\\n  /**\\n   * @notice Retrieves the action identifier from message\\n   * @param _message The action\\n   * @return The message type\\n   */\\n  function msgType(bytes29 _message) internal pure returns (uint8) {\\n    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from action\\n   * @param _action The action\\n   * @return The action type\\n   */\\n  function actionType(bytes29 _action) internal pure returns (uint8) {\\n    return uint8(_action.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The recipient address as bytes32\\n   */\\n  function recipient(bytes29 _transferAction)\\n    internal\\n    pure\\n    typeAssert(_transferAction, Types.Transfer)\\n    returns (bytes32)\\n  {\\n    // before = 1 byte identifier\\n    return _transferAction.index(1, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM Recipient from a Transfer\\n   * @param _transferAction The message\\n   * @return The EVM Recipient\\n   */\\n  function evmRecipient(bytes29 _transferAction)\\n    internal\\n    pure\\n    typeAssert(_transferAction, Types.Transfer)\\n    returns (address)\\n  {\\n    // before = 1 byte identifier + 12 bytes empty to trim for address = 13 bytes\\n    return _transferAction.indexAddress(13);\\n  }\\n\\n  /**\\n   * @notice Retrieves the amount from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n    // before = 1 byte identifier + 32 bytes ID = 33 bytes\\n    return _transferAction.indexUint(33, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the detailsHash from a Transfer\\n   * @param _transferAction The message\\n   * @return The detailsHash\\n   */\\n  function detailsHash(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes ID + 32 bytes amount = 65 bytes\\n    return _transferAction.index(65, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the token ID from a Message\\n   * @param _message The message\\n   * @return The ID\\n   */\\n  function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the hook contract EVM address from a TransferWithHook\\n   * @param _transferAction The message\\n   * @return The hook contract address\\n   */\\n  function evmHook(bytes29 _transferAction)\\n    internal\\n    pure\\n    typeAssert(_transferAction, Types.TransferToHook)\\n    returns (address)\\n  {\\n    return _transferAction.indexAddress(13);\\n  }\\n\\n  /**\\n   * @notice Retrieves the sender from a TransferWithHook\\n   * @param _transferAction The message\\n   * @return The sender as bytes32\\n   */\\n  function sender(bytes29 _transferAction)\\n    internal\\n    pure\\n    typeAssert(_transferAction, Types.TransferToHook)\\n    returns (bytes32)\\n  {\\n    // before = 1 byte identifier + 32 bytes hook address + 32 bytes amount + 32 bytes detailsHash = 97\\n    return _transferAction.index(97, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the extra data from a TransferWithHook\\n   * @param _transferAction The message\\n   * @return A TypedMemview of extraData\\n   */\\n  function extraData(bytes29 _transferAction)\\n    internal\\n    pure\\n    typeAssert(_transferAction, Types.TransferToHook)\\n    returns (bytes29)\\n  {\\n    // anything past the end is the extradata\\n    return\\n      _transferAction.slice(\\n        MIN_TRANSFER_HOOK_LEN,\\n        _transferAction.len() - MIN_TRANSFER_HOOK_LEN,\\n        uint40(Types.ExtraData)\\n      );\\n  }\\n\\n  /**\\n   * @notice Retrieves the action data from a Message\\n   * @param _message The message\\n   * @return The action\\n   */\\n  function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n    uint40 _type = uint40(msgType(_message));\\n    return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n  }\\n\\n  /**\\n   * @notice Converts to a Message\\n   * @param _message The message\\n   * @return The newly typed message\\n   */\\n  function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n    if (isValidMessageLength(_message)) {\\n      return _message.castTo(uint40(Types.Message));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type Message\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsMessage(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0xc544735c3d62b4d946ca7b3105c82c1e561565c29500f0f8db4cd5f0717e0124\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/test/BridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\nimport {IBridgeToken} from \\\"./IBridgeToken.sol\\\";\\nimport {IBridgeHook} from \\\"./IBridgeHook.sol\\\";\\n\\nimport {ITokenRegistry} from \\\"../core/connext/interfaces/ITokenRegistry.sol\\\";\\n\\nimport {IOutbox} from \\\"../messaging/interfaces/IOutbox.sol\\\";\\n\\nimport {XAppConnectionClient} from \\\"../core/XAppConnectionClient.sol\\\";\\nimport {Router} from \\\"../core/Router.sol\\\";\\n\\nimport {TypedMemView} from \\\"../shared/libraries/TypedMemView.sol\\\";\\nimport {TypeCasts} from \\\"../shared/libraries/TypeCasts.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title BridgeRouter\\n */\\ncontract BridgeRouter is Router {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using BridgeMessage for bytes29;\\n  using SafeERC20 for IERC20;\\n\\n  // ============ Constants ============\\n\\n  // the amount transferred to bridgoors without gas funds\\n  uint256 public constant DUST_AMOUNT = 0.06 ether;\\n\\n  // ============ Public Storage ============\\n\\n  // contract that manages registry representation tokens\\n  ITokenRegistry public tokenRegistry;\\n  // token transfer prefill ID => LP that pre-filled message to provide fast\\n  // liquidity\\n  mapping(bytes32 => address) public liquidityProvider;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ======== Events =========\\n\\n  /**\\n   * @notice emitted when tokens are sent from this domain to another domain\\n   * @param token the address of the token contract\\n   * @param from the address sending tokens\\n   * @param toDomain the domain of the chain the tokens are being sent to\\n   * @param toId the bytes32 address of the recipient of the tokens\\n   * @param amount the amount of tokens sent\\n   * @param toHook True if sent to a hook, on the remote chain, false\\n   *        otherwise\\n   */\\n  event Send(\\n    address indexed token,\\n    address indexed from,\\n    uint32 indexed toDomain,\\n    bytes32 toId,\\n    uint256 amount,\\n    bool toHook\\n  );\\n\\n  /**\\n   * @notice emitted when tokens are dispensed to an account on this domain\\n   *         emitted both when fast liquidity is provided, and when the\\n   *         transfer ultimately settles\\n   * @param originAndNonce Domain where the transfer originated and the\\n   *        unique identifier for the message from origin to destination,\\n   *        combined in a single field ((origin << 32) & nonce)\\n   * @param token The address of the local token contract being received\\n   * @param recipient The address receiving the tokens; the original\\n   *        recipient of the transfer\\n   * @param liquidityProvider The account providing liquidity\\n   * @param amount The amount of tokens being received\\n   */\\n  event Receive(\\n    uint64 indexed originAndNonce,\\n    address indexed token,\\n    address indexed recipient,\\n    address liquidityProvider,\\n    uint256 amount\\n  );\\n\\n  // ======== Receive =======\\n  receive() external payable {}\\n\\n  // ======== Initializer ========\\n\\n  function initialize(address _tokenRegistry, address _xAppConnectionManager) public initializer {\\n    tokenRegistry = ITokenRegistry(_tokenRegistry);\\n    __XAppConnectionClient_initialize(_xAppConnectionManager);\\n  }\\n\\n  // ======== External: Handle =========\\n\\n  /**\\n   * @notice Handles an incoming message\\n   * @param _origin The origin domain\\n   * @param _nonce The unique identifier for the message from origin to\\n   *        destination\\n   * @param _sender The sender address\\n   * @param _message The message\\n   */\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n    // parse tokenId and action from message\\n    bytes29 _msg = _message.ref(0).mustBeMessage();\\n    bytes29 _tokenId = _msg.tokenId();\\n    bytes29 _action = _msg.action();\\n    // handle message based on the intended action\\n    if (_action.isTransfer()) {\\n      _handleTransfer(_origin, _nonce, _tokenId, _action);\\n    } else if (_action.isTransferToHook()) {\\n      _handleTransferToHook(_origin, _nonce, _tokenId, _action);\\n    } else {\\n      require(false, \\\"!valid action\\\");\\n    }\\n  }\\n\\n  // ======== External: Send Token =========\\n\\n  /**\\n   * @notice Send tokens to a recipient on a remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _recipient The recipient address\\n   */\\n  function send(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bool /*_enableFast - deprecated field, left argument for backwards compatibility */\\n  ) external {\\n    // validate inputs\\n    require(_recipient != bytes32(0), \\\"!recip\\\");\\n    // get the token id\\n    (bytes29 _tokenId, bytes32 _detailsHash, bool _isLocal) = _getTokenIdAndDetailsHash(_token);\\n    // debit tokens from the sender\\n    _takeTokens(_token, _amount, _isLocal);\\n    // format Transfer message\\n    bytes29 _action = BridgeMessage.formatTransfer(_recipient, _amount, _detailsHash);\\n    // send message to destination chain bridge router\\n    _sendTransferMessage(_destination, _tokenId, _action);\\n    // emit Send event to record token sender\\n    emit Send(_token, msg.sender, _destination, _recipient, _amount, false);\\n  }\\n\\n  /**\\n   * @notice Send tokens to a hook on the remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _remoteHook The hook contract on the remote chain\\n   * @param _extraData Extra data that will be passed to the hook for\\n   *        execution\\n   */\\n  function sendToHook(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _remoteHook,\\n    bytes calldata _extraData\\n  ) external returns (bytes32) {\\n    // get the token id\\n    (bytes29 _tokenId, bytes32 _detailsHash, bool _isLocal) = _getTokenIdAndDetailsHash(_token);\\n    // debit tokens from the sender\\n    _takeTokens(_token, _amount, _isLocal);\\n    // format Hook transfer message\\n    bytes29 _action = BridgeMessage.formatTransferToHook(\\n      _remoteHook,\\n      _amount,\\n      _detailsHash,\\n      TypeCasts.addressToBytes32(msg.sender),\\n      _extraData\\n    );\\n    // send message to destination chain bridge router\\n    bytes32 _messageHash = _sendTransferMessage(_destination, _tokenId, _action);\\n    // emit Send event to record token sender\\n    emit Send(_token, msg.sender, _destination, _remoteHook, _amount, true);\\n    return _messageHash;\\n  }\\n\\n  // ======== External: Custom Tokens =========\\n\\n  /**\\n   * @notice Enroll a custom token. This allows projects to work with\\n   *         governance to specify a custom representation.\\n   * @param _domain the domain of the canonical Token to enroll\\n   * @param _id the bytes32 ID of the canonical of the Token to enroll\\n   * @param _custom the address of the custom implementation to use.\\n   */\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external onlyOwner {\\n    // Sanity check. Ensures that human error doesn't cause an\\n    // unpermissioned contract to be enrolled.\\n    IBridgeToken(_custom).mint(address(this), 1);\\n    IBridgeToken(_custom).burn(address(this), 1);\\n    tokenRegistry.enrollCustom(_domain, _id, _custom);\\n  }\\n\\n  /**\\n   * @notice Migrate all tokens in a previous representation to the latest\\n   *         custom representation. This works by looking up local mappings\\n   *         and then burning old tokens and minting new tokens.\\n   * @dev This is explicitly opt-in to allow dapps to decide when and how to\\n   *      upgrade to the new representation.\\n   * @param _oldRepr The address of the old token to migrate\\n   */\\n  function migrate(address _oldRepr) external {\\n    address _currentRepr = tokenRegistry.oldReprToCurrentRepr(_oldRepr);\\n    require(_currentRepr != _oldRepr, \\\"!different\\\");\\n    // burn the total balance of old tokens & mint the new ones\\n    IBridgeToken _old = IBridgeToken(_oldRepr);\\n    uint256 _bal = _old.balanceOf(msg.sender);\\n    _old.burn(msg.sender, _bal);\\n    IBridgeToken(_currentRepr).mint(msg.sender, _bal);\\n  }\\n\\n  // ============ Internal: Send ============\\n\\n  /**\\n   * @notice Take from msg.sender as part of sending tokens across chains\\n   * @dev Locks canonical tokens in escrow in BridgeRouter\\n   *      OR Burns representation tokens\\n   * @param _token The token to pull from the sender\\n   * @param _amount The amount to pull from the sender\\n   * @param _isLocal Whether or not the token is locally originating\\n   */\\n  function _takeTokens(\\n    address _token,\\n    uint256 _amount,\\n    bool _isLocal\\n  ) internal {\\n    // Exit early if the _amount is 0\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Setup vars used in both if branches\\n    IBridgeToken _t = IBridgeToken(_token);\\n    // remove tokens from circulation on this chain\\n    if (_isLocal) {\\n      // if the token originates on this chain,\\n      // hold the tokens in escrow in the Router\\n      IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n    } else {\\n      // if the token originates on a remote chain,\\n      // burn the representation tokens on this chain\\n      _t.burn(msg.sender, _amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the token id for a given _token\\n   * @param _token The token to pull ID for\\n   * @return _tokenId the bytes canonical token identifier\\n   * @return _detailsHash the hash of the canonical token details (name,\\n   *         symbol, decimal)\\n   */\\n  function _getTokenIdAndDetailsHash(address _token)\\n    internal\\n    returns (\\n      bytes29 _tokenId,\\n      bytes32 _detailsHash,\\n      bool _isLocal\\n    )\\n  {\\n    // get the tokenID\\n    (uint32 _domain, bytes32 _id) = tokenRegistry.getTokenId(_token);\\n    _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\n    // handle the 0-case\\n    if (_token == address(0)) {\\n      _detailsHash = bytes32(0);\\n      _isLocal = false;\\n      return (_tokenId, _detailsHash, _isLocal);\\n    }\\n    // Setup vars used in both if branches\\n    IBridgeToken _t = IBridgeToken(_token);\\n    // get the details hash\\n    if (tokenRegistry.isLocalOrigin(_token)) {\\n      // query token contract for details and calculate detailsHash\\n      _detailsHash = BridgeMessage.getDetailsHash(_t.name(), _t.symbol(), _t.decimals());\\n      _isLocal = true;\\n    } else {\\n      _detailsHash = _t.detailsHash();\\n      _isLocal = false;\\n    }\\n  }\\n\\n  /**\\n   * @notice Dispatch a message via Nomad to a destination domain\\n   *         addressed to the remote BridgeRouter on that chain\\n   * @dev Message will trigger `handle` method on the remote BridgeRouter\\n   *      when it is received on the destination chain\\n   * @param _destination The domain of the destination chain\\n   * @param _tokenId The canonical token identifier for the transfer message\\n   * @param _action The contents of the transfer message\\n   */\\n  function _sendTransferMessage(\\n    uint32 _destination,\\n    bytes29 _tokenId,\\n    bytes29 _action\\n  ) internal returns (bytes32) {\\n    // get remote BridgeRouter address; revert if not found\\n    bytes32 _remote = _mustHaveRemote(_destination);\\n    // send message to remote chain via Nomad\\n    return\\n      IOutbox(xAppConnectionManager.home()).dispatch(\\n        _destination,\\n        _remote,\\n        BridgeMessage.formatMessage(_tokenId, _action)\\n      );\\n  }\\n\\n  // ============ Internal: Handle ============\\n\\n  /**\\n   * @notice Handles an incoming Transfer message.\\n   *\\n   * If the token is of local origin, the amount is sent from escrow.\\n   * Otherwise, a representation token is minted.\\n   *\\n   * @param _origin The domain of the chain from which the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to\\n   *        destination\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   */\\n  function _handleTransfer(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes29 _tokenId,\\n    bytes29 _action\\n  ) internal {\\n    // tokens will be sent to the specified recipient\\n    address _recipient = _action.evmRecipient();\\n    // send tokens\\n    _giveTokens(_origin, _nonce, _tokenId, _action, _recipient);\\n    // dust the recipient with gas tokens\\n    _dust(_recipient);\\n  }\\n\\n  /**\\n   * @notice Handles an incoming TransferToHook message.\\n   *\\n   * @dev The hook is called AFTER tokens have been transferred to the hook\\n   *      contract. If this hook errors, the bridge WILL NOT revert, and the\\n   *      hook contract will own those tokens. Hook contracts MUST have a\\n   *      recovery plan in place for these situations.\\n   *\\n   * @param _origin The domain of the chain from which the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   */\\n  function _handleTransferToHook(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes29 _tokenId,\\n    bytes29 _action\\n  ) internal {\\n    // tokens will be sent to user-specified hook\\n    address _hook = _action.evmHook();\\n    // send tokens\\n    address _token = _giveTokens(_origin, _nonce, _tokenId, _action, _hook);\\n    // NOTE: in the case of 0-value transfers, the token will be empty\\n    // ABI-encode the calldata for a `Hook.onRecive` call\\n    bytes memory _call = abi.encodeWithSelector(\\n      IBridgeHook.onReceive.selector,\\n      _origin,\\n      _action.sender(),\\n      _tokenId.domain(),\\n      _tokenId.id(),\\n      _token,\\n      _action.amnt(),\\n      _action.extraData().clone()\\n    );\\n    // Call the hook with the ABI-encoded payload\\n    // We use a low-level call here so that solc will skip pre-call\\n    // and post-call checks. Specifically we want to skip\\n    // 1. pre-flight extcode check\\n    // 2. post-flight success check\\n    // We do this so that the hook contract need not exist, and need\\n    // not execute succesfully\\n    _hook.call(_call);\\n  }\\n\\n  /**\\n   * @notice Send tokens to a specified recipient.\\n   * @dev Unlocks canonical tokens from escrow in BridgeRouter\\n   *      OR Mints representation tokens\\n   * @param _origin The domain of the chain from which the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to\\n   *        destination\\n   * @param _tokenId The canonical token identifier to credit\\n   * @param _action The contents of the transfer message\\n   * @param _recipient The recipient that will receive tokens\\n   * @return _token The address of the local token contract\\n   */\\n  function _giveTokens(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes29 _tokenId,\\n    bytes29 _action,\\n    address _recipient\\n  ) internal returns (address _token) {\\n    // get the token contract for the given tokenId on this chain;\\n    // (if the token is of remote origin and there is\\n    // no existing representation token contract, the TokenRegistry will\\n    // deploy a new one)\\n    _token = tokenRegistry.ensureLocalToken(_tokenId.domain(), _tokenId.id());\\n    // load amount once\\n    uint256 _amount = _action.amnt();\\n    if (_amount == 0) {\\n      // emit receive event\\n      emit Receive(_originAndNonce(_origin, _nonce), _token, _recipient, address(0), _amount);\\n      // exit early\\n      return _token;\\n    }\\n    // send the tokens into circulation on this chain\\n    if (tokenRegistry.isLocalOrigin(_token)) {\\n      // if the token is of local origin, the tokens have been held in\\n      // escrow in this contract\\n      // while they have been circulating on remote chains;\\n      // transfer the tokens to the recipient\\n      IERC20(_token).safeTransfer(_recipient, _amount);\\n    } else {\\n      // if the token is of remote origin, mint the tokens to the\\n      // recipient on this chain\\n      IBridgeToken(_token).mint(_recipient, _amount);\\n      // Tell the token what its detailsHash is\\n      IBridgeToken(_token).setDetailsHash(_action.detailsHash());\\n    }\\n    // emit Receive event\\n    emit Receive(_originAndNonce(_origin, _nonce), _token, _recipient, address(0), _amount);\\n  }\\n\\n  // ============ Internal: Dust with Gas ============\\n\\n  /**\\n   * @notice Dust the recipient. This feature allows chain operators to use\\n   * the Bridge as a faucet if so desired. Any gas asset held by the\\n   * bridge will be slowly sent to users who need initial gas bootstrapping\\n   * @dev Does not dust if insufficient funds, or if user has funds already\\n   */\\n  function _dust(address _recipient) internal {\\n    if (_recipient.balance < DUST_AMOUNT && address(this).balance >= DUST_AMOUNT) {\\n      // `send` gives execution 2300 gas and returns a `success` boolean.\\n      // however, we do not care if the call fails. A failed call\\n      // indicates a smart contract attempting to execute logic, which we\\n      // specifically do not want.\\n      // While we could check EXTCODESIZE, it seems sufficient to rely on\\n      // the 2300 gas stipend to ensure that no state change logic can\\n      // be executed.\\n      payable(_recipient).send(DUST_AMOUNT);\\n    }\\n  }\\n\\n  // ============ Internal: Utils ============\\n\\n  /**\\n     * @notice Internal utility function that combines\\n     *         `_origin` and `_nonce`.\\n     * @dev Both origin and nonce should be less than 2^32 - 1\\n     * @param _origin Domain of chain where the transfer originated\\n     * @param _nonce The unique identifier for the message from origin to\\n              destination\\n     * @return Returns (`_origin` << 32) & `_nonce`\\n     */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n\\n  /**\\n   * @dev should be impossible to renounce ownership;\\n   *      we override OpenZeppelin OwnableUpgradeable's\\n   *      implementation of renounceOwnership to make it a no-op\\n   */\\n  function renounceOwnership() public override onlyOwner {\\n    // do nothing\\n  }\\n}\\n\",\"keccak256\":\"0x3b52dc9c06c1bb53e158670270fc134c2597cef552d0f9737adcf2c6587189c4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/test/IBridgeHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IBridgeHook {\\n  /**\\n   * @notice Handles an incoming bridge transfer with some tokens and extra\\n   * data. Takes any necessary actions for the hook's purposes.\\n   *\\n   * This function is intended to allow arbitrary post-bridge actions with\\n   * tokens, at a user's discretion. E.g. recollateralize a CDP, exchange for\\n   * other tokens, emit an event, etc.\\n   *\\n   * @dev This hook is called AFTER tokens have been transferred to the hook\\n   * contract. If this hook errors, the bridge WILL NOT revert, and the hook\\n   * contract will own those tokens. Hook contracts MUST have a recovery plan\\n   * in place for these situations.\\n   *\\n   * @param _origin The domain of the chain from which the transfer originated\\n   * @param _sender The identifier of the caller which sent the tokens over the bridge\\n   * @param _tokenDomain The canonical deployment domain of the token\\n   * @param _tokenAddress The identifier for the token on its canonical domain\\n   * @param _localToken The local address of the token (its canonical\\n   *                    address if it is local to this domain, otherwise its\\n   *                    the address of its local representation).\\n   * @param _amount The amount of token received over the bridge\\n   * @param _extraData Extra user-specified data passed in to the origin chain\\n   */\\n  function onReceive(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _tokenDomain,\\n    bytes32 _tokenAddress,\\n    address _localToken,\\n    uint256 _amount,\\n    bytes memory _extraData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x589ff40251f6bf5b26f105ef5b8b47ac6847d4c2601ef5cd6821c9d6e8f4a677\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/test/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IBridgeToken {\\n  function initialize() external;\\n\\n  function name() external returns (string memory);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function detailsHash() external view returns (bytes32);\\n\\n  function burn(address _from, uint256 _amnt) external;\\n\\n  function mint(address _to, uint256 _amnt) external;\\n\\n  function setDetailsHash(bytes32 _detailsHash) external;\\n\\n  function setDetails(\\n    string calldata _name,\\n    string calldata _symbol,\\n    uint8 _decimals\\n  ) external;\\n\\n  // inherited from ownable\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xfc4b12486cfd18458b9d3598b36fcf0682e9cdb9ac96c1e2456a39cab6230887\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061335a806100206000396000f3fe60806040526004361061012e5760003560e01c806397f641ab116100ab578063b49c53a71161006f578063b49c53a714610345578063bc7dbab314610365578063c5b350df14610385578063ce5494bb1461039a578063d1851c92146103ba578063d232c220146103d857600080fd5b806397f641ab146102aa5780639d23c4c7146102c5578063a9bd1226146102e5578063ab2dc3f514610305578063b1f8100d1461032557600080fd5b8063546d573d116100f2578063546d573d146101f85780636a42b8f81461022e578063715018a61461024457806383bbb806146102595780638da5cb5b1461028657600080fd5b806328b1aea01461013a5780633339df961461015c5780633cf52ffb1461019957806341bdc8b5146101b8578063485cc955146101d857600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061015a610155366004612a65565b61040e565b005b34801561016857600080fd5b5060345461017c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a557600080fd5b506002545b604051908152602001610190565b3480156101c457600080fd5b5061015a6101d3366004612aa7565b610576565b3480156101e457600080fd5b5061015a6101f3366004612ac4565b6105c9565b34801561020457600080fd5b5061017c610213366004612afd565b6099602052600090815260409020546001600160a01b031681565b34801561023a57600080fd5b5062093a806101aa565b34801561025057600080fd5b5061015a6106ba565b34801561026557600080fd5b506101aa610274366004612b16565b60666020526000908152604090205481565b34801561029257600080fd5b506000546201000090046001600160a01b031661017c565b3480156102b657600080fd5b506101aa66d529ae9e86000081565b3480156102d157600080fd5b5060985461017c906001600160a01b031681565b3480156102f157600080fd5b5061015a610300366004612b41565b6106ed565b34801561031157600080fd5b5061015a610320366004612c0f565b6107be565b34801561033157600080fd5b5061015a610340366004612aa7565b610911565b34801561035157600080fd5b5061015a610360366004612cbe565b6109c5565b34801561037157600080fd5b506101aa610380366004612cea565b610a0f565b34801561039157600080fd5b5061015a610aee565b3480156103a657600080fd5b5061015a6103b5366004612aa7565b610b5e565b3480156103c657600080fd5b506001546001600160a01b031661017c565b3480156103e457600080fd5b506103fe6000546201000090046001600160a01b03161590565b6040519015158152602001610190565b6000546201000090046001600160a01b0316331461043f576040516311a8a1bb60e31b815260040160405180910390fd5b6040516340c10f1960e01b8152306004820152600160248201526001600160a01b038216906340c10f1990604401600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b5050604051632770a7eb60e21b8152306004820152600160248201526001600160a01b0384169250639dc29fac9150604401600060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b50506098546040516301458d7560e51b815263ffffffff87166004820152602481018690526001600160a01b03858116604483015290911692506328b1aea09150606401600060405180830381600087803b15801561055957600080fd5b505af115801561056d573d6000803e3d6000fd5b50505050505050565b6000546201000090046001600160a01b031633146105a7576040516311a8a1bb60e31b815260040160405180910390fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16158080156105e95750600054600160ff909116105b806106035750303b158015610603575060005460ff166001145b6106285760405162461bcd60e51b815260040161061f90612d94565b60405180910390fd5b6000805460ff19166001179055801561064b576000805461ff0019166101001790555b609880546001600160a01b0319166001600160a01b03851617905561066f82610d54565b80156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000546201000090046001600160a01b031633146106eb576040516311a8a1bb60e31b815260040160405180910390fd5b565b816107235760405162461bcd60e51b815260206004820152600660248201526502172656369760d41b604482015260640161061f565b600080600061073188610e3a565b925092509250610742888883611108565b600061074f86898561116f565b905061075c8785836111ad565b5060408051878152602081018a9052600081830152905163ffffffff89169133916001600160a01b038d16917fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf919081900360600190a4505050505050505050565b6107c7336112b6565b6107fe5760405162461bcd60e51b8152602060048201526008602482015267217265706c69636160c01b604482015260640161061f565b838261080a828261132b565b6108475760405162461bcd60e51b815260206004820152600e60248201526d10b932b6b7ba32903937baba32b960911b604482015260640161061f565b60006108616108568583611352565b62ffffff191661136d565b9050600061087462ffffff198316611386565b9050600061088762ffffff1984166113bf565b905061089862ffffff198216611417565b156108ae576108a989898484611424565b610906565b6108bd62ffffff198216611455565b156108ce576108a989898484611462565b60405162461bcd60e51b815260206004820152600d60248201526c10bb30b634b21030b1ba34b7b760991b604482015260640161061f565b505050505050505050565b6000546201000090046001600160a01b03163314610942576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561096757506001600160a01b03811615155b15610985576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b038083166201000090920416036109b957604051634a2fb73f60e11b815260040160405180910390fd5b6109c28161159c565b50565b6000546201000090046001600160a01b031633146109f6576040516311a8a1bb60e31b815260040160405180910390fd5b63ffffffff909116600090815260666020526040902055565b600080600080610a1e8a610e3a565b925092509250610a2f8a8a83611108565b6000610a74888b85338b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115ea92505050565b90506000610a838a86846111ad565b604080518b8152602081018e905260019181019190915290915063ffffffff8b169033906001600160a01b038f16907fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf9060600160405180910390a49b9a5050505050505050505050565b6001546001600160a01b03163314610b19576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610b2b9190612df8565b11610b495760405163d39c12bb60e01b815260040160405180910390fd5b6001546106eb906001600160a01b031661160c565b609854604051630e71e25160e01b81526001600160a01b0383811660048301526000921690630e71e25190602401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190612e0f565b9050816001600160a01b0316816001600160a01b031603610c1d5760405162461bcd60e51b815260206004820152600a60248201526908591a5999995c995b9d60b21b604482015260640161061f565b6040516370a0823160e01b815233600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612e2c565b604051632770a7eb60e21b8152336004820152602481018290529091506001600160a01b03831690639dc29fac90604401600060405180830381600087803b158015610cd557600080fd5b505af1158015610ce9573d6000803e3d6000fd5b50506040516340c10f1960e01b8152336004820152602481018490526001600160a01b03861692506340c10f1991506044015b600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b5050505050505050565b600054610100900460ff1615808015610d745750600054600160ff909116105b80610d8e5750303b158015610d8e575060005460ff166001145b610daa5760405162461bcd60e51b815260040161061f90612d94565b6000805460ff191660011790558015610dcd576000805461ff0019166101001790555b603480546001600160a01b0319166001600160a01b038416179055610df061167c565b8015610e36576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6098546040516378a9bb4360e11b81526001600160a01b038381166004830152600092839283928392839291169063f1537686906024016040805180830381865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb19190612e45565b91509150610ebf82826116ab565b94506001600160a01b038616610ede5750600092508291506111019050565b60985460405163c86415cb60e01b81526001600160a01b0380891660048301528892169063c86415cb90602401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190612e73565b1561109457611089816001600160a01b03166306fdde036040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610f94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbc9190810190612ebc565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ffa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110229190810190612ebc565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110849190612f2a565b6116d8565b9450600193506110fd565b806001600160a01b0316634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190612e2c565b9450600093505b5050505b9193909250565b8160000361111557505050565b828115611136576111316001600160a01b038516333086611714565b611169565b604051632770a7eb60e21b8152336004820152602481018490526001600160a01b03821690639dc29fac90604401610d1c565b50505050565b60006111a360038086868660405160200161118d9493929190612f88565b60408051601f1981840301815291905290611352565b90505b9392505050565b6000806111b98561177f565b9050603460009054906101000a90046001600160a01b03166001600160a01b0316639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190612e0f565b6001600160a01b031663fa31de01868361124c88886117d1565b6040518463ffffffff1660e01b815260040161126a93929190612fdb565b6020604051808303816000875af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612e2c565b95945050505050565b603454604051635190bc5360e01b81526001600160a01b0383811660048301526000921690635190bc5390602401602060405180830381865afa158015611301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113259190612e73565b92915050565b63ffffffff8216600090815260666020526040812054821480156111a65750501515919050565b8151600090602084016112ad64ffffffffff851682846118a0565b600061132561137b836118e5565b62ffffff1916611917565b600081600261139d815b62ffffff19841690611972565b506113b76000602460015b62ffffff198816929190611a4b565b949350505050565b60008160026113cd81611390565b5060006113e86024601887901c6001600160601b0316612df8565b905060006113f586611abb565b60ff16905061140d62ffffff19871660248484611a4b565b9695505050505050565b6000611325826003611ad0565b600061143562ffffff198316611b2f565b90506114448585858585611b4f565b5061144e81611e52565b5050505050565b6000611325826005611ad0565b600061147362ffffff198316611ea8565b905060006114848686868686611b4f565b905060006302424a7f60e11b876114a062ffffff198716611eb6565b6114af62ffffff198916611ed8565b6114be62ffffff198a16611efa565b866114ce62ffffff198b16611f1c565b6114eb6114e062ffffff198d16611f31565b62ffffff1916611f63565b6040516024016115019796959493929190613000565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050826001600160a01b03168160405161154e9190613056565b6000604051808303816000865af19150503d806000811461158b576040519150601f19603f3d011682016040523d82523d6000602084013e611590565b606091505b50505050505050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600061140d600580888888888860405160200161118d96959493929190613072565b600080546001600160a01b038381166201000081810262010000600160b01b031985161785556002859055600180546001600160a01b031916905560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff166116a35760405162461bcd60e51b815260040161061f906130bb565b6106eb611fac565b60006111a660016040516001600160e01b031960e087901b1660208201526024810185905260440161118d565b6000835184845185856040516020016116f5959493929190613106565b6040516020818303038152906040528051906020012090509392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111699085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fdc565b63ffffffff8116600090815260666020526040902054806117cc5760405162461bcd60e51b81526020600482015260076024820152662172656d6f746560c81b604482015260640161061f565b919050565b60608260016117df81611390565b506117e9846120ae565b61181f5760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b604482015260640161061f565b604080516002808252606082018352600092602083019080368337019050509050858160008151811061185457611854613166565b602002602001019062ffffff1916908162ffffff191681525050848160018151811061188257611882613166565b62ffffff199092166020928302919091019091015261140d816120c8565b6000806118ad838561317c565b90506040518111156118bd575060005b806000036118d25762ffffff199150506111a6565b606085811b8517901b831760181b6112ad565b60006118f08261211d565b1561190d576301000000600160d81b038216600160d91b17611325565b62ffffff19611325565b600061192282612155565b61196e5760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c656400000000000000604482015260640161061f565b5090565b600061197e8383612192565b611a4457600061199d6119918560d81c90565b64ffffffffff166121b5565b91505060006119b28464ffffffffff166121b5565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161061f9190613194565b5090919050565b600080611a618660781c6001600160601b031690565b6001600160601b03169050611a7586612263565b84611a80878461317c565b611a8a919061317c565b1115611a9d5762ffffff199150506113b7565b611aa7858261317c565b905061140d8364ffffffffff1682866118a0565b600061132562ffffff1983166024600161229c565b6000816006811115611ae457611ae4612f4d565b60ff16611af0846122cc565b60ff161480156111a65750816006811115611b0d57611b0d612f4d565b611b16846122e0565b6006811115611b2757611b27612f4d565b149392505050565b6000816003611b3d81611390565b506113b762ffffff198516600d6122fb565b6098546000906001600160a01b031663b869d89a611b7262ffffff198716611ed8565b611b8162ffffff198816611efa565b6040516001600160e01b031960e085901b16815263ffffffff92909216600483015260248201526044016020604051808303816000875af1158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190612e0f565b90506000611c0162ffffff198516611f1c565b905080600003611c7e576001600160a01b0380841690831667ffffffff0000000060208a901b1663ffffffff89161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a4506112ad565b60985460405163c86415cb60e01b81526001600160a01b0384811660048301529091169063c86415cb90602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190612e73565b15611d0a57611d056001600160a01b0383168483612309565b611ddb565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018390528316906340c10f1990604401600060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b50505050816001600160a01b031663cc2ab7c7611d8a8662ffffff1916612339565b6040518263ffffffff1660e01b8152600401611da891815260200190565b600060405180830381600087803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b505050505b6001600160a01b0380841690831667ffffffff0000000060208a901b1663ffffffff89161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a45095945050505050565b66d529ae9e860000816001600160a01b031631108015611e79575066d529ae9e8600004710155b156109c2576040516001600160a01b0382169060009066d529ae9e8600009082818181858883f1505050505050565b6000816005611b3d81611390565b6000816005611ec481611390565b506113b762ffffff1985166061602061234a565b6000816001611ee681611390565b506113b762ffffff1985166000600461229c565b6000816001611f0881611390565b506113b762ffffff1985166004602061234a565b600061132562ffffff1983166021602061229c565b6000816005611f3f81611390565b506113b76081611f5c81601888901c6001600160601b0316612df8565b60066113a8565b6060600080611f7b8460181c6001600160601b031690565b6001600160601b031690506040519150819250611f9b84836020016124a6565b508181016020016040529052919050565b600054610100900460ff16611fd35760405162461bcd60e51b815260040161061f906130bb565b6106eb3361160c565b6000612031826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fd9092919063ffffffff16565b8051909150156106b5578080602001905181019061204f9190612e73565b6106b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161061f565b60006120b982611417565b80611325575061132582611455565b60405160609060006120dd846020840161260c565b905060006120f48260181c6001600160601b031690565b6001600160601b03169050600061210a8361269c565b9184525082016020016040525092915050565b6000601882901c6001600160601b03166121396061602461317c565b8114806111a6575061214d6081602461317c565b111592915050565b60006121618260d81c90565b64ffffffffff1664ffffffffff0361217b57506000919050565b600061218683612263565b60405110199392505050565b60008164ffffffffff166121a68460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561220a5760006121d48260086131a7565b60ff1685901c90506121e5816126b2565b61ffff16841793508160ff1660101461220057601084901b93505b50600019016121bb565b50600f5b60ff8160ff16101561225d5760006122278260086131a7565b60ff1685901c9050612238816126b2565b61ffff16831792508160ff1660001461225357601083901b92505b506000190161220e565b50915091565b60006122788260181c6001600160601b031690565b61228b8360781c6001600160601b031690565b016001600160601b03169050919050565b60006122a98260206131d0565b6122b49060086131a7565b60ff166122c285858561234a565b901c949350505050565b600061132562ffffff19831682600161229c565b600060d882901c60ff16600681111561132557611325612f4d565b60006111a68383601461229c565b6040516001600160a01b0383166024820152604481018290526106b590849063a9059cbb60e01b90606401611748565b600061132562ffffff198316604160205b60008160ff1660000361235f575060006111a6565b6123728460181c6001600160601b031690565b6001600160601b031661238860ff84168561317c565b11156123ec576123d36123a48560781c6001600160601b031690565b6001600160601b03166123c08660181c6001600160601b031690565b6001600160601b0316858560ff166126e4565b60405162461bcd60e51b815260040161061f9190613194565b60208260ff1611156124665760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161061f565b60088202600061247f8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600062ffffff198084160361250e5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b606482015260840161061f565b61251783612155565b6125775760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b606482015260840161061f565b600061258c8460181c6001600160601b031690565b6001600160601b0316905060006125ac8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156125cc5760206060fd5b8285848460045afa5061140d6125e28760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60606111a38484600085612752565b60006040518281111561261f5760206060fd5b506000805b845181101561268c57600085828151811061264157612641613166565b60200260200101519050612657818487016124a6565b5061266b8160181c6001600160601b031690565b6001600160601b031683019250508080612684906131f3565b915050612624565b50606083901b811760181b6113b7565b60006126a782612883565b61132590602061320c565b60006126c460048360ff16901c6128b8565b60ff1661ffff919091161760081b6126db826128b8565b60ff1617919050565b606060006126f1866121b5565b91505060006126ff866121b5565b915050600061270d866121b5565b915050600061271b866121b5565b91505083838383604051602001612735949392919061322b565b604051602081830303815290604052945050505050949350505050565b6060824710156127b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161061f565b6001600160a01b0385163b61280a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161061f565b600080866001600160a01b031685876040516128269190613056565b60006040518083038185875af1925050503d8060008114612863576040519150601f19603f3d011682016040523d82523d6000602084013e612868565b606091505b5091509150612878828286612a05565b979650505050505050565b6000602061289a8360181c6001600160601b031690565b6128ae906001600160601b0316601f61317c565b6113259190613302565b600060f08083179060ff821690036128d35750603092915050565b8060ff1660f1036128e75750603192915050565b8060ff1660f2036128fb5750603292915050565b8060ff1660f30361290f5750603392915050565b8060ff1660f4036129235750603492915050565b8060ff1660f5036129375750603592915050565b8060ff1660f60361294b5750603692915050565b8060ff1660f70361295f5750603792915050565b8060ff1660f8036129735750603892915050565b8060ff1660f9036129875750603992915050565b8060ff1660fa0361299b5750606192915050565b8060ff1660fb036129af5750606292915050565b8060ff1660fc036129c35750606392915050565b8060ff1660fd036129d75750606492915050565b8060ff1660fe036129eb5750606592915050565b8060ff1660ff036129ff5750606692915050565b50919050565b60608315612a145750816111a6565b825115612a245782518084602001fd5b8160405162461bcd60e51b815260040161061f9190613194565b63ffffffff811681146109c257600080fd5b6001600160a01b03811681146109c257600080fd5b600080600060608486031215612a7a57600080fd5b8335612a8581612a3e565b9250602084013591506040840135612a9c81612a50565b809150509250925092565b600060208284031215612ab957600080fd5b81356111a681612a50565b60008060408385031215612ad757600080fd5b8235612ae281612a50565b91506020830135612af281612a50565b809150509250929050565b600060208284031215612b0f57600080fd5b5035919050565b600060208284031215612b2857600080fd5b81356111a681612a3e565b80151581146109c257600080fd5b600080600080600060a08688031215612b5957600080fd5b8535612b6481612a50565b9450602086013593506040860135612b7b81612a3e565b9250606086013591506080860135612b9281612b33565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdf57612bdf612ba0565b604052919050565b600067ffffffffffffffff821115612c0157612c01612ba0565b50601f01601f191660200190565b60008060008060808587031215612c2557600080fd5b8435612c3081612a3e565b93506020850135612c4081612a3e565b925060408501359150606085013567ffffffffffffffff811115612c6357600080fd5b8501601f81018713612c7457600080fd5b8035612c87612c8282612be7565b612bb6565b818152886020838501011115612c9c57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612cd157600080fd5b8235612cdc81612a3e565b946020939093013593505050565b60008060008060008060a08789031215612d0357600080fd5b8635612d0e81612a50565b9550602087013594506040870135612d2581612a3e565b935060608701359250608087013567ffffffffffffffff80821115612d4957600080fd5b818901915089601f830112612d5d57600080fd5b813581811115612d6c57600080fd5b8a6020828501011115612d7e57600080fd5b6020830194508093505050509295509295509295565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612e0a57612e0a612de2565b500390565b600060208284031215612e2157600080fd5b81516111a681612a50565b600060208284031215612e3e57600080fd5b5051919050565b60008060408385031215612e5857600080fd5b8251612e6381612a3e565b6020939093015192949293505050565b600060208284031215612e8557600080fd5b81516111a681612b33565b60005b83811015612eab578181015183820152602001612e93565b838111156111695750506000910152565b600060208284031215612ece57600080fd5b815167ffffffffffffffff811115612ee557600080fd5b8201601f81018413612ef657600080fd5b8051612f04612c8282612be7565b818152856020838501011115612f1957600080fd5b6112ad826020830160208601612e90565b600060208284031215612f3c57600080fd5b815160ff811681146111a657600080fd5b634e487b7160e01b600052602160045260246000fd5b60078110612f8157634e487b7160e01b600052602160045260246000fd5b60f81b9052565b612f928186612f63565b600181019390935260218301919091526041820152606101919050565b60008151808452612fc7816020860160208601612e90565b601f01601f19169290920160200192915050565b63ffffffff841681528260208201526060604082015260006112ad6060830184612faf565b600063ffffffff808a16835288602084015280881660408401525085606083015260018060a01b03851660808301528360a083015260e060c083015261304960e0830184612faf565b9998505050505050505050565b60008251613068818460208701612e90565b9190910192915050565b61307c8188612f63565b856001820152846021820152836041820152826061820152600082516130a9816081850160208701612e90565b91909101608101979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8581526000855161311e816020850160208a01612e90565b8083019050856020820152845161313c816040840160208901612e90565b60f89490941b6001600160f81b031916604091909401908101939093525050604101949350505050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561318f5761318f612de2565b500190565b6020815260006111a66020830184612faf565b600060ff821660ff84168160ff04811182151516156131c8576131c8612de2565b029392505050565b600060ff821660ff8416808210156131ea576131ea612de2565b90039392505050565b60006001820161320557613205612de2565b5060010190565b600081600019048311821515161561322657613226612de2565b500290565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d820161140d565b60008261331f57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122064a88575615225e2f63b38b91bac32bedc093b91fae045d97bf4bf688da2ae2c64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c806397f641ab116100ab578063b49c53a71161006f578063b49c53a714610345578063bc7dbab314610365578063c5b350df14610385578063ce5494bb1461039a578063d1851c92146103ba578063d232c220146103d857600080fd5b806397f641ab146102aa5780639d23c4c7146102c5578063a9bd1226146102e5578063ab2dc3f514610305578063b1f8100d1461032557600080fd5b8063546d573d116100f2578063546d573d146101f85780636a42b8f81461022e578063715018a61461024457806383bbb806146102595780638da5cb5b1461028657600080fd5b806328b1aea01461013a5780633339df961461015c5780633cf52ffb1461019957806341bdc8b5146101b8578063485cc955146101d857600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061015a610155366004612a65565b61040e565b005b34801561016857600080fd5b5060345461017c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a557600080fd5b506002545b604051908152602001610190565b3480156101c457600080fd5b5061015a6101d3366004612aa7565b610576565b3480156101e457600080fd5b5061015a6101f3366004612ac4565b6105c9565b34801561020457600080fd5b5061017c610213366004612afd565b6099602052600090815260409020546001600160a01b031681565b34801561023a57600080fd5b5062093a806101aa565b34801561025057600080fd5b5061015a6106ba565b34801561026557600080fd5b506101aa610274366004612b16565b60666020526000908152604090205481565b34801561029257600080fd5b506000546201000090046001600160a01b031661017c565b3480156102b657600080fd5b506101aa66d529ae9e86000081565b3480156102d157600080fd5b5060985461017c906001600160a01b031681565b3480156102f157600080fd5b5061015a610300366004612b41565b6106ed565b34801561031157600080fd5b5061015a610320366004612c0f565b6107be565b34801561033157600080fd5b5061015a610340366004612aa7565b610911565b34801561035157600080fd5b5061015a610360366004612cbe565b6109c5565b34801561037157600080fd5b506101aa610380366004612cea565b610a0f565b34801561039157600080fd5b5061015a610aee565b3480156103a657600080fd5b5061015a6103b5366004612aa7565b610b5e565b3480156103c657600080fd5b506001546001600160a01b031661017c565b3480156103e457600080fd5b506103fe6000546201000090046001600160a01b03161590565b6040519015158152602001610190565b6000546201000090046001600160a01b0316331461043f576040516311a8a1bb60e31b815260040160405180910390fd5b6040516340c10f1960e01b8152306004820152600160248201526001600160a01b038216906340c10f1990604401600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b5050604051632770a7eb60e21b8152306004820152600160248201526001600160a01b0384169250639dc29fac9150604401600060405180830381600087803b1580156104e757600080fd5b505af11580156104fb573d6000803e3d6000fd5b50506098546040516301458d7560e51b815263ffffffff87166004820152602481018690526001600160a01b03858116604483015290911692506328b1aea09150606401600060405180830381600087803b15801561055957600080fd5b505af115801561056d573d6000803e3d6000fd5b50505050505050565b6000546201000090046001600160a01b031633146105a7576040516311a8a1bb60e31b815260040160405180910390fd5b603480546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16158080156105e95750600054600160ff909116105b806106035750303b158015610603575060005460ff166001145b6106285760405162461bcd60e51b815260040161061f90612d94565b60405180910390fd5b6000805460ff19166001179055801561064b576000805461ff0019166101001790555b609880546001600160a01b0319166001600160a01b03851617905561066f82610d54565b80156106b5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000546201000090046001600160a01b031633146106eb576040516311a8a1bb60e31b815260040160405180910390fd5b565b816107235760405162461bcd60e51b815260206004820152600660248201526502172656369760d41b604482015260640161061f565b600080600061073188610e3a565b925092509250610742888883611108565b600061074f86898561116f565b905061075c8785836111ad565b5060408051878152602081018a9052600081830152905163ffffffff89169133916001600160a01b038d16917fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf919081900360600190a4505050505050505050565b6107c7336112b6565b6107fe5760405162461bcd60e51b8152602060048201526008602482015267217265706c69636160c01b604482015260640161061f565b838261080a828261132b565b6108475760405162461bcd60e51b815260206004820152600e60248201526d10b932b6b7ba32903937baba32b960911b604482015260640161061f565b60006108616108568583611352565b62ffffff191661136d565b9050600061087462ffffff198316611386565b9050600061088762ffffff1984166113bf565b905061089862ffffff198216611417565b156108ae576108a989898484611424565b610906565b6108bd62ffffff198216611455565b156108ce576108a989898484611462565b60405162461bcd60e51b815260206004820152600d60248201526c10bb30b634b21030b1ba34b7b760991b604482015260640161061f565b505050505050505050565b6000546201000090046001600160a01b03163314610942576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561096757506001600160a01b03811615155b15610985576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b038083166201000090920416036109b957604051634a2fb73f60e11b815260040160405180910390fd5b6109c28161159c565b50565b6000546201000090046001600160a01b031633146109f6576040516311a8a1bb60e31b815260040160405180910390fd5b63ffffffff909116600090815260666020526040902055565b600080600080610a1e8a610e3a565b925092509250610a2f8a8a83611108565b6000610a74888b85338b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506115ea92505050565b90506000610a838a86846111ad565b604080518b8152602081018e905260019181019190915290915063ffffffff8b169033906001600160a01b038f16907fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf9060600160405180910390a49b9a5050505050505050505050565b6001546001600160a01b03163314610b19576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610b2b9190612df8565b11610b495760405163d39c12bb60e01b815260040160405180910390fd5b6001546106eb906001600160a01b031661160c565b609854604051630e71e25160e01b81526001600160a01b0383811660048301526000921690630e71e25190602401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190612e0f565b9050816001600160a01b0316816001600160a01b031603610c1d5760405162461bcd60e51b815260206004820152600a60248201526908591a5999995c995b9d60b21b604482015260640161061f565b6040516370a0823160e01b815233600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612e2c565b604051632770a7eb60e21b8152336004820152602481018290529091506001600160a01b03831690639dc29fac90604401600060405180830381600087803b158015610cd557600080fd5b505af1158015610ce9573d6000803e3d6000fd5b50506040516340c10f1960e01b8152336004820152602481018490526001600160a01b03861692506340c10f1991506044015b600060405180830381600087803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b5050505050505050565b600054610100900460ff1615808015610d745750600054600160ff909116105b80610d8e5750303b158015610d8e575060005460ff166001145b610daa5760405162461bcd60e51b815260040161061f90612d94565b6000805460ff191660011790558015610dcd576000805461ff0019166101001790555b603480546001600160a01b0319166001600160a01b038416179055610df061167c565b8015610e36576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6098546040516378a9bb4360e11b81526001600160a01b038381166004830152600092839283928392839291169063f1537686906024016040805180830381865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb19190612e45565b91509150610ebf82826116ab565b94506001600160a01b038616610ede5750600092508291506111019050565b60985460405163c86415cb60e01b81526001600160a01b0380891660048301528892169063c86415cb90602401602060405180830381865afa158015610f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4c9190612e73565b1561109457611089816001600160a01b03166306fdde036040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610f94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbc9190810190612ebc565b826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ffa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110229190810190612ebc565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110849190612f2a565b6116d8565b9450600193506110fd565b806001600160a01b0316634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f69190612e2c565b9450600093505b5050505b9193909250565b8160000361111557505050565b828115611136576111316001600160a01b038516333086611714565b611169565b604051632770a7eb60e21b8152336004820152602481018490526001600160a01b03821690639dc29fac90604401610d1c565b50505050565b60006111a360038086868660405160200161118d9493929190612f88565b60408051601f1981840301815291905290611352565b90505b9392505050565b6000806111b98561177f565b9050603460009054906101000a90046001600160a01b03166001600160a01b0316639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190612e0f565b6001600160a01b031663fa31de01868361124c88886117d1565b6040518463ffffffff1660e01b815260040161126a93929190612fdb565b6020604051808303816000875af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612e2c565b95945050505050565b603454604051635190bc5360e01b81526001600160a01b0383811660048301526000921690635190bc5390602401602060405180830381865afa158015611301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113259190612e73565b92915050565b63ffffffff8216600090815260666020526040812054821480156111a65750501515919050565b8151600090602084016112ad64ffffffffff851682846118a0565b600061132561137b836118e5565b62ffffff1916611917565b600081600261139d815b62ffffff19841690611972565b506113b76000602460015b62ffffff198816929190611a4b565b949350505050565b60008160026113cd81611390565b5060006113e86024601887901c6001600160601b0316612df8565b905060006113f586611abb565b60ff16905061140d62ffffff19871660248484611a4b565b9695505050505050565b6000611325826003611ad0565b600061143562ffffff198316611b2f565b90506114448585858585611b4f565b5061144e81611e52565b5050505050565b6000611325826005611ad0565b600061147362ffffff198316611ea8565b905060006114848686868686611b4f565b905060006302424a7f60e11b876114a062ffffff198716611eb6565b6114af62ffffff198916611ed8565b6114be62ffffff198a16611efa565b866114ce62ffffff198b16611f1c565b6114eb6114e062ffffff198d16611f31565b62ffffff1916611f63565b6040516024016115019796959493929190613000565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050826001600160a01b03168160405161154e9190613056565b6000604051808303816000865af19150503d806000811461158b576040519150601f19603f3d011682016040523d82523d6000602084013e611590565b606091505b50505050505050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600061140d600580888888888860405160200161118d96959493929190613072565b600080546001600160a01b038381166201000081810262010000600160b01b031985161785556002859055600180546001600160a01b031916905560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b600054610100900460ff166116a35760405162461bcd60e51b815260040161061f906130bb565b6106eb611fac565b60006111a660016040516001600160e01b031960e087901b1660208201526024810185905260440161118d565b6000835184845185856040516020016116f5959493929190613106565b6040516020818303038152906040528051906020012090509392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526111699085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611fdc565b63ffffffff8116600090815260666020526040902054806117cc5760405162461bcd60e51b81526020600482015260076024820152662172656d6f746560c81b604482015260640161061f565b919050565b60608260016117df81611390565b506117e9846120ae565b61181f5760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b604482015260640161061f565b604080516002808252606082018352600092602083019080368337019050509050858160008151811061185457611854613166565b602002602001019062ffffff1916908162ffffff191681525050848160018151811061188257611882613166565b62ffffff199092166020928302919091019091015261140d816120c8565b6000806118ad838561317c565b90506040518111156118bd575060005b806000036118d25762ffffff199150506111a6565b606085811b8517901b831760181b6112ad565b60006118f08261211d565b1561190d576301000000600160d81b038216600160d91b17611325565b62ffffff19611325565b600061192282612155565b61196e5760405162461bcd60e51b815260206004820152601960248201527f56616c696469747920617373657274696f6e206661696c656400000000000000604482015260640161061f565b5090565b600061197e8383612192565b611a4457600061199d6119918560d81c90565b64ffffffffff166121b5565b91505060006119b28464ffffffffff166121b5565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161061f9190613194565b5090919050565b600080611a618660781c6001600160601b031690565b6001600160601b03169050611a7586612263565b84611a80878461317c565b611a8a919061317c565b1115611a9d5762ffffff199150506113b7565b611aa7858261317c565b905061140d8364ffffffffff1682866118a0565b600061132562ffffff1983166024600161229c565b6000816006811115611ae457611ae4612f4d565b60ff16611af0846122cc565b60ff161480156111a65750816006811115611b0d57611b0d612f4d565b611b16846122e0565b6006811115611b2757611b27612f4d565b149392505050565b6000816003611b3d81611390565b506113b762ffffff198516600d6122fb565b6098546000906001600160a01b031663b869d89a611b7262ffffff198716611ed8565b611b8162ffffff198816611efa565b6040516001600160e01b031960e085901b16815263ffffffff92909216600483015260248201526044016020604051808303816000875af1158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190612e0f565b90506000611c0162ffffff198516611f1c565b905080600003611c7e576001600160a01b0380841690831667ffffffff0000000060208a901b1663ffffffff89161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a4506112ad565b60985460405163c86415cb60e01b81526001600160a01b0384811660048301529091169063c86415cb90602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190612e73565b15611d0a57611d056001600160a01b0383168483612309565b611ddb565b6040516340c10f1960e01b81526001600160a01b038481166004830152602482018390528316906340c10f1990604401600060405180830381600087803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b50505050816001600160a01b031663cc2ab7c7611d8a8662ffffff1916612339565b6040518263ffffffff1660e01b8152600401611da891815260200190565b600060405180830381600087803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b505050505b6001600160a01b0380841690831667ffffffff0000000060208a901b1663ffffffff89161760408051600081526020810186905267ffffffffffffffff92909216917f9f9a97db84f39202ca3b409b63f7ccf7d3fd810e176573c7483088b6f181bbbb910160405180910390a45095945050505050565b66d529ae9e860000816001600160a01b031631108015611e79575066d529ae9e8600004710155b156109c2576040516001600160a01b0382169060009066d529ae9e8600009082818181858883f1505050505050565b6000816005611b3d81611390565b6000816005611ec481611390565b506113b762ffffff1985166061602061234a565b6000816001611ee681611390565b506113b762ffffff1985166000600461229c565b6000816001611f0881611390565b506113b762ffffff1985166004602061234a565b600061132562ffffff1983166021602061229c565b6000816005611f3f81611390565b506113b76081611f5c81601888901c6001600160601b0316612df8565b60066113a8565b6060600080611f7b8460181c6001600160601b031690565b6001600160601b031690506040519150819250611f9b84836020016124a6565b508181016020016040529052919050565b600054610100900460ff16611fd35760405162461bcd60e51b815260040161061f906130bb565b6106eb3361160c565b6000612031826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125fd9092919063ffffffff16565b8051909150156106b5578080602001905181019061204f9190612e73565b6106b55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161061f565b60006120b982611417565b80611325575061132582611455565b60405160609060006120dd846020840161260c565b905060006120f48260181c6001600160601b031690565b6001600160601b03169050600061210a8361269c565b9184525082016020016040525092915050565b6000601882901c6001600160601b03166121396061602461317c565b8114806111a6575061214d6081602461317c565b111592915050565b60006121618260d81c90565b64ffffffffff1664ffffffffff0361217b57506000919050565b600061218683612263565b60405110199392505050565b60008164ffffffffff166121a68460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561220a5760006121d48260086131a7565b60ff1685901c90506121e5816126b2565b61ffff16841793508160ff1660101461220057601084901b93505b50600019016121bb565b50600f5b60ff8160ff16101561225d5760006122278260086131a7565b60ff1685901c9050612238816126b2565b61ffff16831792508160ff1660001461225357601083901b92505b506000190161220e565b50915091565b60006122788260181c6001600160601b031690565b61228b8360781c6001600160601b031690565b016001600160601b03169050919050565b60006122a98260206131d0565b6122b49060086131a7565b60ff166122c285858561234a565b901c949350505050565b600061132562ffffff19831682600161229c565b600060d882901c60ff16600681111561132557611325612f4d565b60006111a68383601461229c565b6040516001600160a01b0383166024820152604481018290526106b590849063a9059cbb60e01b90606401611748565b600061132562ffffff198316604160205b60008160ff1660000361235f575060006111a6565b6123728460181c6001600160601b031690565b6001600160601b031661238860ff84168561317c565b11156123ec576123d36123a48560781c6001600160601b031690565b6001600160601b03166123c08660181c6001600160601b031690565b6001600160601b0316858560ff166126e4565b60405162461bcd60e51b815260040161061f9190613194565b60208260ff1611156124665760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161061f565b60088202600061247f8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600062ffffff198084160361250e5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b606482015260840161061f565b61251783612155565b6125775760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b606482015260840161061f565b600061258c8460181c6001600160601b031690565b6001600160601b0316905060006125ac8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156125cc5760206060fd5b8285848460045afa5061140d6125e28760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60606111a38484600085612752565b60006040518281111561261f5760206060fd5b506000805b845181101561268c57600085828151811061264157612641613166565b60200260200101519050612657818487016124a6565b5061266b8160181c6001600160601b031690565b6001600160601b031683019250508080612684906131f3565b915050612624565b50606083901b811760181b6113b7565b60006126a782612883565b61132590602061320c565b60006126c460048360ff16901c6128b8565b60ff1661ffff919091161760081b6126db826128b8565b60ff1617919050565b606060006126f1866121b5565b91505060006126ff866121b5565b915050600061270d866121b5565b915050600061271b866121b5565b91505083838383604051602001612735949392919061322b565b604051602081830303815290604052945050505050949350505050565b6060824710156127b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161061f565b6001600160a01b0385163b61280a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161061f565b600080866001600160a01b031685876040516128269190613056565b60006040518083038185875af1925050503d8060008114612863576040519150601f19603f3d011682016040523d82523d6000602084013e612868565b606091505b5091509150612878828286612a05565b979650505050505050565b6000602061289a8360181c6001600160601b031690565b6128ae906001600160601b0316601f61317c565b6113259190613302565b600060f08083179060ff821690036128d35750603092915050565b8060ff1660f1036128e75750603192915050565b8060ff1660f2036128fb5750603292915050565b8060ff1660f30361290f5750603392915050565b8060ff1660f4036129235750603492915050565b8060ff1660f5036129375750603592915050565b8060ff1660f60361294b5750603692915050565b8060ff1660f70361295f5750603792915050565b8060ff1660f8036129735750603892915050565b8060ff1660f9036129875750603992915050565b8060ff1660fa0361299b5750606192915050565b8060ff1660fb036129af5750606292915050565b8060ff1660fc036129c35750606392915050565b8060ff1660fd036129d75750606492915050565b8060ff1660fe036129eb5750606592915050565b8060ff1660ff036129ff5750606692915050565b50919050565b60608315612a145750816111a6565b825115612a245782518084602001fd5b8160405162461bcd60e51b815260040161061f9190613194565b63ffffffff811681146109c257600080fd5b6001600160a01b03811681146109c257600080fd5b600080600060608486031215612a7a57600080fd5b8335612a8581612a3e565b9250602084013591506040840135612a9c81612a50565b809150509250925092565b600060208284031215612ab957600080fd5b81356111a681612a50565b60008060408385031215612ad757600080fd5b8235612ae281612a50565b91506020830135612af281612a50565b809150509250929050565b600060208284031215612b0f57600080fd5b5035919050565b600060208284031215612b2857600080fd5b81356111a681612a3e565b80151581146109c257600080fd5b600080600080600060a08688031215612b5957600080fd5b8535612b6481612a50565b9450602086013593506040860135612b7b81612a3e565b9250606086013591506080860135612b9281612b33565b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612bdf57612bdf612ba0565b604052919050565b600067ffffffffffffffff821115612c0157612c01612ba0565b50601f01601f191660200190565b60008060008060808587031215612c2557600080fd5b8435612c3081612a3e565b93506020850135612c4081612a3e565b925060408501359150606085013567ffffffffffffffff811115612c6357600080fd5b8501601f81018713612c7457600080fd5b8035612c87612c8282612be7565b612bb6565b818152886020838501011115612c9c57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b60008060408385031215612cd157600080fd5b8235612cdc81612a3e565b946020939093013593505050565b60008060008060008060a08789031215612d0357600080fd5b8635612d0e81612a50565b9550602087013594506040870135612d2581612a3e565b935060608701359250608087013567ffffffffffffffff80821115612d4957600080fd5b818901915089601f830112612d5d57600080fd5b813581811115612d6c57600080fd5b8a6020828501011115612d7e57600080fd5b6020830194508093505050509295509295509295565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015612e0a57612e0a612de2565b500390565b600060208284031215612e2157600080fd5b81516111a681612a50565b600060208284031215612e3e57600080fd5b5051919050565b60008060408385031215612e5857600080fd5b8251612e6381612a3e565b6020939093015192949293505050565b600060208284031215612e8557600080fd5b81516111a681612b33565b60005b83811015612eab578181015183820152602001612e93565b838111156111695750506000910152565b600060208284031215612ece57600080fd5b815167ffffffffffffffff811115612ee557600080fd5b8201601f81018413612ef657600080fd5b8051612f04612c8282612be7565b818152856020838501011115612f1957600080fd5b6112ad826020830160208601612e90565b600060208284031215612f3c57600080fd5b815160ff811681146111a657600080fd5b634e487b7160e01b600052602160045260246000fd5b60078110612f8157634e487b7160e01b600052602160045260246000fd5b60f81b9052565b612f928186612f63565b600181019390935260218301919091526041820152606101919050565b60008151808452612fc7816020860160208601612e90565b601f01601f19169290920160200192915050565b63ffffffff841681528260208201526060604082015260006112ad6060830184612faf565b600063ffffffff808a16835288602084015280881660408401525085606083015260018060a01b03851660808301528360a083015260e060c083015261304960e0830184612faf565b9998505050505050505050565b60008251613068818460208701612e90565b9190910192915050565b61307c8188612f63565b856001820152846021820152836041820152826061820152600082516130a9816081850160208701612e90565b91909101608101979650505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8581526000855161311e816020850160208a01612e90565b8083019050856020820152845161313c816040840160208901612e90565b60f89490941b6001600160f81b031916604091909401908101939093525050604101949350505050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561318f5761318f612de2565b500190565b6020815260006111a66020830184612faf565b600060ff821660ff84168160ff04811182151516156131c8576131c8612de2565b029392505050565b600060ff821660ff8416808210156131ea576131ea612de2565b90039392505050565b60006001820161320557613205612de2565b5060010190565b600081600019048311821515161561322657613226612de2565b500290565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d820161140d565b60008261331f57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122064a88575615225e2f63b38b91bac32bedc093b91fae045d97bf4bf688da2ae2c64736f6c634300080f0033",
  "devdoc": {
    "events": {
      "Receive(uint64,address,address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens being received",
          "liquidityProvider": "The account providing liquidity",
          "originAndNonce": "Domain where the transfer originated and the        unique identifier for the message from origin to destination,        combined in a single field ((origin << 32) & nonce)",
          "recipient": "The address receiving the tokens; the original        recipient of the transfer",
          "token": "The address of the local token contract being received"
        }
      },
      "Send(address,address,uint32,bytes32,uint256,bool)": {
        "params": {
          "amount": "the amount of tokens sent",
          "from": "the address sending tokens",
          "toDomain": "the domain of the chain the tokens are being sent to",
          "toHook": "True if sent to a hook, on the remote chain, false        otherwise",
          "toId": "the bytes32 address of the recipient of the tokens",
          "token": "the address of the token contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "enrollCustom(uint32,bytes32,address)": {
        "params": {
          "_custom": "the address of the custom implementation to use.",
          "_domain": "the domain of the canonical Token to enroll",
          "_id": "the bytes32 ID of the canonical of the Token to enroll"
        }
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote xApp Router",
          "_router": "The address of the remote xApp Router"
        }
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_nonce": "The unique identifier for the message from origin to        destination",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "migrate(address)": {
        "details": "This is explicitly opt-in to allow dapps to decide when and how to      upgrade to the new representation.",
        "params": {
          "_oldRepr": "The address of the old token to migrate"
        }
      },
      "renounceOwnership()": {
        "details": "should be impossible to renounce ownership;      we override OpenZeppelin OwnableUpgradeable's      implementation of renounceOwnership to make it a no-op"
      },
      "send(address,uint256,uint32,bytes32,bool)": {
        "params": {
          "_amount": "The token amount",
          "_destination": "The destination domain",
          "_recipient": "The recipient address",
          "_token": "The token address"
        }
      },
      "sendToHook(address,uint256,uint32,bytes32,bytes)": {
        "params": {
          "_amount": "The token amount",
          "_destination": "The destination domain",
          "_extraData": "Extra data that will be passed to the hook for        execution",
          "_remoteHook": "The hook contract on the remote chain",
          "_token": "The token address"
        }
      },
      "setXAppConnectionManager(address)": {
        "params": {
          "_xAppConnectionManager": "The address of the xAppConnectionManager contract"
        }
      }
    },
    "title": "BridgeRouter",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Receive(uint64,address,address,address,uint256)": {
        "notice": "emitted when tokens are dispensed to an account on this domain         emitted both when fast liquidity is provided, and when the         transfer ultimately settles"
      },
      "Send(address,address,uint32,bytes32,uint256,bool)": {
        "notice": "emitted when tokens are sent from this domain to another domain"
      }
    },
    "kind": "user",
    "methods": {
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "enrollCustom(uint32,bytes32,address)": {
        "notice": "Enroll a custom token. This allows projects to work with         governance to specify a custom representation."
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same xApp on a remote chain"
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "migrate(address)": {
        "notice": "Migrate all tokens in a previous representation to the latest         custom representation. This works by looking up local mappings         and then burning old tokens and minting new tokens."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "send(address,uint256,uint32,bytes32,bool)": {
        "notice": "Send tokens to a recipient on a remote chain"
      },
      "sendToHook(address,uint256,uint32,bytes32,bytes)": {
        "notice": "Send tokens to a hook on the remote chain"
      },
      "setXAppConnectionManager(address)": {
        "notice": "Modify the contract the xApp uses to validate Replica contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 36166,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 36168,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 36170,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 36424,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5800,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "xAppConnectionManager",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IConnectorManager)34619"
      },
      {
        "astId": 5804,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5680,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "remotes",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 5684,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 39165,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "tokenRegistry",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ITokenRegistry)17907"
      },
      {
        "astId": 39169,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "liquidityProvider",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 39173,
        "contract": "contracts/test/BridgeRouter.sol:BridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnectorManager)34619": {
        "encoding": "inplace",
        "label": "contract IConnectorManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenRegistry)17907": {
        "encoding": "inplace",
        "label": "contract ITokenRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}