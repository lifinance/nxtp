/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  NomadFacet,
  NomadFacetInterface,
} from "../../../../../contracts/core/connext/facets/NomadFacet";

const _abi = [
  {
    inputs: [],
    name: "BaseConnextFacet__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyBridgeRouter_notBridgeRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__whenNotPaused_paused",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_alreadyReconciled",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_noPortalRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_notConnext",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__setBridgeRouter_invalidBridge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "BridgeRouterUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "originDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "routers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Reconciled",
    type: "event",
  },
  {
    inputs: [],
    name: "bridgeRouter",
    outputs: [
      {
        internalType: "contract IBridgeRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "_tokenDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_tokenAddress",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_localToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    name: "onReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridgeRouter",
        type: "address",
      },
    ],
    name: "setBridgeRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063048494fe1461004657806341af5b521461005b5780636df420071461007a575b600080fd5b6100596100543660046105e3565b61008d565b005b601354604080516001600160a01b039092168252519081900360200190f35b6100596100883660046106b8565b6103cf565b6013546001600160a01b031633146100b8576040516376b55ce560e11b815260040160405180910390fd5b8515806100da575063ffffffff87166000908152601560205260409020548614155b156100f85760405163293e406f60e01b815260040160405180910390fd5b60008180602001905181019061010e9190610784565b9050600061012c8260000151858460200151898b87604001516104be565b6000818152600b602052604090205490915060ff161561015f57604051630b7907a560e11b815260040160405180910390fd5b6000818152600b60209081526040808320805460ff19166001179055600c8252808320805482518185028101850190935280835291929091908301828280156101d157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101b3575b5050506000858152602860209081526040808320546027909252822054949550909361020093509091506108fe565b82519091508115801590610215575080600114155b1561023357604051636c32bf4760e11b815260040160405180910390fd5b8015610379576000610245828961092c565b905060005b610255600184610940565b8110156102dd57816000600d01600087848151811061027657610276610957565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102d091906108fe565b909155505060010161024a565b5060006102ea838a61096d565b6102f490836108fe565b905080600d600087610307600188610940565b8151811061031757610317610957565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461037191906108fe565b909155505050505b837f0e5f1128fa87ef75539a5e012b42695000db91072e7500fb2723ccbb37d0803c866000015160400151858b8b336040516103b9959493929190610981565b60405180910390a2505050505050505050505050565b336104017fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b031614610428576040516314e74a2560e21b815260040160405180910390fd5b6013546001600160a01b03908116908216810361045857604051632441878f60e11b815260040160405180910390fd5b601380546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915233908201527f9beaae476d204e448e87faaeb2d2f4cea9049c7f62c3669c9e1ed81cd7d4cdb19060600160405180910390a15050565b600084878386868a6040516020016104db96959493929190610a2b565b6040516020818303038152906040528051906020012090509695505050505050565b63ffffffff8116811461050f57600080fd5b50565b6001600160a01b038116811461050f57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561056057610560610527565b60405290565b604051610180810167ffffffffffffffff8111828210171561056057610560610527565b604051601f8201601f1916810167ffffffffffffffff811182821017156105b3576105b3610527565b604052919050565b600067ffffffffffffffff8211156105d5576105d5610527565b50601f01601f191660200190565b600080600080600080600060e0888a0312156105fe57600080fd5b8735610609816104fd565b9650602088013595506040880135610620816104fd565b945060608801359350608088013561063781610512565b925060a0880135915060c088013567ffffffffffffffff81111561065a57600080fd5b8801601f81018a1361066b57600080fd5b803561067e610679826105bb565b61058a565b8181528b602083850101111561069357600080fd5b8160208401602083013760006020838301015280935050505092959891949750929550565b6000602082840312156106ca57600080fd5b81356106d581610512565b9392505050565b80516106e781610512565b919050565b60005b838110156107075781810151838201526020016106ef565b83811115610716576000848401525b50505050565b600082601f83011261072d57600080fd5b815161073b610679826105bb565b81815284602083860101111561075057600080fd5b6107618260208301602087016106ec565b949350505050565b80516106e7816104fd565b805180151581146106e757600080fd5b60006020828403121561079657600080fd5b815167ffffffffffffffff808211156107ae57600080fd5b90830190606082860312156107c257600080fd5b6107ca61053d565b8251828111156107d957600080fd5b830161018081880312156107ec57600080fd5b6107f4610566565b6107fd826106dc565b815260208201518481111561081157600080fd5b61081d8982850161071c565b60208301525061082f60408301610769565b604082015261084060608301610769565b6060820152610851608083016106dc565b608082015261086260a083016106dc565b60a082015261087360c08301610774565b60c082015261088460e08301610774565b60e082015261010093506108998483016106dc565b93810193909352610120818101519084015261014080820151908401526101609081015181840152918152602083810151908201526108da604084016106dc565b604082015295945050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610911576109116108e8565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261093b5761093b610916565b500490565b600082821015610952576109526108e8565b500390565b634e487b7160e01b600052603260045260246000fd5b60008261097c5761097c610916565b500690565b600060a0820163ffffffff88168352602060a08185015281885180845260c086019150828a01935060005b818110156109d15784516001600160a01b0316835293830193918301916001016109ac565b50506001600160a01b0397881660408601526060850196909652505050921660809092019190915292915050565b60008151808452610a178160208601602086016106ec565b601f01601f19169290920160200192915050565b86815260c06020820152610a4b60c0820187516001600160a01b03169052565b600060208701516101808060e0850152610a696102408501836109ff565b91506040890151610100610a848187018363ffffffff169052565b60608b01519150610120610a9f8188018463ffffffff169052565b60808c01519250610140610abd818901856001600160a01b03169052565b60a08d01519350610160610adb818a01866001600160a01b03169052565b60c08e015115159589019590955260e08d015115156101a0890152918c01516001600160a01b039081166101c0890152908c01516101e0880152908b0151610200870152919099015161022085015296909616604083015250606081019390935263ffffffff91909116608083015260a0909101529291505056fea2646970667358221220993b7c421ca183194241d99e79e55161223401c52dc7213747835a0734d617ca64736f6c634300080f0033";

type NomadFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NomadFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NomadFacet__factory extends ContractFactory {
  constructor(...args: NomadFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NomadFacet> {
    return super.deploy(overrides || {}) as Promise<NomadFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NomadFacet {
    return super.attach(address) as NomadFacet;
  }
  override connect(signer: Signer): NomadFacet__factory {
    return super.connect(signer) as NomadFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NomadFacetInterface {
    return new utils.Interface(_abi) as NomadFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NomadFacet {
    return new Contract(address, _abi, signerOrProvider) as NomadFacet;
  }
}
