{
  "address": "0x885DE7121e515673B31b6494c54879ddD198eADb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mirrorProcessGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_processGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveGas",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_checkPointManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "current",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "previous",
          "type": "bytes32"
        }
      ],
      "name": "AggregateRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "Dispatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Process",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROCESS_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "addSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipientAddress",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_messageBody",
          "type": "bytes"
        }
      ],
      "name": "dispatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "home",
      "outputs": [
        {
          "internalType": "contract Connector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_potentialReplica",
          "type": "address"
        }
      ],
      "name": "isReplica",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "enum Connector.MessageStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorProcessGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outboundRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[32]",
          "name": "_proof",
          "type": "bytes32[32]"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "proveAndProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "provenRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "removeSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedSenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x587cbc26a8d95255a08bf121edd20b3f2f7bf1251e5975fa2b64e95f55203126",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x885DE7121e515673B31b6494c54879ddD198eADb",
    "transactionIndex": 102,
    "gasUsed": "3684099",
    "logsBloom": "0x
    "blockHash": "0xfd8df9af1e7d9637ab43a8f0d75e5e4da0fbef11ce95d93aa55636ce3829aed6",
    "transactionHash": "0x587cbc26a8d95255a08bf121edd20b3f2f7bf1251e5975fa2b64e95f55203126",
    "logs": [
      {
        "transactionIndex": 102,
        "blockNumber": 7504542,
        "transactionHash": "0x587cbc26a8d95255a08bf121edd20b3f2f7bf1251e5975fa2b64e95f55203126",
        "address": "0x885DE7121e515673B31b6494c54879ddD198eADb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 252,
        "blockHash": "0xfd8df9af1e7d9637ab43a8f0d75e5e4da0fbef11ce95d93aa55636ce3829aed6"
      }
    ],
    "blockNumber": 7504542,
    "cumulativeGasUsed": "20885988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1735353714",
    "9991",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x65815676Ef7419C6F79024C2322ca224f1C84d8f",
    "0x0000000000000000000000000000000000000000",
    "850000",
    "850000",
    "15000",
    "0x2890bA17EfE978480615e330ecB65333b880928e"
  ],
  "numDeployments": 1,
  "solcInputHash": "139f6a212a299a89eb3a6a1d185e8514",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mirrorProcessGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_processGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_checkPointManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"previous\",\"type\":\"bytes32\"}],\"name\":\"AggregateRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Dispatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Process\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROCESS_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"addSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_messageBody\",\"type\":\"bytes\"}],\"name\":\"dispatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"home\",\"outputs\":[{\"internalType\":\"contract Connector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialReplica\",\"type\":\"address\"}],\"name\":\"isReplica\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"enum Connector.MessageStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorProcessGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboundRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_proof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"proveAndProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"provenRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"removeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSender(address)\":{\"details\":\"Only whitelisted routers can call `dispatch`\"},\"dispatch(uint32,bytes32,bytes)\":{\"details\":\"The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \\\"hub\\\"), it will be combined into a single aggregate root by RootManager (along with outbound roots from other chains). This aggregate root will be redistributed to all destination chains.\"},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"details\":\"Intended to be called by the relayer at specific intervals during runtime.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"removeSender(address)\":{\"details\":\"Only whitelisted routers can call `dispatch`\"},\"send()\":{\"details\":\"At runtime, this method should be called at specific time intervals.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addSender(address)\":{\"notice\":\"Adds a sender to the whitelist\"},\"aggregateRoot()\":{\"notice\":\"This tracks the root of the tree containing outbound roots from all other supported domains\"},\"count()\":{\"notice\":\"Returns the number of inserted leaves in the tree (current index)\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"dispatch(uint32,bytes32,bytes)\":{\"notice\":\"This function adds transfers to the outbound transfer merkle tree.\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"mirrorDomain()\":{\"notice\":\"Domain of mirror connector.\"},\"mirrorProcessGas()\":{\"notice\":\"Gas costs forwarded to the `processMessage` call on the mirror domain\"},\"outboundRoot()\":{\"notice\":\"This tracks the root of all transfers with the origin domain as this domain (i.e. all outbound transfers)\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"notice\":\"Must be able to call the `handle` function on the BridgeRouter contract. This is called on the destination domain to handle incoming messages.\"},\"provenRoots(bytes32)\":{\"notice\":\"This tracks whether the root has been proven to exist within the given aggregate root\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"removeSender(address)\":{\"notice\":\"Removes a sender from the whitelist\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"root()\":{\"notice\":\"Calculates and returns tree's current root\"},\"send()\":{\"notice\":\"This is called by relayers to trigger passing of current root to mainnet root manager.\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/messaging/connectors/PolygonConnector.sol\":\"PolygonL1Connector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IBridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IBridgeRouter\\n * @notice Contains the interface used by Connext contracts into Nomad's\\n * BridgeRouter. The BridgeRouter is responsible for:\\n * - formatting and dispatching outbound nomad messages\\n * - custodying canonical and minting/burning local tokens\\n * - formatting and handling inbound nomad messages\\n */\\ninterface IBridgeRouter {\\n  /**\\n   * @notice Send tokens to a recipient on a remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _recipient The recipient address\\n   */\\n  function send(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bool /* _enableFast deprecated field, left argument for backwards compatibility */\\n  ) external;\\n\\n  /**\\n   * @notice Send tokens to a hook on the remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _remoteHook The hook contract on the remote chain\\n   * @param _extraData Extra data that will be passed to the hook for\\n   *        execution\\n   */\\n  function sendToHook(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _remoteHook,\\n    bytes calldata _extraData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x3dbbfaa54b28f4e8c00a3441db5fcdd16502292e0dc770dd34963357d0426092\",\"license\":\"UNLICENSED\"},\"contracts/core/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {MerkleLib} from \\\"../../../nomad-core/libs/Merkle.sol\\\";\\nimport {MerkleTreeManager} from \\\"../../../nomad-core/contracts/Merkle.sol\\\";\\nimport {Message} from \\\"../../../nomad-core/libs/Message.sol\\\";\\nimport {TypedMemView} from \\\"../../../nomad-core/libs/TypedMemView.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IBridgeRouter} from \\\"../../connext/interfaces/IBridgeRouter.sol\\\";\\n\\nimport {ConnectorManager} from \\\"./ConnectorManager.sol\\\";\\n\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n// FIXME: This is an extremely rough contract designed to be an early PoC. Check every line before prod!\\n// TODO for Eth L1, we should write an AMB aggregator/router contract\\n\\n/**\\n * @notice This contract holds all the logic for managing outbound roots and aggregate roots. It will handle\\n * all outbound messages by adding the transfer to the `outboundRoot`, and store the aggregate root for proofs.\\n *\\n * The implementer contract - which should adhere to the naming convention <Domain><L1|L2>Connector - will\\n * override virtual methods in this abstract contract to interface with a domain-specific AMB.\\n * @dev Optimization: combine with the connector contract\\n */\\nabstract contract Connector is ProposedOwnable, MerkleTreeManager, ConnectorManager, IConnector {\\n  // ============ Libraries ============\\n  using MerkleLib for MerkleLib.Tree;\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using Message for bytes29;\\n\\n  // ============ Events ============\\n  event SenderAdded(address sender);\\n\\n  event SenderRemoved(address sender);\\n\\n  event AggregateRootUpdated(bytes32 current, bytes32 previous);\\n\\n  event Dispatch(bytes32 leaf, uint256 index, bytes32 root, bytes message);\\n\\n  event Process(bytes32 leaf, bool success, bytes returnData);\\n\\n  event MessageSent(bytes data, address caller);\\n\\n  event MessageProcessed(bytes data, address caller);\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  // ============ Structs ============\\n  // Status of Message:\\n  //   0 - None - message has not been proven or processed\\n  //   1 - Proven - message inclusion proof has been validated\\n  //   2 - Processed - message has been dispatched to recipient\\n  enum MessageStatus {\\n    None,\\n    Proven,\\n    Processed\\n  }\\n\\n  // ============ Public storage ============\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  /**\\n   * @notice Domain of mirror connector.\\n   * @dev Immutable, as the domain should be known at deployment time.\\n   */\\n  uint32 public immutable mirrorDomain;\\n\\n  /**\\n   * @notice Gas costs forwarded to the `processMessage` call on the mirror domain\\n   */\\n  uint256 public mirrorProcessGas;\\n\\n  /**\\n   * @notice This tracks the root of the tree containing outbound roots from all other supported\\n   * domains\\n   * @dev This root is the root of the tree that is aggregated on mainnet (composed of all the roots\\n   * of previous trees)\\n   */\\n  bytes32 public aggregateRoot;\\n\\n  /**\\n   * @notice This tracks the root of all transfers with the origin domain as this domain (i.e.\\n   * all outbound transfers)\\n   */\\n  bytes32 public outboundRoot;\\n\\n  /**\\n   * @notice This tracks whether the root has been proven to exist within the given aggregate root\\n   * @dev Tracking this is an optimization so you dont have to prove inclusion of the same constituent\\n   * root many times\\n   */\\n  mapping(bytes32 => bool) public provenRoots;\\n\\n  /**\\n   * @dev This is used for the `onlyWhitelistedSender` modifier, which gates who\\n   * can send messages using `dispatch`\\n   */\\n  mapping(address => bool) public whitelistedSenders;\\n\\n  // Minimum gas for message processing\\n  uint256 public immutable PROCESS_GAS;\\n\\n  // Reserved gas (to ensure tx completes in case message processing runs out)\\n  uint256 public immutable RESERVE_GAS;\\n\\n  // domain => next available nonce for the domain\\n  mapping(uint32 => uint32) public nonces;\\n\\n  // Mapping of message leaves to MessageStatus\\n  mapping(bytes32 => MessageStatus) public messages;\\n\\n  // ============ Modifiers ============\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManagcer\\\");\\n    _;\\n  }\\n\\n  modifier onlyWhitelistedSender() {\\n    require(whitelistedSenders[msg.sender], \\\"!whitelisted\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new Connector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The domain the corresponding connector lives on\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the corresponding connector on the mirror domain\\n   * @param _mirrorProcessGas The gas costs to call `.processMessage` on the mirror connector\\n   * @param _processGas The gas costs used in `handle` to ensure meaningful state changes can occur (minimum gas needed\\n   * to handle transaction)\\n   * @param _reserveGas The gas costs reserved when `handle` is called to ensure failures are handled\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorProcessGas,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  ) ProposedOwnable() ConnectorManager(_domain) {\\n    // Sanity checks.\\n    require(_domain > 0, \\\"!domain\\\");\\n    // require(_amb != address(0), \\\"!amb\\\"); // May be address(0) if on mainnet\\n    require(_rootManager != address(0), \\\"!rootManager\\\");\\n\\n    _setOwner(msg.sender);\\n\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n\\n    mirrorDomain = _mirrorDomain;\\n    mirrorConnector = _mirrorConnector;\\n    mirrorProcessGas = _mirrorProcessGas;\\n\\n    // TODO: constants for these min values\\n    require(_processGas >= 850_000, \\\"!process gas\\\");\\n    require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\n    PROCESS_GAS = _processGas;\\n    RESERVE_GAS = _reserveGas;\\n  }\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n\\n  /**\\n   * @notice Adds a sender to the whitelist\\n   * @dev Only whitelisted routers can call `dispatch`\\n   */\\n  function addSender(address _sender) public onlyOwner {\\n    whitelistedSenders[_sender] = true;\\n    emit SenderAdded(_sender);\\n  }\\n\\n  /**\\n   * @notice Removes a sender from the whitelist\\n   * @dev Only whitelisted routers can call `dispatch`\\n   */\\n  function removeSender(address _sender) public onlyOwner {\\n    whitelistedSenders[_sender] = false;\\n    emit SenderRemoved(_sender);\\n  }\\n\\n  // ============ Public fns ============\\n  function sendMessage(bytes memory _data) external {\\n    _sendMessage(_data);\\n    emit MessageSent(_data, msg.sender);\\n  }\\n\\n  function processMessage(bytes memory _data) external {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  /**\\n   * @notice This function adds transfers to the outbound transfer merkle tree.\\n   * @dev The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \\\"hub\\\"),\\n   * it will be combined into a single aggregate root by RootManager (along with outbound roots from other\\n   * chains). This aggregate root will be redistributed to all destination chains.\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external onlyWhitelistedSender {\\n    // get the next nonce for the destination domain, then increment it\\n    uint32 _nonce = nonces[_destinationDomain];\\n    nonces[_destinationDomain] = _nonce + 1;\\n    // format the message into packed bytes\\n    bytes memory _message = Message.formatMessage(\\n      DOMAIN,\\n      bytes32(uint256(uint160(msg.sender))), // TODO necessary?\\n      _nonce,\\n      _destinationDomain,\\n      _recipientAddress,\\n      _messageBody\\n    );\\n    // insert the hashed message into the Merkle tree\\n    bytes32 _messageHash = keccak256(_message);\\n    tree.insert(_messageHash);\\n    // enqueue the new Merkle root after inserting the message\\n    outboundRoot = root();\\n    // Emit Dispatch event with message information\\n    // note: leafIndex is count() - 1 since new leaf has already been inserted\\n    emit Dispatch(_messageHash, count() - 1, outboundRoot, _message);\\n  }\\n\\n  /**\\n   * @notice Must be able to call the `handle` function on the BridgeRouter contract. This is called\\n   * on the destination domain to handle incoming messages.\\n   * @dev Intended to be called by the relayer at specific intervals during runtime.\\n   */\\n  function proveAndProcess(\\n    bytes memory _message,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) external {\\n    // 1. must prove existence of the given outbound root from destination domain\\n    // 2. must prove the existence of the given message in the destination\\n    // domain outbound root\\n    require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\n    // FIXME: implement proofs above before processing the message\\n    process(_message);\\n  }\\n\\n  // ============ Virtual fns ============\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   */\\n  function _sendMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private fns ============\\n  /**\\n   * @notice This is called by relayers to trigger passing of current root to mainnet root manager.\\n   * @dev At runtime, this method should be called at specific time intervals.\\n   */\\n  function send() external {\\n    _sendMessage(abi.encodePacked(outboundRoot));\\n  }\\n\\n  /**\\n   * @notice This is either called by the Connector (AKA `this`) on the spoke (L2) chain after retrieving\\n   * latest `aggregateRoot` from the AMB (sourced from mainnet) OR called by the AMB directly.\\n   * @dev Must check the msg.sender on the origin chain to ensure only the root manager is passing\\n   * these roots.\\n   */\\n  function update(bytes32 _newRoot) internal {\\n    require(_verifySender(mirrorConnector), \\\"!sender\\\");\\n    emit AggregateRootUpdated(_newRoot, aggregateRoot);\\n    aggregateRoot = _newRoot;\\n  }\\n\\n  /**\\n   * @notice Attempts to prove the validity of message given its leaf, the\\n   * merkle proof of inclusion for the leaf, and the index of the leaf.\\n   * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n   * already proven or processed)\\n   * @dev For convenience, we allow proving against any previous root.\\n   * This means that witnesses never need to be updated for the new root\\n   * @param _leaf Leaf of message to prove\\n   * @param _proof Merkle proof of inclusion for leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   * @return Returns true if proof was valid and `prove` call succeeded\\n   **/\\n  function prove(\\n    bytes32 _leaf,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) internal returns (bool) {\\n    // FIXME: actually implement this later\\n    // ensure that message has not been proven or processed\\n    require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\n    // // calculate the expected root based on the proof\\n    // bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n    // // if the root is valid, change status to Proven\\n    // if (acceptableRoot(_calculatedRoot)) {\\n    //   messages[_leaf] = MessageStatus.Proven;\\n    //   return true;\\n    // }\\n    // return false;\\n\\n    messages[_leaf] = MessageStatus.Proven;\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Given formatted message, attempts to dispatch\\n   * message payload to end recipient.\\n   * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n   * Reverts if formatted message's destination domain is not the Replica's domain,\\n   * if message has not been proven,\\n   * or if not enough gas is provided for the dispatch transaction.\\n   * @param _message Formatted message\\n   * @return _success TRUE iff dispatch transaction succeeded\\n   */\\n  // TODO Reentrancy\\n  function process(bytes memory _message) internal returns (bool _success) {\\n    bytes29 _m = _message.ref(0);\\n    // ensure message was meant for this domain\\n    require(_m.destination() == DOMAIN, \\\"!destination\\\");\\n    // ensure message has been proven\\n    bytes32 _messageHash = _m.keccak();\\n    require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\n    // check re-entrancy guard\\n    // require(entered == 1, \\\"!reentrant\\\");\\n    // entered = 0;\\n    // update message status as processed\\n    messages[_messageHash] = MessageStatus.Processed;\\n    // A call running out of gas TYPICALLY errors the whole tx. We want to\\n    // a) ensure the call has a sufficient amount of gas to make a\\n    //    meaningful state change.\\n    // b) ensure that if the subcall runs out of gas, that the tx as a whole\\n    //    does not revert (i.e. we still mark the message processed)\\n    // To do this, we require that we have enough gas to process\\n    // and still return. We then delegate only the minimum processing gas.\\n    require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\n    // get the message recipient\\n    address _recipient = _m.recipientAddress();\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    uint256 _maxCopy = 256;\\n    uint256 _gas = PROCESS_GAS;\\n    // allocate memory for returndata\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    bytes memory _calldata = abi.encodeWithSignature(\\n      \\\"handle(uint32,uint32,bytes32,bytes)\\\",\\n      _m.origin(),\\n      _m.nonce(),\\n      _m.sender(),\\n      _m.body().clone()\\n    );\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _recipient, // recipient\\n        0, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    // emit process results\\n    emit Process(_messageHash, _success, _returnData);\\n    // reset re-entrancy guard\\n    // entered = 1;\\n  }\\n}\\n\",\"keccak256\":\"0xf03a10bbf2ead73c20db54f2aada8199fe61f9d3646378f42d4eac94e3efc885\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/messaging/connectors/ConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\n\\n/**\\n * @notice This is an interface to allow the `Messaging` contract to be used\\n * as a `XappConnectionManager` on all router contracts.\\n *\\n * Each nomad router contract has a `XappConnectionClient`, which references a\\n * XappConnectionManager to get the `Home` and approved `Replica` instances. At\\n * any point the client can replace the manager it's pointing to, thereby changing\\n * the underlying messaging connection.\\n */\\ncontract ConnectorManager {\\n  uint32 public immutable domain;\\n\\n  constructor(uint32 _domain) {\\n    require(_domain != 0, \\\"!domain\\\");\\n    domain = _domain;\\n  }\\n\\n  function home() public view returns (Connector) {\\n    return Connector(address(this));\\n  }\\n\\n  function isReplica(address _potentialReplica) public view returns (bool) {\\n    return _potentialReplica == address(this);\\n  }\\n\\n  function localDomain() public view returns (uint32) {\\n    return domain;\\n  }\\n}\\n\",\"keccak256\":\"0x9bcc707e105e9ad23651a4400115aac127862d91ed38eab3fdb9f92adb7a22ea\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/messaging/connectors/PolygonConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IRootManager} from \\\"../interfaces/IRootManager.sol\\\";\\nimport {Connector} from \\\"./Connector.sol\\\";\\nimport {FxBaseRootTunnel} from \\\"../helpers/polygon/tunnel/FxBaseRootTunnel.sol\\\";\\nimport {FxBaseChildTunnel} from \\\"../helpers/polygon/tunnel/FxBaseChildTunnel.sol\\\";\\n\\n// address constant MUMBAI_FX_CHILD = 0xCf73231F28B7331BBe3124B907840A94851f9f11;\\n// address constant GOERLI_CHECKPOINT_MANAGER = 0x2890bA17EfE978480615e330ecB65333b880928e;\\n// address constant GOERLI_FX_ROOT = 0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA;\\n\\n// address constant MAINNET_FX_CHILD = 0x8397259c983751DAf40400790063935a11afa28a;\\n// address constant MAINNET_CHECKPOINT_MANAGER = 0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287;\\n// address constant MAINNET_FX_ROOT = 0xfe5e5D361b2ad62c541bAb87C45a0B9B018389a2;\\n\\ncontract PolygonL2Connector is Connector, FxBaseChildTunnel {\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorProcessGas,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  )\\n    Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorProcessGas, _processGas, _reserveGas)\\n    FxBaseChildTunnel(_amb)\\n  {}\\n\\n  // ============ Private fns ============\\n\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    require(msg.sender == AMB, \\\"!bridge\\\");\\n    return true;\\n  }\\n\\n  function _sendMessage(bytes memory _data) internal override {\\n    _sendMessageToRoot(_data);\\n  }\\n\\n  function _processMessageFromRoot(\\n    uint256, /* stateId */\\n    address sender,\\n    bytes memory data\\n  ) internal override validateSender(sender) {\\n    require(msg.sender == AMB, \\\"!bridge\\\");\\n    // get the data (should be the aggregate root)\\n    require(data.length == 32, \\\"!length\\\");\\n    // update the aggregate root on the domain\\n    update(bytes32(data));\\n  }\\n\\n  function _processMessage(bytes memory _data) internal override {}\\n}\\n\\ncontract PolygonL1Connector is Connector, FxBaseRootTunnel {\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorProcessGas,\\n    uint256 _processGas,\\n    uint256 _reserveGas,\\n    address _checkPointManager\\n  )\\n    Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorProcessGas, _processGas, _reserveGas)\\n    FxBaseRootTunnel(_checkPointManager, _amb)\\n  {\\n    setFxChildTunnel(_mirrorConnector);\\n  }\\n\\n  // ============ Private fns ============\\n\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    return true;\\n  }\\n\\n  function _sendMessage(bytes memory _data) internal override {\\n    _sendMessageToChild(_data);\\n  }\\n\\n  function _processMessageFromChild(bytes memory message) internal override {\\n    // get the data (should be the aggregate root)\\n    require(message.length == 32, \\\"!length\\\");\\n    // update the root on the root manager\\n    IRootManager(ROOT_MANAGER).setOutboundRoot(mirrorDomain, bytes32(message));\\n\\n    emit MessageProcessed(message, msg.sender);\\n  }\\n\\n  function _processMessage(bytes memory _data) internal override {}\\n}\\n\",\"keccak256\":\"0xd960c0af9cb0b12cca8c88831ec0bdcea0990689130ab9b77370ff8e2891c071\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/messaging/helpers/polygon/lib/ExitPayloadReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/ExitPayloadReader.sol\\npragma solidity 0.8.15;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct ExitPayload {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  struct Receipt {\\n    RLPReader.RLPItem[] data;\\n    bytes raw;\\n    uint256 logIndex;\\n  }\\n\\n  struct Log {\\n    RLPReader.RLPItem data;\\n    RLPReader.RLPItem[] list;\\n  }\\n\\n  struct LogTopics {\\n    RLPReader.RLPItem[] data;\\n  }\\n\\n  // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n\\n  function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\n    RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\n\\n    return ExitPayload(payloadData);\\n  }\\n\\n  function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[0].toUint();\\n  }\\n\\n  function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[1].toBytes();\\n  }\\n\\n  function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[2].toUint();\\n  }\\n\\n  function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[3].toUint();\\n  }\\n\\n  function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[4].toUint());\\n  }\\n\\n  function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n    return bytes32(payload.data[5].toUint());\\n  }\\n\\n  function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\n    receipt.raw = payload.data[6].toBytes();\\n    RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n    if (receiptItem.isList()) {\\n      // legacy tx\\n      receipt.data = receiptItem.toList();\\n    } else {\\n      // pop first byte before parsting receipt\\n      bytes memory typedBytes = receipt.raw;\\n      bytes memory result = new bytes(typedBytes.length - 1);\\n      uint256 srcPtr;\\n      uint256 destPtr;\\n      assembly {\\n        srcPtr := add(33, typedBytes)\\n        destPtr := add(0x20, result)\\n      }\\n\\n      copy(srcPtr, destPtr, result.length);\\n      receipt.data = result.toRlpItem().toList();\\n    }\\n\\n    receipt.logIndex = getReceiptLogIndex(payload);\\n    return receipt;\\n  }\\n\\n  function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[7].toBytes();\\n  }\\n\\n  function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\n    return payload.data[8].toBytes();\\n  }\\n\\n  function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[8].toUint();\\n  }\\n\\n  function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\n    return payload.data[9].toUint();\\n  }\\n\\n  // Receipt methods\\n  function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\n    return receipt.raw;\\n  }\\n\\n  function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\n    RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n    return Log(logData, logData.toList());\\n  }\\n\\n  // Log methods\\n  function getEmitter(Log memory log) internal pure returns (address) {\\n    return RLPReader.toAddress(log.list[0]);\\n  }\\n\\n  function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\n    return LogTopics(log.list[1].toList());\\n  }\\n\\n  function getData(Log memory log) internal pure returns (bytes memory) {\\n    return log.list[2].toBytes();\\n  }\\n\\n  function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\n    return log.data.toRlpBytes();\\n  }\\n\\n  // LogTopics methods\\n  function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\n    return topics.data[index];\\n  }\\n}\\n\",\"keccak256\":\"0x73dbf9de687821451aad158f684526d312138b3e837d9726f9db481c0cd401ca\",\"license\":\"MIT\"},\"contracts/core/messaging/helpers/polygon/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/Merkle.sol\\npragma solidity 0.8.15;\\n\\nlibrary Merkle {\\n  function checkMembership(\\n    bytes32 leaf,\\n    uint256 index,\\n    bytes32 rootHash,\\n    bytes memory proof\\n  ) internal pure returns (bool) {\\n    require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n    uint256 proofHeight = proof.length / 32;\\n    // Proof of size n means, height of the tree is n+1.\\n    // In a tree of height n+1, max #leafs possible is 2 ^ n\\n    require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n    bytes32 proofElement;\\n    bytes32 computedHash = leaf;\\n    for (uint256 i = 32; i <= proof.length; i += 32) {\\n      assembly {\\n        proofElement := mload(add(proof, i))\\n      }\\n\\n      if (index % 2 == 0) {\\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n      } else {\\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n      }\\n\\n      index = index / 2;\\n    }\\n    return computedHash == rootHash;\\n  }\\n}\\n\",\"keccak256\":\"0x78178519aaef72cfad95b05b25f8e36df17d0751fcfd45a6f8987b53b7de953b\",\"license\":\"MIT\"},\"contracts/core/messaging/helpers/polygon/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/MerklePatriciaProof.sol\\npragma solidity 0.8.15;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n  /*\\n   * @dev Verifies a merkle patricia proof.\\n   * @param value The terminating value in the trie.\\n   * @param encodedPath The path in the trie leading to value.\\n   * @param rlpParentNodes The rlp encoded stack of nodes.\\n   * @param root The root hash of the trie.\\n   * @return The boolean validity of the proof.\\n   */\\n  function verify(\\n    bytes memory value,\\n    bytes memory encodedPath,\\n    bytes memory rlpParentNodes,\\n    bytes32 root\\n  ) internal pure returns (bool) {\\n    RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n    RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n    bytes memory currentNode;\\n    RLPReader.RLPItem[] memory currentNodeList;\\n\\n    bytes32 nodeKey = root;\\n    uint256 pathPtr = 0;\\n\\n    bytes memory path = _getNibbleArray(encodedPath);\\n    if (path.length == 0) {\\n      return false;\\n    }\\n\\n    for (uint256 i = 0; i < parentNodes.length; i++) {\\n      if (pathPtr > path.length) {\\n        return false;\\n      }\\n\\n      currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n      if (nodeKey != keccak256(currentNode)) {\\n        return false;\\n      }\\n      currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n      if (currentNodeList.length == 17) {\\n        if (pathPtr == path.length) {\\n          if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        uint8 nextPathNibble = uint8(path[pathPtr]);\\n        if (nextPathNibble > 16) {\\n          return false;\\n        }\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n        pathPtr += 1;\\n      } else if (currentNodeList.length == 2) {\\n        uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n        if (pathPtr + traversed == path.length) {\\n          //leaf node\\n          if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n\\n        //extension node\\n        if (traversed == 0) {\\n          return false;\\n        }\\n\\n        pathPtr += traversed;\\n        nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n      } else {\\n        return false;\\n      }\\n    }\\n  }\\n\\n  function _nibblesToTraverse(\\n    bytes memory encodedPartialPath,\\n    bytes memory path,\\n    uint256 pathPtr\\n  ) private pure returns (uint256) {\\n    uint256 len = 0;\\n    // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n    // and slicedPath have elements that are each one hex character (1 nibble)\\n    bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n    bytes memory slicedPath = new bytes(partialPath.length);\\n\\n    // pathPtr counts nibbles in path\\n    // partialPath.length is a number of nibbles\\n    for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n      bytes1 pathNibble = path[i];\\n      slicedPath[i - pathPtr] = pathNibble;\\n    }\\n\\n    if (keccak256(partialPath) == keccak256(slicedPath)) {\\n      len = partialPath.length;\\n    } else {\\n      len = 0;\\n    }\\n    return len;\\n  }\\n\\n  // bytes b must be hp encoded\\n  function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n    bytes memory nibbles = \\\"\\\";\\n    if (b.length > 0) {\\n      uint8 offset;\\n      uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n      if (hpNibble == 1 || hpNibble == 3) {\\n        nibbles = new bytes(b.length * 2 - 1);\\n        bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n        nibbles[0] = oddNibble;\\n        offset = 1;\\n      } else {\\n        nibbles = new bytes(b.length * 2 - 2);\\n        offset = 0;\\n      }\\n\\n      for (uint256 i = offset; i < nibbles.length; i++) {\\n        nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n      }\\n    }\\n    return nibbles;\\n  }\\n\\n  function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n    return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n  }\\n}\\n\",\"keccak256\":\"0xf4d03ac800961a432a2474d309313235c8bd39c42a2612a9131bd53e29792df1\",\"license\":\"MIT\"},\"contracts/core/messaging/helpers/polygon/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/lib/RLPReader.sol\\npragma solidity 0.8.15;\\n\\nlibrary RLPReader {\\n  uint8 constant STRING_SHORT_START = 0x80;\\n  uint8 constant STRING_LONG_START = 0xb8;\\n  uint8 constant LIST_SHORT_START = 0xc0;\\n  uint8 constant LIST_LONG_START = 0xf8;\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct RLPItem {\\n    uint256 len;\\n    uint256 memPtr;\\n  }\\n\\n  struct Iterator {\\n    RLPItem item; // Item that's being iterated over.\\n    uint256 nextPtr; // Position of the next item in the list.\\n  }\\n\\n  /*\\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n   * @param self The iterator.\\n   * @return The next element in the iteration.\\n   */\\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n    require(hasNext(self));\\n\\n    uint256 ptr = self.nextPtr;\\n    uint256 itemLength = _itemLength(ptr);\\n    self.nextPtr = ptr + itemLength;\\n\\n    return RLPItem(itemLength, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns true if the iteration has more elements.\\n   * @param self The iterator.\\n   * @return true if the iteration has more elements.\\n   */\\n  function hasNext(Iterator memory self) internal pure returns (bool) {\\n    RLPItem memory item = self.item;\\n    return self.nextPtr < item.memPtr + item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n    uint256 memPtr;\\n    assembly {\\n      memPtr := add(item, 0x20)\\n    }\\n\\n    return RLPItem(item.length, memPtr);\\n  }\\n\\n  /*\\n   * @dev Create an iterator. Reverts if item is not a list.\\n   * @param self The RLP item.\\n   * @return An 'Iterator' over the item.\\n   */\\n  function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n    require(isList(self));\\n\\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n    return Iterator(self, ptr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len - _payloadOffset(item.memPtr);\\n  }\\n\\n  /*\\n   * @param item RLP encoded list in bytes\\n   */\\n  function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n    require(isList(item));\\n\\n    uint256 items = numItems(item);\\n    RLPItem[] memory result = new RLPItem[](items);\\n\\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 dataLen;\\n    for (uint256 i = 0; i < items; i++) {\\n      dataLen = _itemLength(memPtr);\\n      result[i] = RLPItem(dataLen, memPtr);\\n      memPtr = memPtr + dataLen;\\n    }\\n\\n    return result;\\n  }\\n\\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\\n  function isList(RLPItem memory item) internal pure returns (bool) {\\n    if (item.len == 0) return false;\\n\\n    uint8 byte0;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < LIST_SHORT_START) return false;\\n    return true;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of RLP encoded bytes.\\n   */\\n  function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    uint256 ptr = item.memPtr;\\n    uint256 len = item.len;\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(ptr, len)\\n    }\\n    return result;\\n  }\\n\\n  function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 memPtr = item.memPtr + offset;\\n    uint256 len = item.len - offset; // data length\\n    return (memPtr, len);\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of the item payload.\\n   */\\n  function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(memPtr, len)\\n    }\\n    return result;\\n  }\\n\\n  /** RLPItem conversions into data types **/\\n\\n  // @returns raw rlp encoding in bytes\\n  function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    bytes memory result = new bytes(item.len);\\n    if (result.length == 0) return result;\\n\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr, ptr, item.len);\\n    return result;\\n  }\\n\\n  // any non-zero byte is considered true\\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n    require(item.len == 1);\\n    uint256 result;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      result := byte(0, mload(memPtr))\\n    }\\n\\n    return result == 0 ? false : true;\\n  }\\n\\n  function toAddress(RLPItem memory item) internal pure returns (address) {\\n    // 1 byte for the length prefix\\n    require(item.len == 21);\\n\\n    return address(uint160(toUint(item)));\\n  }\\n\\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\\n    require(item.len > 0 && item.len <= 33);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset;\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + offset;\\n    assembly {\\n      result := mload(memPtr)\\n\\n      // shfit to the correct location if neccesary\\n      if lt(len, 32) {\\n        result := div(result, exp(256, sub(32, len)))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // enforces 32 byte length\\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n    // one byte prefix\\n    require(item.len == 33);\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + 1;\\n    assembly {\\n      result := mload(memPtr)\\n    }\\n\\n    return result;\\n  }\\n\\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    require(item.len > 0);\\n\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 len = item.len - offset; // data length\\n    bytes memory result = new bytes(len);\\n\\n    uint256 destPtr;\\n    assembly {\\n      destPtr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr + offset, destPtr, len);\\n    return result;\\n  }\\n\\n  /*\\n   * Private Helpers\\n   */\\n\\n  // @return number of payload items inside an encoded list.\\n  function numItems(RLPItem memory item) private pure returns (uint256) {\\n    if (item.len == 0) return 0;\\n\\n    uint256 count = 0;\\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 endPtr = item.memPtr + item.len;\\n    while (currPtr < endPtr) {\\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n      count++;\\n    }\\n\\n    return count;\\n  }\\n\\n  // @return entire rlp item byte length\\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n    uint256 itemLen;\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) itemLen = 1;\\n    else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n    else if (byte0 < LIST_SHORT_START) {\\n      assembly {\\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n        memPtr := add(memPtr, 1) // skip over the first byte\\n        /* 32 byte word size */\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    } else if (byte0 < LIST_LONG_START) {\\n      itemLen = byte0 - LIST_SHORT_START + 1;\\n    } else {\\n      assembly {\\n        let byteLen := sub(byte0, 0xf7)\\n        memPtr := add(memPtr, 1)\\n\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    }\\n\\n    return itemLen;\\n  }\\n\\n  // @return number of bytes until the data\\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) return 0;\\n    else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n    else if (byte0 < LIST_SHORT_START)\\n      // being explicit\\n      return byte0 - (STRING_LONG_START - 1) + 1;\\n    else return byte0 - (LIST_LONG_START - 1) + 1;\\n  }\\n\\n  /*\\n   * @param src Pointer to source\\n   * @param dest Pointer to destination\\n   * @param len Amount of memory to copy from the source\\n   */\\n  function copy(\\n    uint256 src,\\n    uint256 dest,\\n    uint256 len\\n  ) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len == 0) return;\\n\\n    // left over bytes. Mask is used to remove unwanted bytes from the word\\n    uint256 mask = 256**(WORD_SIZE - len) - 1;\\n\\n    assembly {\\n      let srcpart := and(mload(src), not(mask)) // zero out src\\n      let destpart := and(mload(dest), mask) // retrieve the bytes\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4c261c0f3670cc6588fdcf2aaf6b173bbdc42cab25d823457f1ec78a2c8ec450\",\"license\":\"MIT\"},\"contracts/core/messaging/helpers/polygon/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseChildTunnel.sol\\npragma solidity 0.8.15;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n  function processMessageFromRoot(\\n    uint256 stateId,\\n    address rootMessageSender,\\n    bytes calldata data\\n  ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n  // MessageTunnel on L1 will get data from this event\\n  event MessageSent(bytes message);\\n\\n  // fx child\\n  address public fxChild;\\n\\n  // fx root tunnel\\n  address public fxRootTunnel;\\n\\n  constructor(address _fxChild) {\\n    fxChild = _fxChild;\\n  }\\n\\n  // Sender must be fxRootTunnel in case of ERC20 tunnel\\n  modifier validateSender(address sender) {\\n    require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n    _;\\n  }\\n\\n  // set fxRootTunnel if not set already\\n  function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n    require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n    fxRootTunnel = _fxRootTunnel;\\n  }\\n\\n  function processMessageFromRoot(\\n    uint256 stateId,\\n    address rootMessageSender,\\n    bytes calldata data\\n  ) external override {\\n    require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n    _processMessageFromRoot(stateId, rootMessageSender, data);\\n  }\\n\\n  /**\\n   * @notice Emit message that can be received on Root Tunnel\\n   * @dev Call the internal function when need to emit message\\n   * @param message bytes message that will be sent to Root Tunnel\\n   * some message examples -\\n   *   abi.encode(tokenId);\\n   *   abi.encode(tokenId, tokenMetadata);\\n   *   abi.encode(messageType, messageData);\\n   */\\n  function _sendMessageToRoot(bytes memory message) internal {\\n    emit MessageSent(message);\\n  }\\n\\n  /**\\n   * @notice Process message received from Root Tunnel\\n   * @dev function needs to be implemented to handle message as per requirement\\n   * This is called by onStateReceive function.\\n   * Since it is called via a system call, any event will not be emitted during its execution.\\n   * @param stateId unique state id\\n   * @param sender root message sender\\n   * @param message bytes message that was sent from Root Tunnel\\n   */\\n  function _processMessageFromRoot(\\n    uint256 stateId,\\n    address sender,\\n    bytes memory message\\n  ) internal virtual;\\n}\\n\",\"keccak256\":\"0xed3c00e6f7215193a0ca2e4c560fc19857407b1399897be7bfaa1ee3af7ebbfe\",\"license\":\"MIT\"},\"contracts/core/messaging/helpers/polygon/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// https://github.com/fx-portal/contracts/blob/main/contracts/tunnel/FxBaseRootTunnel.sol\\npragma solidity 0.8.15;\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\ninterface IFxStateSender {\\n  function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n  struct HeaderBlock {\\n    bytes32 root;\\n    uint256 start;\\n    uint256 end;\\n    uint256 createdAt;\\n    address proposer;\\n  }\\n\\n  /**\\n   * @notice mapping of checkpoint header numbers to block details\\n   * @dev These checkpoints are submited by plasma contracts\\n   */\\n  mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n  using RLPReader for RLPReader.RLPItem;\\n  using Merkle for bytes32;\\n  using ExitPayloadReader for bytes;\\n  using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n  using ExitPayloadReader for ExitPayloadReader.Log;\\n  using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n  using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n  // keccak256(MessageSent(bytes))\\n  bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n  // state sender contract\\n  IFxStateSender public fxRoot;\\n  // root chain manager\\n  ICheckpointManager public checkpointManager;\\n  // child tunnel contract which receives and sends messages\\n  address public fxChildTunnel;\\n\\n  // storage to avoid duplicate exits\\n  mapping(bytes32 => bool) public processedExits;\\n\\n  constructor(address _checkpointManager, address _fxRoot) {\\n    checkpointManager = ICheckpointManager(_checkpointManager);\\n    fxRoot = IFxStateSender(_fxRoot);\\n  }\\n\\n  // set fxChildTunnel if not set already\\n  function setFxChildTunnel(address _fxChildTunnel) public virtual {\\n    require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n    fxChildTunnel = _fxChildTunnel;\\n  }\\n\\n  /**\\n   * @notice Send bytes message to Child Tunnel\\n   * @param message bytes message that will be sent to Child Tunnel\\n   * some message examples -\\n   *   abi.encode(tokenId);\\n   *   abi.encode(tokenId, tokenMetadata);\\n   *   abi.encode(messageType, messageData);\\n   */\\n  function _sendMessageToChild(bytes memory message) internal {\\n    fxRoot.sendMessageToChild(fxChildTunnel, message);\\n  }\\n\\n  function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n    ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n    bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n    uint256 blockNumber = payload.getBlockNumber();\\n    // checking if exit has already been processed\\n    // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n    bytes32 exitHash = keccak256(\\n      abi.encodePacked(\\n        blockNumber,\\n        // first 2 nibbles are dropped while generating nibble array\\n        // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n        // so converting to nibble array and then hashing it\\n        MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n        payload.getReceiptLogIndex()\\n      )\\n    );\\n    require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n    processedExits[exitHash] = true;\\n\\n    ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n    ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n    // check child tunnel\\n    require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n    bytes32 receiptRoot = payload.getReceiptRoot();\\n    // verify receipt inclusion\\n    require(\\n      MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\n      \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n    );\\n\\n    // verify checkpoint inclusion\\n    _checkBlockMembershipInCheckpoint(\\n      blockNumber,\\n      payload.getBlockTime(),\\n      payload.getTxRoot(),\\n      receiptRoot,\\n      payload.getHeaderNumber(),\\n      payload.getBlockProof()\\n    );\\n\\n    ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n    require(\\n      bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n      \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n    );\\n\\n    // received message data\\n    bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n    return message;\\n  }\\n\\n  function _checkBlockMembershipInCheckpoint(\\n    uint256 blockNumber,\\n    uint256 blockTime,\\n    bytes32 txRoot,\\n    bytes32 receiptRoot,\\n    uint256 headerNumber,\\n    bytes memory blockProof\\n  ) private view returns (uint256) {\\n    (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n    require(\\n      keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n        blockNumber - startBlock,\\n        headerRoot,\\n        blockProof\\n      ),\\n      \\\"FxRootTunnel: INVALID_HEADER\\\"\\n    );\\n    return createdAt;\\n  }\\n\\n  /**\\n   * @notice receive message from  L2 to L1, validated by proof\\n   * @dev This function verifies if the transaction actually happened on child chain\\n   *\\n   * @param inputData RLP encoded data of the reference tx containing following list of fields\\n   *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n   *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n   *  2 - blockNumber - Block number containing the reference tx on child chain\\n   *  3 - blockTime - Reference tx block time\\n   *  4 - txRoot - Transactions root of block\\n   *  5 - receiptRoot - Receipts root of block\\n   *  6 - receipt - Receipt of the reference transaction\\n   *  7 - receiptProof - Merkle proof of the reference receipt\\n   *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n   *  9 - receiptLogIndex - Log Index to read from the receipt\\n   */\\n  function receiveMessage(bytes memory inputData) public virtual {\\n    bytes memory message = _validateAndExtractMessage(inputData);\\n    _processMessageFromChild(message);\\n  }\\n\\n  /**\\n   * @notice Process message received from Child Tunnel\\n   * @dev function needs to be implemented to handle message as per requirement\\n   * This is called by onStateReceive function.\\n   * Since it is called via a system call, any event will not be emitted during its execution.\\n   * @param message bytes message that was sent from Child Tunnel\\n   */\\n  function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0x10f602b6ef15e43d5721bbdc6663831cf7ee6e599bf1e0e6fdeca3e5f1fd71b0\",\"license\":\"MIT\"},\"contracts/core/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  function outboundRoot() external view returns (bytes32);\\n\\n  function aggregateRoot() external view returns (bytes32);\\n\\n  function sendMessage(bytes memory _data) external;\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n\\n  /**\\n   * @notice This function should send a message through the AMB by adding it to the merkle root\\n   * stored on that chain.\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external;\\n\\n  /**\\n   * @notice Must be able to call the `handle` function on the BridgeRouter contract. This is called\\n   * on the destination domain to handle incoming messages\\n   */\\n  function proveAndProcess(\\n    bytes memory _message,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) external;\\n\\n  /**\\n   * @notice This is called by relayers to trigger passing of current root to mainnet root manager\\n   * @dev This is called at specific time intervals\\n   */\\n  function send() external;\\n}\\n\",\"keccak256\":\"0xcfa8eb54a2818ed6640f5744a0f092e71fc5bd147b8848ca932910e4646053cd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to spoke domains\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function propagate() external;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on L1 to update the\\n   * latest outbound root\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function setOutboundRoot(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0x4ce8b03ca8b2293c53bd43410ff06b511f6a9ba53a298d3e3f7ea116cecc309c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __GAP;\\n}\\n\",\"keccak256\":\"0xf4c67a5db702cb9775ad3a0ed49bbe137e5a55b4000c507dd6fef3397f3607e3\",\"license\":\"UNLICENSED\"},\"contracts/core/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0xfb763d8c311e5972fd6e7d7334ce10cc3f5dbe8a922308b3c160bfb722109f63\",\"license\":\"MIT\"},\"contracts/nomad-core/contracts/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {MerkleLib} from \\\"../libs/Merkle.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a Merkle tree instance and\\n * exposes view functions for the tree.\\n */\\ncontract MerkleTreeManager {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  MerkleLib.Tree public tree;\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Calculates and returns tree's current root\\n   */\\n  function root() public view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index)\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n}\\n\",\"keccak256\":\"0xfebfe5c9a96d4b36036a922dc1cb4a1272708f7074c06aa08b1a10471c0c5360\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  /**\\n   * @notice Inserts `_node` into merkle tree\\n   * @dev Reverts if tree is full\\n   * @param _node Element to insert into tree\\n   **/\\n  function insert(Tree storage _tree, bytes32 _node) internal {\\n    require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n    _tree.count += 1;\\n    uint256 size = _tree.count;\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      if ((size & 1) == 1) {\\n        _tree.branch[i] = _node;\\n        return;\\n      }\\n      _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n      size /= 2;\\n    }\\n    // As the loop should always end prematurely with the `return` statement,\\n    // this code should be unreachable. We assert `false` just to be safe.\\n    assert(false);\\n  }\\n\\n  /**\\n   * @notice Calculates and returns`_tree`'s current root given array of zero\\n   * hashes\\n   * @param _zeroes Array of zero hashes\\n   * @return _current Calculated root of `_tree`\\n   **/\\n  function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n    internal\\n    view\\n    returns (bytes32 _current)\\n  {\\n    uint256 _index = _tree.count;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _tree.branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculates and returns`_tree`'s current root\\n  function root(Tree storage _tree) internal view returns (bytes32) {\\n    return rootWithCtx(_tree, zeroHashes());\\n  }\\n\\n  /// @notice Returns array of TREE_DEPTH zero hashes\\n  /// @return _zeroes Array of TREE_DEPTH zero hashes\\n  function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\\n    _zeroes[0] = Z_0;\\n    _zeroes[1] = Z_1;\\n    _zeroes[2] = Z_2;\\n    _zeroes[3] = Z_3;\\n    _zeroes[4] = Z_4;\\n    _zeroes[5] = Z_5;\\n    _zeroes[6] = Z_6;\\n    _zeroes[7] = Z_7;\\n    _zeroes[8] = Z_8;\\n    _zeroes[9] = Z_9;\\n    _zeroes[10] = Z_10;\\n    _zeroes[11] = Z_11;\\n    _zeroes[12] = Z_12;\\n    _zeroes[13] = Z_13;\\n    _zeroes[14] = Z_14;\\n    _zeroes[15] = Z_15;\\n    _zeroes[16] = Z_16;\\n    _zeroes[17] = Z_17;\\n    _zeroes[18] = Z_18;\\n    _zeroes[19] = Z_19;\\n    _zeroes[20] = Z_20;\\n    _zeroes[21] = Z_21;\\n    _zeroes[22] = Z_22;\\n    _zeroes[23] = Z_23;\\n    _zeroes[24] = Z_24;\\n    _zeroes[25] = Z_25;\\n    _zeroes[26] = Z_26;\\n    _zeroes[27] = Z_27;\\n    _zeroes[28] = Z_28;\\n    _zeroes[29] = Z_29;\\n    _zeroes[30] = Z_30;\\n    _zeroes[31] = Z_31;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf\\n   * `_item`, a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    _current = _item;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _next));\\n      }\\n    }\\n  }\\n\\n  // keccak256 zero hashes\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x6930854c41562abb58038f736a23324454364e8ff394d86a2d807500d77ee296\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // Number of bytes in formatted message before `body` field\\n  uint256 internal constant PREFIX_LENGTH = 76;\\n\\n  /**\\n   * @notice Returns formatted (packed) message with provided fields\\n   * @param _originDomain Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes of message body\\n   * @return Formatted message\\n   **/\\n  function formatMessage(\\n    uint32 _originDomain,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destinationDomain,\\n    bytes32 _recipient,\\n    bytes memory _messageBody\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(_originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody);\\n  }\\n\\n  /**\\n   * @notice Returns leaf of formatted message with provided fields.\\n   * @param _origin Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce number\\n   * @param _destination Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _body Raw bytes of message body\\n   * @return Leaf (hash) of formatted message\\n   **/\\n  function messageHash(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bytes memory _body\\n  ) internal pure returns (bytes32) {\\n    return keccak256(formatMessage(_origin, _sender, _nonce, _destination, _recipient, _body));\\n  }\\n\\n  /// @notice Returns message's origin field\\n  function origin(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(0, 4));\\n  }\\n\\n  /// @notice Returns message's sender field\\n  function sender(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(4, 32);\\n  }\\n\\n  /// @notice Returns message's nonce field\\n  function nonce(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(36, 4));\\n  }\\n\\n  /// @notice Returns message's destination field\\n  function destination(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(40, 4));\\n  }\\n\\n  /// @notice Returns message's recipient field as bytes32\\n  function recipient(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(44, 32);\\n  }\\n\\n  /// @notice Returns message's recipient field as an address\\n  function recipientAddress(bytes29 _message) internal pure returns (address) {\\n    return TypeCasts.bytes32ToAddress(recipient(_message));\\n  }\\n\\n  /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n  function body(bytes29 _message) internal pure returns (bytes29) {\\n    return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n  }\\n\\n  function leaf(bytes29 _message) internal view returns (bytes32) {\\n    return\\n      messageHash(\\n        origin(_message),\\n        sender(_message),\\n        nonce(_message),\\n        destination(_message),\\n        recipient(_message),\\n        TypedMemView.clone(body(_message))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x3590b97ecefc801807a68f7aa6cb15c27d5bf825a677ffbe70df0bf255d4c86b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// import \\\"@summa-tx/memview-sol/contracts/TypedMemView.sol\\\";\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x101289ff51094ca377befea24799db5eacfc457d5607cd9aa0ebdd4fdcf32d3f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad-core/libs/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.11;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf73058caf94a3b7669529c14edbae82a079c62d84c537c4245de3773a47aacd7\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200443038038062004430833981016040819052620000359162000364565b80878a8a8a8a8a8a8a8a878063ffffffff16600003620000865760405162461bcd60e51b815260206004820152600760248201526610b237b6b0b4b760c91b60448201526064015b60405180910390fd5b63ffffffff9081166080528816620000cb5760405162461bcd60e51b815260206004820152600760248201526610b237b6b0b4b760c91b60448201526064016200007d565b6001600160a01b038516620001125760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064016200007d565b6200011d3362000243565b63ffffffff88811660a0526001600160a01b0387811660c05286811660e05290881661010052602480546001600160a01b0319169186169190911790556025839055620cf850821015620001a35760405162461bcd60e51b815260206004820152600c60248201526b2170726f636573732067617360a01b60448201526064016200007d565b613a98811015620001e65760405162461bcd60e51b815260206004820152600c60248201526b21726573657276652067617360a01b60448201526064016200007d565b61012091909152610140525050602d80546001600160a01b039788166001600160a01b031991821617909155602c8054969097169516949094179094555062000234925087915050620002a2565b50505050505050505062000404565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b602e546001600160a01b031615620003105760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016200007d565b602e80546001600160a01b0319166001600160a01b0392909216919091179055565b805163ffffffff811681146200034757600080fd5b919050565b80516001600160a01b03811681146200034757600080fd5b60008060008060008060008060006101208a8c0312156200038457600080fd5b6200038f8a62000332565b98506200039f60208b0162000332565b9750620003af60408b016200034c565b9650620003bf60608b016200034c565b9550620003cf60808b016200034c565b945060a08a0151935060c08a0151925060e08a01519150620003f56101008b016200034c565b90509295985092959850929598565b60805160a05160c05160e051610100516101205161014051613f9962000497600039600081816102c70152610eb701526000818161061401528181610ed80152610f5f01526000818161035a01526114a70152600081816104090152611480015260006105ed0152600081816103cf01528181610c710152610db90152600081816104a801526105880152613f996000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80639fa92f9d1161015c578063d1851c92116100ce578063ebf0c71711610087578063ebf0c7171461065c578063ee250e0614610664578063f38a267b1461066d578063f953cec714610690578063fa31de01146106a3578063fd54b228146106b657600080fd5b8063d1851c92146105c5578063d232c220146105d6578063d69f9d61146105e8578063d88beda21461060f578063db1b765914610636578063de9b771f1461064957600080fd5b8063b697f53111610120578063b697f53114610537578063b95a20011461054a578063c0857ba014610570578063c2fb26a614610583578063c5b350df146105aa578063cc394283146105b257600080fd5b80639fa92f9d146104f0578063aea4e49e146104f6578063b1f8100d14610509578063b2f876431461051c578063b46300ec1461052f57600080fd5b80635bd11efc116101f55780636a42b8f8116101b95780636a42b8f814610482578063715018a61461048b57806382646a58146104935780638d3638f4146104a65780638da5cb5b146104cc578063972c4928146104dd57600080fd5b80635bd11efc146103f15780635f61e3ec14610404578063607f2d42146104435780636188af0e1461046657806365eaf11b1461047957600080fd5b80632bbd59ca116102475780632bbd59ca146103255780633490334a146103555780633cf52ffb146103915780634ff746f6146103995780635190bc53146103ae57806352a9674b146103ca57600080fd5b806306661abd146102845780630e387de61461029b57806325e3beda146102c2578063272efc69146102e957806329460bd01461031c575b600080fd5b6023545b6040519081526020015b60405180910390f35b6102887f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61030c6102f736600461371e565b60296020526000908152604090205460ff1681565b6040519015158152602001610292565b61028860255481565b61034861033336600461373b565b602b6020526000908152604090205460ff1681565b604051610292919061376a565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610292565b600254610288565b6103ac6103a7366004613855565b6106c0565b005b61030c6103bc36600461371e565b6001600160a01b0316301490565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b6103ac6103ff36600461371e565b6106fc565b61042b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610292565b61030c61045136600461373b565b602f6020526000908152604090205460ff1681565b6103ac610474366004613889565b610790565b61028860275481565b62093a80610288565b6103ac6107eb565b6103ac6104a1366004613855565b6108aa565b7f000000000000000000000000000000000000000000000000000000000000000061037c565b6000546001600160a01b031661042b565b602e5461042b906001600160a01b031681565b3061042b565b6103ac61050436600461371e565b6108e4565b6103ac61051736600461371e565b610972565b6103ac61052a36600461371e565b610a1a565b6103ac610a96565b6103ac61054536600461371e565b610ac2565b61037c610558366004613901565b602a6020526000908152604090205463ffffffff1681565b602d5461042b906001600160a01b031681565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b6103ac610b41565b60245461042b906001600160a01b031681565b6001546001600160a01b031661042b565b6000546001600160a01b03161561030c565b61042b7f000000000000000000000000000000000000000000000000000000000000000081565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61030c61064436600461371e565b610b9c565b602c5461042b906001600160a01b031681565b610288610ba7565b61028860265481565b61030c61067b36600461373b565b60286020526000908152604090205460ff1681565b6103ac61069e366004613855565b610bb8565b6103ac6106b136600461391c565b610bd2565b6023546102889081565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81336040516106f19291906139ca565b60405180910390a150565b6000546001600160a01b03163314610727576040516311a8a1bb60e31b815260040160405180910390fd5b602454604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1602480546001600160a01b0319166001600160a01b0392909216919091179055565b6107a283805190602001208383610d15565b6107dc5760405162461bcd60e51b81526020600482015260066024820152652170726f766560d01b60448201526064015b60405180910390fd5b6107e583610da3565b50505050565b6000546001600160a01b03163314610816576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361083957604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261084b9190613a0a565b11610869576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b031615610893576040516323295ef960e01b815260040160405180910390fd5b6001546108a8906001600160a01b031661108c565b565b6108b3816110eb565b7fa69577a1e55dd0712044e7078b408c39fadff8b3e1b334b202ff17e70eda9fdc81336040516106f19291906139ca565b602e546001600160a01b0316156109505760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016107d3565b602e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461099d576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b0382811691161480156109c257506001600160a01b03811615155b156109e0576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610a0e57604051634a2fb73f60e11b815260040160405180910390fd5b610a17816110f4565b50565b6000546001600160a01b03163314610a45576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916905590519182527f384859c5ef5fafac31e8bc92ce7fb48b1f2c74c4dd5e212eb84ec202fa5d9fad91016106f1565b6108a8602754604051602001610aae91815260200190565b6040516020818303038152906040526110eb565b6000546001600160a01b03163314610aed576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916600117905590519182527fd65eca5d561d3a4568c87b9b13ced4ab52a69edadfdfdb22d76bc595f36d7d8791016106f1565b6001546001600160a01b03163314610b6c576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610b7e9190613a0a565b116108935760405163d39c12bb60e01b815260040160405180910390fd5b600060015b92915050565b6000610bb36003611142565b905090565b6000610bc382611155565b9050610bce8161143b565b5050565b3360009081526029602052604090205460ff16610c205760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016107d3565b63ffffffff8084166000908152602a602052604090205416610c43816001613a21565b63ffffffff8581166000908152602a60205260408120805463ffffffff191693909216929092179055610c9a7f0000000000000000000000000000000000000000000000000000000000000000338488888861155c565b80516020820120909150610caf600382611594565b610cb7610ba7565b6027557f40f08ee347fc927ae45902edc87debb024aab1a311943731968607f603f2152f816001610ce760235490565b610cf19190613a0a565b60275485604051610d059493929190613a49565b60405180910390a1505050505050565b6000806000858152602b602052604090205460ff166002811115610d3b57610d3b613754565b14610d7e5760405162461bcd60e51b8152602060048201526013602482015272214d6573736167655374617475732e4e6f6e6560681b60448201526064016107d3565b506000838152602b60205260409020805460ff191660019081179091555b9392505050565b600080610db083826116b1565b905063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610de862ffffff1983166116d5565b63ffffffff1614610e2a5760405162461bcd60e51b815260206004820152600c60248201526b10b232b9ba34b730ba34b7b760a11b60448201526064016107d3565b6000610e3b62ffffff1983166116ea565b905060016000828152602b602052604090205460ff166002811115610e6257610e62613754565b14610e995760405162461bcd60e51b815260206004820152600760248201526610b83937bb32b760c91b60448201526064016107d3565b6000818152602b60205260409020805460ff19166002179055610efc7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613a6e565b5a1015610f345760405162461bcd60e51b81526004016107d3906020808252600490820152632167617360e01b604082015260600190565b6000610f4562ffffff198416611733565b6040805161010080825261012082019092529192506000917f0000000000000000000000000000000000000000000000000000000000000000908390836020820181803683370190505090506000610fa262ffffff198916611744565b610fb162ffffff198a16611758565b610fc062ffffff198b1661176d565b610fdd610fd262ffffff198d16611782565b62ffffff19166117b0565b604051602401610ff09493929190613a86565b60408051601f198184030181529190526020810180516001600160e01b031663ab2dc3f560e01b17815281519192506000918291828a88f198503d945083851115611039578394505b848252846000602084013e7fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe48878a8460405161107793929190613ab5565b60405180910390a15050505050505050919050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a17816117f9565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6000610ba182611150611864565b611d25565b6060600061116283611df7565b9050600061116f82611e56565b9050600061117c83611e7f565b905060008161118a84611ea8565b61119386612064565b6040516020016111a593929190613ad6565b60408051601f1981840301815291815281516020928301206000818152602f90935291205490915060ff16156112295760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b60648201526084016107d3565b6000818152602f60205260408120805460ff1916600117905561124b85612080565b90506000611258826121c9565b905061126381612259565b602e546001600160a01b039081169116146112ce5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b60648201526084016107d3565b60006112d987612282565b90506112f96112e9846020015190565b876112f38a61229e565b846122ba565b6113515760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b60648201526084016107d3565b61137f8561135e8961256d565b6113678a612589565b846113718c6125a5565b61137a8d6125c1565b6125dd565b50600061138b83612703565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366113c16113bc83600061273f565b612777565b1461140e5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016107d3565b6000611419846127f2565b80602001905181019061142c9190613b03565b9b9a5050505050505050505050565b80516020146114765760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016107d3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166378ffd0a17f00000000000000000000000000000000000000000000000000000000000000006114cf84613b70565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81336040516106f19291906139ca565b606086868686868660405160200161157996959493929190613b94565b60405160208183030381529060405290509695505050505050565b60016115a260206002613cd2565b6115ac9190613a0a565b8260200154106115f15760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19481d1c995948199d5b1b60821b60448201526064016107d3565b60018260200160008282546116069190613a6e565b9091555050602082015460005b60208110156116a35781600116600103611642578284826020811061163a5761163a613cde565b015550505050565b83816020811061165457611654613cde565b0154604080516020810192909252810184905260600160405160208183030381529060405280519060200120925060028261168f9190613d0a565b91508061169b81613d1e565b915050611613565b506116ac613d37565b505050565b8151600090602084016116cc64ffffffffff8516828461280e565b95945050505050565b6000610ba162ffffff19831660286004612855565b6000806117008360781c6001600160601b031690565b6001600160601b0316905060006117208460181c6001600160601b031690565b6001600160601b03169091209392505050565b6000610ba161174183612885565b90565b6000610ba162ffffff198316826004612855565b6000610ba162ffffff19831660246004612855565b6000610ba162ffffff19831660046020612896565b6000610ba1604c6117a081601886901c6001600160601b0316613a0a565b62ffffff198516919060006129f2565b60606000806117c88460181c6001600160601b031690565b6001600160601b0316905060405191508192506117e88483602001612a6c565b508181016020016040529052919050565b602c54602e5460405163b472047760e01b81526001600160a01b039283169263b47204779261182f929116908590600401613d4d565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b5050505050565b61186c6136ea565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015611def57600182821c166000868360208110611d5257611d52613cde565b0154905081600103611d8f576040805160208101839052908101869052606001604051602081830303815290604052805190602001209450611dda565b84868460208110611da257611da2613cde565b6020020151604051602001611dc1929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50508080611de790613d1e565b915050611d2f565b505092915050565b6040805160208101909152606081526000611e41611e3c8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b612bc3565b60408051602081019091529081529392505050565b6060610ba18260000151600881518110611e7257611e72613cde565b6020026020010151612cd8565b6000610ba18260000151600281518110611e9b57611e9b613cde565b6020026020010151612777565b60408051602081019091526000815281516060919015610ba157600080611ed0600086612d74565b60f81c90506001811480611ee757508060ff166003145b15611f8e57600185516002611efc9190613d71565b611f069190613a0a565b6001600160401b03811115611f1d57611f1d613792565b6040519080825280601f01601f191660200182016040528015611f47576020820181803683370190505b5092506000611f57600187612d74565b90508084600081518110611f6d57611f6d613cde565b60200101906001600160f81b031916908160001a9053506001925050611ff1565b600285516002611f9e9190613d71565b611fa89190613a0a565b6001600160401b03811115611fbf57611fbf613792565b6040519080825280601f01601f191660200182016040528015611fe9576020820181803683370190505b509250600091505b60ff82165b835181101561205b5761202061200f60ff851683613a0a565b61201a906002613a6e565b87612d74565b84828151811061203257612032613cde565b60200101906001600160f81b031916908160001a9053508061205381613d1e565b915050611ff6565b50505092915050565b6000610ba18260000151600981518110611e9b57611e9b613cde565b6120a460405180606001604052806060815260200160608152602001600081525090565b6120be8260000151600681518110611e7257611e72613cde565b6020828101829052604080518082018252600080825290830152805180820190915282518152918101908201526120f481612df5565b156121095761210281612bc3565b82526121b5565b6020820151805160009061211f90600190613a0a565b6001600160401b0381111561213657612136613792565b6040519080825280601f01601f191660200182016040528015612160576020820181803683370190505b50905060008083602101915082602001905061217e82828551612e30565b6040805180820182526000808252602091820152815180830190925284518252808501908201526121ae90612bc3565b8652505050505b6121be83612064565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000612217836000015160038151811061220a5761220a613cde565b6020026020010151612bc3565b83604001518151811061222c5761222c613cde565b60200260200101519050604051806040016040528082815260200161225083612bc3565b90529392505050565b6000610ba1826020015160008151811061227557612275613cde565b6020026020010151612ebb565b6000610ba18260000151600581518110611e9b57611e9b613cde565b6060610ba18260000151600781518110611e7257611e72613cde565b6000806122ee8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006122fb82612bc3565b90506060808560008061230d8b611ea8565b90508051600003612328576000975050505050505050612565565b60005b865181101561255c57815183111561234e57600098505050505050505050612565565b61237087828151811061236357612363613cde565b6020026020010151612ed5565b95508580519060200120841461239157600098505050505050505050612565565b6123a687828151811061220a5761220a613cde565b945084516011036124785781518303612405578c805190602001206123d786601081518110611e7257611e72613cde565b80519060200120036123f457600198505050505050505050612565565b600098505050505050505050612565565b600082848151811061241957612419613cde565b016020015160f81c9050601081111561243e5760009950505050505050505050612565565b612463868260ff168151811061245657612456613cde565b6020026020010151612f53565b9450612470600185613a6e565b93505061254a565b84516002036123f45760006124a361249c87600081518110611e7257611e72613cde565b8486612f81565b83519091506124b28286613a6e565b03612505578d805190602001206124d587600181518110611e7257611e72613cde565b80519060200120036124f35760019950505050505050505050612565565b60009950505050505050505050612565565b8060000361251f5760009950505050505050505050612565565b6125298185613a6e565b93506125418660018151811061245657612456613cde565b945061254a9050565b8061255481613d1e565b91505061232b565b50505050505050505b949350505050565b6000610ba18260000151600381518110611e9b57611e9b613cde565b6000610ba18260000151600481518110611e9b57611e9b613cde565b6000610ba18260000151600081518110611e9b57611e9b613cde565b6060610ba18260000151600181518110611e7257611e72613cde565b602d546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190613d90565b50935050925092506126aa828b61266a9190613a0a565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588613088565b6126f65760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016107d3565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280612737846020015160018151811061220a5761220a613cde565b905292915050565b6040805180820190915260008082526020820152825180518390811061276757612767613cde565b6020026020010151905092915050565b80516000901580159061278c57508151602110155b61279557600080fd5b60006127a483602001516131f0565b905060008184600001516127b89190613a0a565b90506000808386602001516127cd9190613a6e565b90508051915060208310156127e957826020036101000a820491505b50949350505050565b6060610ba18260200151600281518110611e7257611e72613cde565b60008061281b8385613a6e565b905060405181111561282b575060005b806000036128405762ffffff19915050610d9c565b5050606092831b9190911790911b1760181b90565b6000612862826020613ddd565b61286d906008613e00565b60ff1661287b858585612896565b901c949350505050565b6000610ba162ffffff198316602c60205b60008160ff166000036128ab57506000610d9c565b6128be8460181c6001600160601b031690565b6001600160601b03166128d460ff841685613a6e565b11156129385761291f6128f08560781c6001600160601b031690565b6001600160601b031661290c8660181c6001600160601b031690565b6001600160601b0316858560ff16613271565b60405162461bcd60e51b81526004016107d39190613e21565b60208260ff1611156129b25760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016107d3565b6008820260006129cb8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600080612a088660781c6001600160601b031690565b6001600160601b03169050612a1c866132df565b84612a278784613a6e565b612a319190613a6e565b1115612a445762ffffff19915050612565565b612a4e8582613a6e565b9050612a628364ffffffffff16828661280e565b9695505050505050565b600062ffffff1980841603612ad45760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016107d3565b612add83613318565b612b3d5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016107d3565b6000612b528460181c6001600160601b031690565b6001600160601b031690506000612b728560781c6001600160601b031690565b6001600160601b031690506000604051905084811115612b925760206060fd5b8285848460045afa50612a62612ba88760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6060612bce82612df5565b612bd757600080fd5b6000612be283613355565b90506000816001600160401b03811115612bfe57612bfe613792565b604051908082528060200260200182016040528015612c4357816020015b6040805180820190915260008082526020820152815260200190600190039081612c1c5790505b5090506000612c5585602001516131f0565b8560200151612c649190613a6e565b90506000805b84811015612ccd57612c7b836133da565b9150604051806040016040528083815260200184815250848281518110612ca457612ca4613cde565b6020908102919091010152612cb98284613a6e565b925080612cc581613d1e565b915050612c6a565b509195945050505050565b8051606090612ce657600080fd5b6000612cf583602001516131f0565b90506000818460000151612d099190613a0a565b90506000816001600160401b03811115612d2557612d25613792565b6040519080825280601f01601f191660200182016040528015612d4f576020820181803683370190505b50905060008160200190506127e9848760200151612d6d9190613a6e565b828561347e565b6000612d81600284613e34565b15612dbb57601082612d94600286613d0a565b81518110612da457612da4613cde565b0160200151612db6919060f81c613e48565b612deb565b601082612dc9600286613d0a565b81518110612dd957612dd9613cde565b0160200151612deb919060f81c613e6a565b60f81b9392505050565b80516000908103612e0857506000919050565b6020820151805160001a9060c0821015612e26575060009392505050565b5060019392505050565b80600003612e3d57505050565b60208110612e755782518252612e54602084613a6e565b9250612e61602083613a6e565b9150612e6e602082613a0a565b9050612e3d565b80600003612e8257505050565b60006001612e91836020613a0a565b612e9d90610100613cd2565b612ea79190613a0a565b935183518516941916939093179091525050565b8051600090601514612ecc57600080fd5b610ba182612777565b6060600082600001516001600160401b03811115612ef557612ef5613792565b6040519080825280601f01601f191660200182016040528015612f1f576020820181803683370190505b5090508051600003612f315792915050565b6000816020019050612f4c846020015182866000015161347e565b5092915050565b8051600090602114612f6457600080fd5b60008083602001516001612f789190613a6e565b51949350505050565b60008080612f8e86611ea8565b9050600081516001600160401b03811115612fab57612fab613792565b6040519080825280601f01601f191660200182016040528015612fd5576020820181803683370190505b509050845b8251612fe69087613a6e565b81101561305957600087828151811061300157613001613cde565b01602001516001600160f81b0319169050808361301e8985613a0a565b8151811061302e5761302e613cde565b60200101906001600160f81b031916908160001a90535050808061305190613d1e565b915050612fda565b508080519060200120828051906020012003613078578151925061307d565b600092505b509095945050505050565b6000602082516130989190613e34565b156130dc5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016107d3565b6000602083516130ec9190613d0a565b90506130f9816002613cd2565b851061313f5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b60448201526064016107d3565b60008660205b855181116131e25785810151925061315e600289613e34565b6000036131965760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506131c3565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6131ce600289613d0a565b97506131db602082613a6e565b9050613145565b509094149695505050505050565b8051600090811a60808110156132095750600092915050565b60b8811080613224575060c08110801590613224575060f881105b156132325750600192915050565b60c081101561325f57613247600160b8613ddd565b6132549060ff1682613a0a565b610d9c906001613a6e565b613247600160f8613ddd565b50919050565b6060600061327e866134c3565b915050600061328c866134c3565b915050600061329a866134c3565b91505060006132a8866134c3565b915050838383836040516020016132c29493929190613e8c565b604051602081830303815290604052945050505050949350505050565b60006132f48260181c6001600160601b031690565b6133078360781c6001600160601b031690565b016001600160601b03169050919050565b60006133248260d81c90565b64ffffffffff1664ffffffffff0361333e57506000919050565b6000613349836132df565b60405110199392505050565b8051600090810361336857506000919050565b60008061337884602001516131f0565b84602001516133879190613a6e565b905060008460000151856020015161339f9190613a6e565b90505b808210156133d1576133b3826133da565b6133bd9083613a6e565b9150826133c981613d1e565b9350506133a2565b50909392505050565b80516000908190811a60808110156133f55760019150612f4c565b60b881101561341b57613409608082613a0a565b613414906001613a6e565b9150612f4c565b60c08110156134485760b78103600185019450806020036101000a85510460018201810193505050612f4c565b60f881101561345c5761340960c082613a0a565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8060000361348b57505050565b60208110612e7557825182526134a2602084613a6e565b92506134af602083613a6e565b91506134bc602082613a0a565b905061348b565b600080601f5b600f8160ff1611156135185760006134e2826008613e00565b60ff1685901c90506134f381613571565b61ffff16841793508160ff1660101461350e57601084901b93505b50600019016134c9565b50600f5b60ff8160ff16101561356b576000613535826008613e00565b60ff1685901c905061354681613571565b61ffff16831792508160ff1660001461356157601083901b92505b506000190161351c565b50915091565b600061358360048360ff16901c6135a3565b60ff1661ffff919091161760081b61359a826135a3565b60ff1617919050565b600060f08083179060ff821690036135be5750603092915050565b8060ff1660f1036135d25750603192915050565b8060ff1660f2036135e65750603292915050565b8060ff1660f3036135fa5750603392915050565b8060ff1660f40361360e5750603492915050565b8060ff1660f5036136225750603592915050565b8060ff1660f6036136365750603692915050565b8060ff1660f70361364a5750603792915050565b8060ff1660f80361365e5750603892915050565b8060ff1660f9036136725750603992915050565b8060ff1660fa036136865750606192915050565b8060ff1660fb0361369a5750606292915050565b8060ff1660fc036136ae5750606392915050565b8060ff1660fd036136c25750606492915050565b8060ff1660fe036136d65750606592915050565b8060ff1660ff0361326b5750606692915050565b6040518061040001604052806020906020820280368337509192915050565b6001600160a01b0381168114610a1757600080fd5b60006020828403121561373057600080fd5b8135610d9c81613709565b60006020828403121561374d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061378c57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156137d0576137d0613792565b604052919050565b60006001600160401b038211156137f1576137f1613792565b50601f01601f191660200190565b600082601f83011261381057600080fd5b813561382361381e826137d8565b6137a8565b81815284602083860101111561383857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561386757600080fd5b81356001600160401b0381111561387d57600080fd5b612565848285016137ff565b6000806000610440848603121561389f57600080fd5b83356001600160401b038111156138b557600080fd5b6138c1868287016137ff565b9350506104208401858111156138d657600080fd5b60208501925080359150509250925092565b803563ffffffff811681146138fc57600080fd5b919050565b60006020828403121561391357600080fd5b610d9c826138e8565b60008060006060848603121561393157600080fd5b61393a846138e8565b92506020840135915060408401356001600160401b0381111561395c57600080fd5b613968868287016137ff565b9150509250925092565b60005b8381101561398d578181015183820152602001613975565b838111156107e55750506000910152565b600081518084526139b6816020860160208601613972565b601f01601f19169290920160200192915050565b6040815260006139dd604083018561399e565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015613a1c57613a1c6139f4565b500390565b600063ffffffff808316818516808303821115613a4057613a406139f4565b01949350505050565b848152836020820152826040820152608060608201526000612a62608083018461399e565b60008219821115613a8157613a816139f4565b500190565b600063ffffffff808716835280861660208401525083604083015260806060830152612a62608083018461399e565b83815282151560208201526060604082015260006116cc606083018461399e565b83815260008351613aee816020850160208801613972565b60209201918201929092526040019392505050565b600060208284031215613b1557600080fd5b81516001600160401b03811115613b2b57600080fd5b8201601f81018413613b3c57600080fd5b8051613b4a61381e826137d8565b818152856020838501011115613b5f57600080fd5b6116cc826020830160208601613972565b8051602080830151919081101561326b5760001960209190910360031b1b16919050565b600063ffffffff60e01b808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c8301528251613bdc81604c850160208701613972565b91909101604c01979650505050505050565b600181815b80851115613c29578160001904821115613c0f57613c0f6139f4565b80851615613c1c57918102915b93841c9390800290613bf3565b509250929050565b600082613c4057506001610ba1565b81613c4d57506000610ba1565b8160018114613c635760028114613c6d57613c89565b6001915050610ba1565b60ff841115613c7e57613c7e6139f4565b50506001821b610ba1565b5060208310610133831016604e8410600b8410161715613cac575081810a610ba1565b613cb68383613bee565b8060001904821115613cca57613cca6139f4565b029392505050565b6000610d9c8383613c31565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082613d1957613d19613cf4565b500490565b600060018201613d3057613d306139f4565b5060010190565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03831681526040602082018190526000906125659083018461399e565b6000816000190483118215151615613d8b57613d8b6139f4565b500290565b600080600080600060a08688031215613da857600080fd5b855194506020860151935060408601519250606086015191506080860151613dcf81613709565b809150509295509295909350565b600060ff821660ff841680821015613df757613df76139f4565b90039392505050565b600060ff821660ff84168160ff0481118215151615613cca57613cca6139f4565b602081526000610d9c602083018461399e565b600082613e4357613e43613cf4565b500690565b600060ff831680613e5b57613e5b613cf4565b8060ff84160691505092915050565b600060ff831680613e7d57613e7d613cf4565b8060ff84160491505092915050565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201612a6256fea2646970667358221220a8518653afdf860461a384837dd0a3aad6c5cfffe92de81cc91ade1dba33ab0364736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c80639fa92f9d1161015c578063d1851c92116100ce578063ebf0c71711610087578063ebf0c7171461065c578063ee250e0614610664578063f38a267b1461066d578063f953cec714610690578063fa31de01146106a3578063fd54b228146106b657600080fd5b8063d1851c92146105c5578063d232c220146105d6578063d69f9d61146105e8578063d88beda21461060f578063db1b765914610636578063de9b771f1461064957600080fd5b8063b697f53111610120578063b697f53114610537578063b95a20011461054a578063c0857ba014610570578063c2fb26a614610583578063c5b350df146105aa578063cc394283146105b257600080fd5b80639fa92f9d146104f0578063aea4e49e146104f6578063b1f8100d14610509578063b2f876431461051c578063b46300ec1461052f57600080fd5b80635bd11efc116101f55780636a42b8f8116101b95780636a42b8f814610482578063715018a61461048b57806382646a58146104935780638d3638f4146104a65780638da5cb5b146104cc578063972c4928146104dd57600080fd5b80635bd11efc146103f15780635f61e3ec14610404578063607f2d42146104435780636188af0e1461046657806365eaf11b1461047957600080fd5b80632bbd59ca116102475780632bbd59ca146103255780633490334a146103555780633cf52ffb146103915780634ff746f6146103995780635190bc53146103ae57806352a9674b146103ca57600080fd5b806306661abd146102845780630e387de61461029b57806325e3beda146102c2578063272efc69146102e957806329460bd01461031c575b600080fd5b6023545b6040519081526020015b60405180910390f35b6102887f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03681565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61030c6102f736600461371e565b60296020526000908152604090205460ff1681565b6040519015158152602001610292565b61028860255481565b61034861033336600461373b565b602b6020526000908152604090205460ff1681565b604051610292919061376a565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610292565b600254610288565b6103ac6103a7366004613855565b6106c0565b005b61030c6103bc36600461371e565b6001600160a01b0316301490565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b6103ac6103ff36600461371e565b6106fc565b61042b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610292565b61030c61045136600461373b565b602f6020526000908152604090205460ff1681565b6103ac610474366004613889565b610790565b61028860275481565b62093a80610288565b6103ac6107eb565b6103ac6104a1366004613855565b6108aa565b7f000000000000000000000000000000000000000000000000000000000000000061037c565b6000546001600160a01b031661042b565b602e5461042b906001600160a01b031681565b3061042b565b6103ac61050436600461371e565b6108e4565b6103ac61051736600461371e565b610972565b6103ac61052a36600461371e565b610a1a565b6103ac610a96565b6103ac61054536600461371e565b610ac2565b61037c610558366004613901565b602a6020526000908152604090205463ffffffff1681565b602d5461042b906001600160a01b031681565b61037c7f000000000000000000000000000000000000000000000000000000000000000081565b6103ac610b41565b60245461042b906001600160a01b031681565b6001546001600160a01b031661042b565b6000546001600160a01b03161561030c565b61042b7f000000000000000000000000000000000000000000000000000000000000000081565b6102887f000000000000000000000000000000000000000000000000000000000000000081565b61030c61064436600461371e565b610b9c565b602c5461042b906001600160a01b031681565b610288610ba7565b61028860265481565b61030c61067b36600461373b565b60286020526000908152604090205460ff1681565b6103ac61069e366004613855565b610bb8565b6103ac6106b136600461391c565b610bd2565b6023546102889081565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81336040516106f19291906139ca565b60405180910390a150565b6000546001600160a01b03163314610727576040516311a8a1bb60e31b815260040160405180910390fd5b602454604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1602480546001600160a01b0319166001600160a01b0392909216919091179055565b6107a283805190602001208383610d15565b6107dc5760405162461bcd60e51b81526020600482015260066024820152652170726f766560d01b60448201526064015b60405180910390fd5b6107e583610da3565b50505050565b6000546001600160a01b03163314610816576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361083957604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261084b9190613a0a565b11610869576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b031615610893576040516323295ef960e01b815260040160405180910390fd5b6001546108a8906001600160a01b031661108c565b565b6108b3816110eb565b7fa69577a1e55dd0712044e7078b408c39fadff8b3e1b334b202ff17e70eda9fdc81336040516106f19291906139ca565b602e546001600160a01b0316156109505760405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016107d3565b602e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461099d576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b0382811691161480156109c257506001600160a01b03811615155b156109e0576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610a0e57604051634a2fb73f60e11b815260040160405180910390fd5b610a17816110f4565b50565b6000546001600160a01b03163314610a45576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916905590519182527f384859c5ef5fafac31e8bc92ce7fb48b1f2c74c4dd5e212eb84ec202fa5d9fad91016106f1565b6108a8602754604051602001610aae91815260200190565b6040516020818303038152906040526110eb565b6000546001600160a01b03163314610aed576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916600117905590519182527fd65eca5d561d3a4568c87b9b13ced4ab52a69edadfdfdb22d76bc595f36d7d8791016106f1565b6001546001600160a01b03163314610b6c576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610b7e9190613a0a565b116108935760405163d39c12bb60e01b815260040160405180910390fd5b600060015b92915050565b6000610bb36003611142565b905090565b6000610bc382611155565b9050610bce8161143b565b5050565b3360009081526029602052604090205460ff16610c205760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b60448201526064016107d3565b63ffffffff8084166000908152602a602052604090205416610c43816001613a21565b63ffffffff8581166000908152602a60205260408120805463ffffffff191693909216929092179055610c9a7f0000000000000000000000000000000000000000000000000000000000000000338488888861155c565b80516020820120909150610caf600382611594565b610cb7610ba7565b6027557f40f08ee347fc927ae45902edc87debb024aab1a311943731968607f603f2152f816001610ce760235490565b610cf19190613a0a565b60275485604051610d059493929190613a49565b60405180910390a1505050505050565b6000806000858152602b602052604090205460ff166002811115610d3b57610d3b613754565b14610d7e5760405162461bcd60e51b8152602060048201526013602482015272214d6573736167655374617475732e4e6f6e6560681b60448201526064016107d3565b506000838152602b60205260409020805460ff191660019081179091555b9392505050565b600080610db083826116b1565b905063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610de862ffffff1983166116d5565b63ffffffff1614610e2a5760405162461bcd60e51b815260206004820152600c60248201526b10b232b9ba34b730ba34b7b760a11b60448201526064016107d3565b6000610e3b62ffffff1983166116ea565b905060016000828152602b602052604090205460ff166002811115610e6257610e62613754565b14610e995760405162461bcd60e51b815260206004820152600760248201526610b83937bb32b760c91b60448201526064016107d3565b6000818152602b60205260409020805460ff19166002179055610efc7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000613a6e565b5a1015610f345760405162461bcd60e51b81526004016107d3906020808252600490820152632167617360e01b604082015260600190565b6000610f4562ffffff198416611733565b6040805161010080825261012082019092529192506000917f0000000000000000000000000000000000000000000000000000000000000000908390836020820181803683370190505090506000610fa262ffffff198916611744565b610fb162ffffff198a16611758565b610fc062ffffff198b1661176d565b610fdd610fd262ffffff198d16611782565b62ffffff19166117b0565b604051602401610ff09493929190613a86565b60408051601f198184030181529190526020810180516001600160e01b031663ab2dc3f560e01b17815281519192506000918291828a88f198503d945083851115611039578394505b848252846000602084013e7fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe48878a8460405161107793929190613ab5565b60405180910390a15050505050505050919050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a17816117f9565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6000610ba182611150611864565b611d25565b6060600061116283611df7565b9050600061116f82611e56565b9050600061117c83611e7f565b905060008161118a84611ea8565b61119386612064565b6040516020016111a593929190613ad6565b60408051601f1981840301815291815281516020928301206000818152602f90935291205490915060ff16156112295760405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b60648201526084016107d3565b6000818152602f60205260408120805460ff1916600117905561124b85612080565b90506000611258826121c9565b905061126381612259565b602e546001600160a01b039081169116146112ce5760405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b60648201526084016107d3565b60006112d987612282565b90506112f96112e9846020015190565b876112f38a61229e565b846122ba565b6113515760405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b60648201526084016107d3565b61137f8561135e8961256d565b6113678a612589565b846113718c6125a5565b61137a8d6125c1565b6125dd565b50600061138b83612703565b90507f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366113c16113bc83600061273f565b612777565b1461140e5760405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e41545552450060448201526064016107d3565b6000611419846127f2565b80602001905181019061142c9190613b03565b9b9a5050505050505050505050565b80516020146114765760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016107d3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166378ffd0a17f00000000000000000000000000000000000000000000000000000000000000006114cf84613b70565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561151357600080fd5b505af1158015611527573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81336040516106f19291906139ca565b606086868686868660405160200161157996959493929190613b94565b60405160208183030381529060405290509695505050505050565b60016115a260206002613cd2565b6115ac9190613a0a565b8260200154106115f15760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19481d1c995948199d5b1b60821b60448201526064016107d3565b60018260200160008282546116069190613a6e565b9091555050602082015460005b60208110156116a35781600116600103611642578284826020811061163a5761163a613cde565b015550505050565b83816020811061165457611654613cde565b0154604080516020810192909252810184905260600160405160208183030381529060405280519060200120925060028261168f9190613d0a565b91508061169b81613d1e565b915050611613565b506116ac613d37565b505050565b8151600090602084016116cc64ffffffffff8516828461280e565b95945050505050565b6000610ba162ffffff19831660286004612855565b6000806117008360781c6001600160601b031690565b6001600160601b0316905060006117208460181c6001600160601b031690565b6001600160601b03169091209392505050565b6000610ba161174183612885565b90565b6000610ba162ffffff198316826004612855565b6000610ba162ffffff19831660246004612855565b6000610ba162ffffff19831660046020612896565b6000610ba1604c6117a081601886901c6001600160601b0316613a0a565b62ffffff198516919060006129f2565b60606000806117c88460181c6001600160601b031690565b6001600160601b0316905060405191508192506117e88483602001612a6c565b508181016020016040529052919050565b602c54602e5460405163b472047760e01b81526001600160a01b039283169263b47204779261182f929116908590600401613d4d565b600060405180830381600087803b15801561184957600080fd5b505af115801561185d573d6000803e3d6000fd5b5050505050565b61186c6136ea565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015611def57600182821c166000868360208110611d5257611d52613cde565b0154905081600103611d8f576040805160208101839052908101869052606001604051602081830303815290604052805190602001209450611dda565b84868460208110611da257611da2613cde565b6020020151604051602001611dc1929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50508080611de790613d1e565b915050611d2f565b505092915050565b6040805160208101909152606081526000611e41611e3c8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b612bc3565b60408051602081019091529081529392505050565b6060610ba18260000151600881518110611e7257611e72613cde565b6020026020010151612cd8565b6000610ba18260000151600281518110611e9b57611e9b613cde565b6020026020010151612777565b60408051602081019091526000815281516060919015610ba157600080611ed0600086612d74565b60f81c90506001811480611ee757508060ff166003145b15611f8e57600185516002611efc9190613d71565b611f069190613a0a565b6001600160401b03811115611f1d57611f1d613792565b6040519080825280601f01601f191660200182016040528015611f47576020820181803683370190505b5092506000611f57600187612d74565b90508084600081518110611f6d57611f6d613cde565b60200101906001600160f81b031916908160001a9053506001925050611ff1565b600285516002611f9e9190613d71565b611fa89190613a0a565b6001600160401b03811115611fbf57611fbf613792565b6040519080825280601f01601f191660200182016040528015611fe9576020820181803683370190505b509250600091505b60ff82165b835181101561205b5761202061200f60ff851683613a0a565b61201a906002613a6e565b87612d74565b84828151811061203257612032613cde565b60200101906001600160f81b031916908160001a9053508061205381613d1e565b915050611ff6565b50505092915050565b6000610ba18260000151600981518110611e9b57611e9b613cde565b6120a460405180606001604052806060815260200160608152602001600081525090565b6120be8260000151600681518110611e7257611e72613cde565b6020828101829052604080518082018252600080825290830152805180820190915282518152918101908201526120f481612df5565b156121095761210281612bc3565b82526121b5565b6020820151805160009061211f90600190613a0a565b6001600160401b0381111561213657612136613792565b6040519080825280601f01601f191660200182016040528015612160576020820181803683370190505b50905060008083602101915082602001905061217e82828551612e30565b6040805180820182526000808252602091820152815180830190925284518252808501908201526121ae90612bc3565b8652505050505b6121be83612064565b604083015250919050565b604080516080810182526000918101828152606080830193909352815260208101919091526000612217836000015160038151811061220a5761220a613cde565b6020026020010151612bc3565b83604001518151811061222c5761222c613cde565b60200260200101519050604051806040016040528082815260200161225083612bc3565b90529392505050565b6000610ba1826020015160008151811061227557612275613cde565b6020026020010151612ebb565b6000610ba18260000151600581518110611e9b57611e9b613cde565b6060610ba18260000151600781518110611e7257611e72613cde565b6000806122ee8460408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b905060006122fb82612bc3565b90506060808560008061230d8b611ea8565b90508051600003612328576000975050505050505050612565565b60005b865181101561255c57815183111561234e57600098505050505050505050612565565b61237087828151811061236357612363613cde565b6020026020010151612ed5565b95508580519060200120841461239157600098505050505050505050612565565b6123a687828151811061220a5761220a613cde565b945084516011036124785781518303612405578c805190602001206123d786601081518110611e7257611e72613cde565b80519060200120036123f457600198505050505050505050612565565b600098505050505050505050612565565b600082848151811061241957612419613cde565b016020015160f81c9050601081111561243e5760009950505050505050505050612565565b612463868260ff168151811061245657612456613cde565b6020026020010151612f53565b9450612470600185613a6e565b93505061254a565b84516002036123f45760006124a361249c87600081518110611e7257611e72613cde565b8486612f81565b83519091506124b28286613a6e565b03612505578d805190602001206124d587600181518110611e7257611e72613cde565b80519060200120036124f35760019950505050505050505050612565565b60009950505050505050505050612565565b8060000361251f5760009950505050505050505050612565565b6125298185613a6e565b93506125418660018151811061245657612456613cde565b945061254a9050565b8061255481613d1e565b91505061232b565b50505050505050505b949350505050565b6000610ba18260000151600381518110611e9b57611e9b613cde565b6000610ba18260000151600481518110611e9b57611e9b613cde565b6000610ba18260000151600081518110611e9b57611e9b613cde565b6060610ba18260000151600181518110611e7257611e72613cde565b602d546040516320a9cea560e11b8152600481018490526000918291829182916001600160a01b03909116906341539d4a9060240160a060405180830381865afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190613d90565b50935050925092506126aa828b61266a9190613a0a565b6040805160208082018f90528183018e9052606082018d905260808083018d90528351808403909101815260a09092019092528051910120908588613088565b6126f65760405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f4845414445520000000060448201526064016107d3565b9998505050505050505050565b6040805160208101909152606081526040518060200160405280612737846020015160018151811061220a5761220a613cde565b905292915050565b6040805180820190915260008082526020820152825180518390811061276757612767613cde565b6020026020010151905092915050565b80516000901580159061278c57508151602110155b61279557600080fd5b60006127a483602001516131f0565b905060008184600001516127b89190613a0a565b90506000808386602001516127cd9190613a6e565b90508051915060208310156127e957826020036101000a820491505b50949350505050565b6060610ba18260200151600281518110611e7257611e72613cde565b60008061281b8385613a6e565b905060405181111561282b575060005b806000036128405762ffffff19915050610d9c565b5050606092831b9190911790911b1760181b90565b6000612862826020613ddd565b61286d906008613e00565b60ff1661287b858585612896565b901c949350505050565b6000610ba162ffffff198316602c60205b60008160ff166000036128ab57506000610d9c565b6128be8460181c6001600160601b031690565b6001600160601b03166128d460ff841685613a6e565b11156129385761291f6128f08560781c6001600160601b031690565b6001600160601b031661290c8660181c6001600160601b031690565b6001600160601b0316858560ff16613271565b60405162461bcd60e51b81526004016107d39190613e21565b60208260ff1611156129b25760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016107d3565b6008820260006129cb8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600080612a088660781c6001600160601b031690565b6001600160601b03169050612a1c866132df565b84612a278784613a6e565b612a319190613a6e565b1115612a445762ffffff19915050612565565b612a4e8582613a6e565b9050612a628364ffffffffff16828661280e565b9695505050505050565b600062ffffff1980841603612ad45760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016107d3565b612add83613318565b612b3d5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016107d3565b6000612b528460181c6001600160601b031690565b6001600160601b031690506000612b728560781c6001600160601b031690565b6001600160601b031690506000604051905084811115612b925760206060fd5b8285848460045afa50612a62612ba88760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b6060612bce82612df5565b612bd757600080fd5b6000612be283613355565b90506000816001600160401b03811115612bfe57612bfe613792565b604051908082528060200260200182016040528015612c4357816020015b6040805180820190915260008082526020820152815260200190600190039081612c1c5790505b5090506000612c5585602001516131f0565b8560200151612c649190613a6e565b90506000805b84811015612ccd57612c7b836133da565b9150604051806040016040528083815260200184815250848281518110612ca457612ca4613cde565b6020908102919091010152612cb98284613a6e565b925080612cc581613d1e565b915050612c6a565b509195945050505050565b8051606090612ce657600080fd5b6000612cf583602001516131f0565b90506000818460000151612d099190613a0a565b90506000816001600160401b03811115612d2557612d25613792565b6040519080825280601f01601f191660200182016040528015612d4f576020820181803683370190505b50905060008160200190506127e9848760200151612d6d9190613a6e565b828561347e565b6000612d81600284613e34565b15612dbb57601082612d94600286613d0a565b81518110612da457612da4613cde565b0160200151612db6919060f81c613e48565b612deb565b601082612dc9600286613d0a565b81518110612dd957612dd9613cde565b0160200151612deb919060f81c613e6a565b60f81b9392505050565b80516000908103612e0857506000919050565b6020820151805160001a9060c0821015612e26575060009392505050565b5060019392505050565b80600003612e3d57505050565b60208110612e755782518252612e54602084613a6e565b9250612e61602083613a6e565b9150612e6e602082613a0a565b9050612e3d565b80600003612e8257505050565b60006001612e91836020613a0a565b612e9d90610100613cd2565b612ea79190613a0a565b935183518516941916939093179091525050565b8051600090601514612ecc57600080fd5b610ba182612777565b6060600082600001516001600160401b03811115612ef557612ef5613792565b6040519080825280601f01601f191660200182016040528015612f1f576020820181803683370190505b5090508051600003612f315792915050565b6000816020019050612f4c846020015182866000015161347e565b5092915050565b8051600090602114612f6457600080fd5b60008083602001516001612f789190613a6e565b51949350505050565b60008080612f8e86611ea8565b9050600081516001600160401b03811115612fab57612fab613792565b6040519080825280601f01601f191660200182016040528015612fd5576020820181803683370190505b509050845b8251612fe69087613a6e565b81101561305957600087828151811061300157613001613cde565b01602001516001600160f81b0319169050808361301e8985613a0a565b8151811061302e5761302e613cde565b60200101906001600160f81b031916908160001a90535050808061305190613d1e565b915050612fda565b508080519060200120828051906020012003613078578151925061307d565b600092505b509095945050505050565b6000602082516130989190613e34565b156130dc5760405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b60448201526064016107d3565b6000602083516130ec9190613d0a565b90506130f9816002613cd2565b851061313f5760405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b60448201526064016107d3565b60008660205b855181116131e25785810151925061315e600289613e34565b6000036131965760408051602081018490529081018490526060016040516020818303038152906040528051906020012091506131c3565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012091505b6131ce600289613d0a565b97506131db602082613a6e565b9050613145565b509094149695505050505050565b8051600090811a60808110156132095750600092915050565b60b8811080613224575060c08110801590613224575060f881105b156132325750600192915050565b60c081101561325f57613247600160b8613ddd565b6132549060ff1682613a0a565b610d9c906001613a6e565b613247600160f8613ddd565b50919050565b6060600061327e866134c3565b915050600061328c866134c3565b915050600061329a866134c3565b91505060006132a8866134c3565b915050838383836040516020016132c29493929190613e8c565b604051602081830303815290604052945050505050949350505050565b60006132f48260181c6001600160601b031690565b6133078360781c6001600160601b031690565b016001600160601b03169050919050565b60006133248260d81c90565b64ffffffffff1664ffffffffff0361333e57506000919050565b6000613349836132df565b60405110199392505050565b8051600090810361336857506000919050565b60008061337884602001516131f0565b84602001516133879190613a6e565b905060008460000151856020015161339f9190613a6e565b90505b808210156133d1576133b3826133da565b6133bd9083613a6e565b9150826133c981613d1e565b9350506133a2565b50909392505050565b80516000908190811a60808110156133f55760019150612f4c565b60b881101561341b57613409608082613a0a565b613414906001613a6e565b9150612f4c565b60c08110156134485760b78103600185019450806020036101000a85510460018201810193505050612f4c565b60f881101561345c5761340960c082613a0a565b60019390930151602084900360f7016101000a900490920160f5190192915050565b8060000361348b57505050565b60208110612e7557825182526134a2602084613a6e565b92506134af602083613a6e565b91506134bc602082613a0a565b905061348b565b600080601f5b600f8160ff1611156135185760006134e2826008613e00565b60ff1685901c90506134f381613571565b61ffff16841793508160ff1660101461350e57601084901b93505b50600019016134c9565b50600f5b60ff8160ff16101561356b576000613535826008613e00565b60ff1685901c905061354681613571565b61ffff16831792508160ff1660001461356157601083901b92505b506000190161351c565b50915091565b600061358360048360ff16901c6135a3565b60ff1661ffff919091161760081b61359a826135a3565b60ff1617919050565b600060f08083179060ff821690036135be5750603092915050565b8060ff1660f1036135d25750603192915050565b8060ff1660f2036135e65750603292915050565b8060ff1660f3036135fa5750603392915050565b8060ff1660f40361360e5750603492915050565b8060ff1660f5036136225750603592915050565b8060ff1660f6036136365750603692915050565b8060ff1660f70361364a5750603792915050565b8060ff1660f80361365e5750603892915050565b8060ff1660f9036136725750603992915050565b8060ff1660fa036136865750606192915050565b8060ff1660fb0361369a5750606292915050565b8060ff1660fc036136ae5750606392915050565b8060ff1660fd036136c25750606492915050565b8060ff1660fe036136d65750606592915050565b8060ff1660ff0361326b5750606692915050565b6040518061040001604052806020906020820280368337509192915050565b6001600160a01b0381168114610a1757600080fd5b60006020828403121561373057600080fd5b8135610d9c81613709565b60006020828403121561374d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061378c57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156137d0576137d0613792565b604052919050565b60006001600160401b038211156137f1576137f1613792565b50601f01601f191660200190565b600082601f83011261381057600080fd5b813561382361381e826137d8565b6137a8565b81815284602083860101111561383857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561386757600080fd5b81356001600160401b0381111561387d57600080fd5b612565848285016137ff565b6000806000610440848603121561389f57600080fd5b83356001600160401b038111156138b557600080fd5b6138c1868287016137ff565b9350506104208401858111156138d657600080fd5b60208501925080359150509250925092565b803563ffffffff811681146138fc57600080fd5b919050565b60006020828403121561391357600080fd5b610d9c826138e8565b60008060006060848603121561393157600080fd5b61393a846138e8565b92506020840135915060408401356001600160401b0381111561395c57600080fd5b613968868287016137ff565b9150509250925092565b60005b8381101561398d578181015183820152602001613975565b838111156107e55750506000910152565b600081518084526139b6816020860160208601613972565b601f01601f19169290920160200192915050565b6040815260006139dd604083018561399e565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015613a1c57613a1c6139f4565b500390565b600063ffffffff808316818516808303821115613a4057613a406139f4565b01949350505050565b848152836020820152826040820152608060608201526000612a62608083018461399e565b60008219821115613a8157613a816139f4565b500190565b600063ffffffff808716835280861660208401525083604083015260806060830152612a62608083018461399e565b83815282151560208201526060604082015260006116cc606083018461399e565b83815260008351613aee816020850160208801613972565b60209201918201929092526040019392505050565b600060208284031215613b1557600080fd5b81516001600160401b03811115613b2b57600080fd5b8201601f81018413613b3c57600080fd5b8051613b4a61381e826137d8565b818152856020838501011115613b5f57600080fd5b6116cc826020830160208601613972565b8051602080830151919081101561326b5760001960209190910360031b1b16919050565b600063ffffffff60e01b808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c8301528251613bdc81604c850160208701613972565b91909101604c01979650505050505050565b600181815b80851115613c29578160001904821115613c0f57613c0f6139f4565b80851615613c1c57918102915b93841c9390800290613bf3565b509250929050565b600082613c4057506001610ba1565b81613c4d57506000610ba1565b8160018114613c635760028114613c6d57613c89565b6001915050610ba1565b60ff841115613c7e57613c7e6139f4565b50506001821b610ba1565b5060208310610133831016604e8410600b8410161715613cac575081810a610ba1565b613cb68383613bee565b8060001904821115613cca57613cca6139f4565b029392505050565b6000610d9c8383613c31565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600082613d1957613d19613cf4565b500490565b600060018201613d3057613d306139f4565b5060010190565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b03831681526040602082018190526000906125659083018461399e565b6000816000190483118215151615613d8b57613d8b6139f4565b500290565b600080600080600060a08688031215613da857600080fd5b855194506020860151935060408601519250606086015191506080860151613dcf81613709565b809150509295509295909350565b600060ff821660ff841680821015613df757613df76139f4565b90039392505050565b600060ff821660ff84168160ff0481118215151615613cca57613cca6139f4565b602081526000610d9c602083018461399e565b600082613e4357613e43613cf4565b500690565b600060ff831680613e5b57613e5b613cf4565b8060ff84160691505092915050565b600060ff831680613e7d57613e7d613cf4565b8060ff84160491505092915050565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201612a6256fea2646970667358221220a8518653afdf860461a384837dd0a3aad6c5cfffe92de81cc91ade1dba33ab0364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addSender(address)": {
        "details": "Only whitelisted routers can call `dispatch`"
      },
      "dispatch(uint32,bytes32,bytes)": {
        "details": "The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \"hub\"), it will be combined into a single aggregate root by RootManager (along with outbound roots from other chains). This aggregate root will be redistributed to all destination chains."
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "details": "Intended to be called by the relayer at specific intervals during runtime."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "removeSender(address)": {
        "details": "Only whitelisted routers can call `dispatch`"
      },
      "send()": {
        "details": "At runtime, this method should be called at specific time intervals."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addSender(address)": {
        "notice": "Adds a sender to the whitelist"
      },
      "aggregateRoot()": {
        "notice": "This tracks the root of the tree containing outbound roots from all other supported domains"
      },
      "count()": {
        "notice": "Returns the number of inserted leaves in the tree (current index)"
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "dispatch(uint32,bytes32,bytes)": {
        "notice": "This function adds transfers to the outbound transfer merkle tree."
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "mirrorDomain()": {
        "notice": "Domain of mirror connector."
      },
      "mirrorProcessGas()": {
        "notice": "Gas costs forwarded to the `processMessage` call on the mirror domain"
      },
      "outboundRoot()": {
        "notice": "This tracks the root of all transfers with the origin domain as this domain (i.e. all outbound transfers)"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "notice": "Must be able to call the `handle` function on the BridgeRouter contract. This is called on the destination domain to handle incoming messages."
      },
      "provenRoots(bytes32)": {
        "notice": "This tracks whether the root has been proven to exist within the given aggregate root"
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "removeSender(address)": {
        "notice": "Removes a sender from the whitelist"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "root()": {
        "notice": "Calculates and returns tree's current root"
      },
      "send()": {
        "notice": "This is called by relayers to trigger passing of current root to mainnet root manager."
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33678,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33680,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 33682,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 34675,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "tree",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Tree)38176_storage"
      },
      {
        "astId": 27994,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "36",
        "type": "t_address"
      },
      {
        "astId": 28000,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "mirrorProcessGas",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 28003,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "aggregateRoot",
        "offset": 0,
        "slot": "38",
        "type": "t_bytes32"
      },
      {
        "astId": 28006,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "outboundRoot",
        "offset": 0,
        "slot": "39",
        "type": "t_bytes32"
      },
      {
        "astId": 28011,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "provenRoots",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 28016,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "whitelistedSenders",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28024,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "nonces",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 28029,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "messages",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_bytes32,t_enum(MessageStatus)27982)"
      },
      {
        "astId": 31856,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "fxRoot",
        "offset": 0,
        "slot": "44",
        "type": "t_contract(IFxStateSender)31806"
      },
      {
        "astId": 31859,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "45",
        "type": "t_contract(ICheckpointManager)31824"
      },
      {
        "astId": 31861,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "46",
        "type": "t_address"
      },
      {
        "astId": 31865,
        "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
        "label": "processedExits",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)32_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[32]",
        "numberOfBytes": "1024"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)31824": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)31806": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_enum(MessageStatus)27982": {
        "encoding": "inplace",
        "label": "enum Connector.MessageStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_enum(MessageStatus)27982)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum Connector.MessageStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(MessageStatus)27982"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Tree)38176_storage": {
        "encoding": "inplace",
        "label": "struct MerkleLib.Tree",
        "members": [
          {
            "astId": 38173,
            "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
            "label": "branch",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)32_storage"
          },
          {
            "astId": 38175,
            "contract": "contracts/core/messaging/connectors/PolygonConnector.sol:PolygonL1Connector",
            "label": "count",
            "offset": 0,
            "slot": "32",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}