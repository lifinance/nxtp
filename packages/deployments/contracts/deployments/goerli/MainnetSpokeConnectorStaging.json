{
  "address": "0x96461CFcA78F126Fd41181cb8AC96e86E5AcB1d5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mirrorGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_processGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveGas",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "current",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "previous",
          "type": "bytes32"
        }
      ],
      "name": "AggregateRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "Dispatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        }
      ],
      "name": "MirrorGasUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "mirrorDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amb",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mirrorConnector",
          "type": "address"
        }
      ],
      "name": "NewConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "Process",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIRROR_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROCESS_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "addSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregateRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipientAddress",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_messageBody",
          "type": "bytes"
        }
      ],
      "name": "dispatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "home",
      "outputs": [
        {
          "internalType": "contract IOutbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_potentialReplica",
          "type": "address"
        }
      ],
      "name": "isReplica",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "enum SpokeConnector.MessageStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outboundRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[32]",
          "name": "_proof",
          "type": "bytes32[32]"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "proveAndProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "provenRoots",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "removeSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mirrorGas",
          "type": "uint256"
        }
      ],
      "name": "setMirrorGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedSenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb5649bb697898d89779ad99e4ccec2da0d7c5070f01b5315244ad285589fb952",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x96461CFcA78F126Fd41181cb8AC96e86E5AcB1d5",
    "transactionIndex": 10,
    "gasUsed": "2395054",
    "logsBloom": "0x
    "blockHash": "0x9843d3664084dc88748f4985e780678e76463a5f4d4b0e0f88403724774d41f5",
    "transactionHash": "0xb5649bb697898d89779ad99e4ccec2da0d7c5070f01b5315244ad285589fb952",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7584631,
        "transactionHash": "0xb5649bb697898d89779ad99e4ccec2da0d7c5070f01b5315244ad285589fb952",
        "address": "0x96461CFcA78F126Fd41181cb8AC96e86E5AcB1d5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x9843d3664084dc88748f4985e780678e76463a5f4d4b0e0f88403724774d41f5"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 7584631,
        "transactionHash": "0xb5649bb697898d89779ad99e4ccec2da0d7c5070f01b5315244ad285589fb952",
        "address": "0x96461CFcA78F126Fd41181cb8AC96e86E5AcB1d5",
        "topics": [
          "0x34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf850",
        "logIndex": 12,
        "blockHash": "0x9843d3664084dc88748f4985e780678e76463a5f4d4b0e0f88403724774d41f5"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 7584631,
        "transactionHash": "0xb5649bb697898d89779ad99e4ccec2da0d7c5070f01b5315244ad285589fb952",
        "address": "0x96461CFcA78F126Fd41181cb8AC96e86E5AcB1d5",
        "topics": [
          "0x4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f0",
          "0x00000000000000000000000000000000000000000000000000000000676f6572",
          "0x00000000000000000000000000000000000000000000000000000000676f6572"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fe0344031945ccc391854be3196a5cae61cfc9700000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 13,
        "blockHash": "0x9843d3664084dc88748f4985e780678e76463a5f4d4b0e0f88403724774d41f5"
      }
    ],
    "blockNumber": 7584631,
    "cumulativeGasUsed": "3278279",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1735353714",
    "1735353714",
    "0x0000000000000000000000000000000000000000",
    "0xfe0344031945CCC391854BE3196A5cAe61cfC970",
    "0x0000000000000000000000000000000000000000",
    "850000",
    "850000",
    "15000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2575038f21e3e219679bfa054f96a156",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mirrorGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_processGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveGas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"previous\",\"type\":\"bytes32\"}],\"name\":\"AggregateRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Dispatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"MirrorGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"mirrorDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorConnector\",\"type\":\"address\"}],\"name\":\"NewConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"Process\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIRROR_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROCESS_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"addSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_messageBody\",\"type\":\"bytes\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"home\",\"outputs\":[{\"internalType\":\"contract IOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_potentialReplica\",\"type\":\"address\"}],\"name\":\"isReplica\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"enum SpokeConnector.MessageStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outboundRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_proof\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"proveAndProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"provenRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"removeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mirrorGas\",\"type\":\"uint256\"}],\"name\":\"setMirrorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSender(address)\":{\"details\":\"Only whitelisted routers can call `dispatch`\"},\"dispatch(uint32,bytes32,bytes)\":{\"details\":\"The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \\\"hub\\\"), it will be combined into a single aggregate root by RootManager (along with outbound roots from other chains). This aggregate root will be redistributed to all destination chains.\"},\"home()\":{\"details\":\"The local inbox contract is a SpokeConnector with AMBs, and a Home contract with nomad\",\"returns\":{\"_0\":\"The local inbox contract\"}},\"isReplica(address)\":{\"returns\":{\"_0\":\"True if _potentialReplica is an enrolled Replica\"}},\"processMessage(bytes)\":{\"details\":\"This is called by AMBs to process messages originating from mirror connector\"},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"details\":\"Intended to be called by the relayer at specific intervals during runtime.\"},\"removeSender(address)\":{\"details\":\"Only whitelisted routers can call `dispatch`\"},\"sendMessage(bytes)\":{\"details\":\"This is called by the root manager *only* on mainnet to propagate the aggregate rootGet 'Base constructor arguments given twice' when trying to inherit\"}},\"version\":1},\"userdoc\":{\"events\":{\"MessageProcessed(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully received over an AMB\"},\"MessageSent(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully sent over an AMB\"}},\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"MIRROR_DOMAIN()\":{\"notice\":\"The domain of the corresponding messaging (i.e. Connector) contract.\"},\"PROCESS_GAS()\":{\"notice\":\"Minimum gas for processing a received message (reserved for handle)\"},\"RESERVE_GAS()\":{\"notice\":\"Reserved gas (to ensure tx completes in case message processing runs out)\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addSender(address)\":{\"notice\":\"Adds a sender to the whitelist\"},\"aggregateRoot()\":{\"notice\":\"This tracks the root of the tree containing outbound roots from all other supported domains\"},\"count()\":{\"notice\":\"Returns the number of inserted leaves in the tree (current index)\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"dispatch(uint32,bytes32,bytes)\":{\"notice\":\"This function adds transfers to the outbound transfer merkle tree.\"},\"home()\":{\"notice\":\"Get the local inbox contract from the xAppConnectionManager\"},\"isReplica(address)\":{\"notice\":\"Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\"},\"localDomain()\":{\"notice\":\"This provides the implementation for what is defined in the ConnectorManager to avoid storing the domain redundantly\"},\"messages(bytes32)\":{\"notice\":\"Mapping of message leaves to MessageStatus, keyed on leaf\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"mirrorGas()\":{\"notice\":\"Gas costs forwarded to the `processMessage` call on the mirror domain\"},\"nonces(uint32)\":{\"notice\":\"domain => next available nonce for the domain\"},\"outboundRoot()\":{\"notice\":\"This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages)\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processMessage(bytes)\":{\"notice\":\"Processes a message received by an AMB\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proveAndProcess(bytes,bytes32[32],uint256)\":{\"notice\":\"Must be able to call the `handle` function on the BridgeRouter contract. This is called on the destination domain to handle incoming messages.\"},\"provenRoots(bytes32)\":{\"notice\":\"This tracks whether the root has been proven to exist within the given aggregate root\"},\"removeSender(address)\":{\"notice\":\"Removes a sender from the whitelist\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"send()\":{\"notice\":\"This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages)\"},\"sendMessage(bytes)\":{\"notice\":\"Sends a message over the amb\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"setMirrorGas(uint256)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"verifySender(address)\":{\"notice\":\"Checks the cross domain sender for a given address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol\":\"MainnetSpokeConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/messaging/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {MerkleLib} from \\\"./libraries/Merkle.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a Merkle tree instance and\\n * exposes view functions for the tree.\\n */\\ncontract MerkleTreeManager {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  MerkleLib.Tree public tree;\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index)\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n}\\n\",\"keccak256\":\"0x745190976a3c47c24ecdf550254780d725adc8ff47c53d2bb792495aa1427dfd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n/**\\n * @title Connector\\n * @author Connext Labs, Inc.\\n * @notice This contract has the messaging interface functions used by all connectors.\\n *\\n * @dev This contract stores information about mirror connectors, but can be used as a\\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\\n * mainnet). In this case, the `mirrorConnector`, `MIRROR_DOMAIN`, and `mirrorGas`\\n * will be empty\\n */\\nabstract contract Connector is ProposedOwnable, IConnector {\\n  // ============ Events ============\\n  event NewConnector(\\n    uint32 indexed domain,\\n    uint32 indexed mirrorDomain,\\n    address amb,\\n    address rootManager,\\n    address mirrorConnector\\n  );\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  event MirrorGasUpdated(uint256 previous, uint256 current);\\n\\n  // ============ Public storage ============\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable MIRROR_DOMAIN;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  /**\\n   * @notice Gas costs forwarded to the `processMessage` call on the mirror domain\\n   */\\n  uint256 public mirrorGas;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered AMB\\n   */\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\\n   */\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManager\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   * @param _mirrorGas The gas costs required to process a message on mirror\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas\\n  ) ProposedOwnable() {\\n    // set the owner\\n    _setOwner(msg.sender);\\n\\n    // sanity checks on values\\n    require(_domain != 0, \\\"empty domain\\\");\\n    require(_rootManager != address(0), \\\"empty rootManager\\\");\\n    // see note at top of contract on why the mirror values are not sanity checked\\n\\n    // set immutables\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n    MIRROR_DOMAIN = _mirrorDomain;\\n    // set mutables if defined\\n    if (_mirrorConnector != address(0)) {\\n      _setMirrorConnector(_mirrorConnector);\\n    }\\n\\n    if (_mirrorGas != 0) {\\n      _setMirrorGas(_mirrorGas);\\n    }\\n\\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\\n  }\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    _setMirrorConnector(_mirrorConnector);\\n  }\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorGas(uint256 _mirrorGas) public onlyOwner {\\n    _setMirrorGas(_mirrorGas);\\n  }\\n\\n  // ============ Public fns ============\\n\\n  /**\\n   * @notice Processes a message received by an AMB\\n   * @dev This is called by AMBs to process messages originating from mirror connector\\n   */\\n  // TODO: make more opinionated (i.e. processOutboundMessage)\\n  function processMessage(bytes memory _data) external onlyAMB {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Checks the cross domain sender for a given address\\n   */\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  // ============ Virtual fns ============\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   */\\n  function _sendMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private fns ============\\n  function _setMirrorConnector(address _mirrorConnector) internal {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n\\n  function _setMirrorGas(uint256 _mirrorGas) internal {\\n    emit MirrorGasUpdated(mirrorGas, _mirrorGas);\\n    mirrorGas = _mirrorGas;\\n  }\\n}\\n\",\"keccak256\":\"0x0e610ef7b6e7ab1d109a514831f6917d751ced4c9d0090a74b2420133f145906\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/ConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IConnectorManager} from \\\"../interfaces/IConnectorManager.sol\\\";\\nimport {IOutbox} from \\\"../interfaces/IOutbox.sol\\\";\\n\\n/**\\n * @notice This is an interface to allow the `Messaging` contract to be used\\n * as a `XappConnectionManager` on all router contracts.\\n *\\n * @dev Each nomad router contract has a `XappConnectionClient`, which references a\\n * XappConnectionManager to get the `Home` (oubtox) and approved `Replica` (inbox)\\n * instances. At any point the client can replace the manager it's pointing to,\\n * changing the underlying messaging connection.\\n */\\nabstract contract ConnectorManager is IConnectorManager {\\n  constructor() {}\\n\\n  function home() public view returns (IOutbox) {\\n    return IOutbox(address(this));\\n  }\\n\\n  function isReplica(address _potentialReplica) public view returns (bool) {\\n    return _potentialReplica == address(this);\\n  }\\n\\n  function localDomain() external view virtual returns (uint32);\\n}\\n\",\"keccak256\":\"0x6834c8a1b5b2dd6dbb1c89397702f24462dd73a2f162bed5d625900f9ad2e84f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/SpokeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {TypedMemView} from \\\"../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {MerkleLib} from \\\"../libraries/Merkle.sol\\\";\\nimport {Message} from \\\"../libraries/Message.sol\\\";\\n\\nimport {MerkleTreeManager} from \\\"../Merkle.sol\\\";\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\nimport {ConnectorManager} from \\\"./ConnectorManager.sol\\\";\\n\\n/**\\n * @title SpokeConnector\\n * @author Connext Labs, Inc.\\n * @notice This contract implements the messaging functions needed on the spoke-side of a given AMB.\\n * The SpokeConnector extends the HubConnector functionality by being able to send, store, and prove\\n * messages.\\n *\\n * @dev If you are deploying this contract to mainnet, then the mirror values stored in the HubConnector\\n * will be unused\\n *\\n * TODO: what about the queue manager? see Home.sol for context\\n */\\nabstract contract SpokeConnector is Connector, ConnectorManager, MerkleTreeManager, ReentrancyGuard {\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using Message for bytes29;\\n\\n  // ============ Events ============\\n  event SenderAdded(address sender);\\n\\n  event SenderRemoved(address sender);\\n\\n  event AggregateRootUpdated(bytes32 current, bytes32 previous);\\n\\n  event Dispatch(bytes32 leaf, uint256 index, bytes32 root, bytes message);\\n\\n  event Process(bytes32 leaf, bool success, bytes returnData);\\n\\n  // ============ Structs ============\\n  // Status of Message:\\n  //   0 - None - message has not been proven or processed\\n  //   1 - Proven - message inclusion proof has been validated\\n  //   2 - Processed - message has been dispatched to recipient\\n  enum MessageStatus {\\n    None,\\n    Proven,\\n    Processed\\n  }\\n\\n  // ============ Public storage ============\\n\\n  /**\\n   * @notice Minimum gas for processing a received message (reserved for handle)\\n   */\\n  uint256 public immutable PROCESS_GAS;\\n\\n  /**\\n   * @notice Reserved gas (to ensure tx completes in case message processing runs out)\\n   */\\n  uint256 public immutable RESERVE_GAS;\\n\\n  /**\\n   * @notice This tracks the root of the tree containing outbound roots from all other supported\\n   * domains\\n   * @dev This root is the root of the tree that is aggregated on mainnet (composed of all the roots\\n   * of previous trees)\\n   */\\n  bytes32 public aggregateRoot;\\n\\n  /**\\n   * @notice This tracks whether the root has been proven to exist within the given aggregate root\\n   * @dev Tracking this is an optimization so you dont have to prove inclusion of the same constituent\\n   * root many times\\n   */\\n  mapping(bytes32 => bool) public provenRoots;\\n\\n  /**\\n   * @dev This is used for the `onlyWhitelistedSender` modifier, which gates who\\n   * can send messages using `dispatch`\\n   */\\n  mapping(address => bool) public whitelistedSenders;\\n\\n  /**\\n   * @notice domain => next available nonce for the domain\\n   */\\n  mapping(uint32 => uint32) public nonces;\\n\\n  /**\\n   * @notice Mapping of message leaves to MessageStatus, keyed on leaf\\n   */\\n  mapping(bytes32 => MessageStatus) public messages;\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyWhitelistedSender() {\\n    require(whitelistedSenders[msg.sender], \\\"!whitelisted\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new SpokeConnector instance\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   * @param _mirrorGas The gas costs required to process a message on mirror\\n   * @param _processGas The gas costs used in `handle` to ensure meaningful state changes can occur (minimum gas needed\\n   * to handle transaction)\\n   * @param _reserveGas The gas costs reserved when `handle` is called to ensure failures are handled\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  )\\n    ConnectorManager()\\n    MerkleTreeManager()\\n    Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorGas)\\n  {\\n    // sanity check constants\\n    require(_processGas >= 850_000, \\\"!process gas\\\");\\n    require(_reserveGas >= 15_000, \\\"!reserve gas\\\");\\n\\n    //\\n    PROCESS_GAS = _processGas;\\n    RESERVE_GAS = _reserveGas;\\n  }\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @notice Adds a sender to the whitelist\\n   * @dev Only whitelisted routers can call `dispatch`\\n   */\\n  function addSender(address _sender) public onlyOwner {\\n    whitelistedSenders[_sender] = true;\\n    emit SenderAdded(_sender);\\n  }\\n\\n  /**\\n   * @notice Removes a sender from the whitelist\\n   * @dev Only whitelisted routers can call `dispatch`\\n   */\\n  function removeSender(address _sender) public onlyOwner {\\n    whitelistedSenders[_sender] = false;\\n    emit SenderRemoved(_sender);\\n  }\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice This returns the root of all messages with the origin domain as this domain (i.e.\\n   * all outbound messages)\\n   */\\n  function outboundRoot() external view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice This provides the implementation for what is defined in the ConnectorManager\\n   * to avoid storing the domain redundantly\\n   */\\n  function localDomain() external view override returns (uint32) {\\n    return DOMAIN;\\n  }\\n\\n  /**\\n   * @notice This returns the root of all messages with the origin domain as this domain (i.e.\\n   * all outbound messages)\\n   */\\n  function send() external {\\n    bytes memory _data = abi.encodePacked(tree.root());\\n    _sendMessage(_data);\\n    emit MessageSent(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function adds transfers to the outbound transfer merkle tree.\\n   * @dev The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \\\"hub\\\"),\\n   * it will be combined into a single aggregate root by RootManager (along with outbound roots from other\\n   * chains). This aggregate root will be redistributed to all destination chains.\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external onlyWhitelistedSender returns (bytes32) {\\n    // get the next nonce for the destination domain, then increment it\\n    uint32 _nonce = nonces[_destinationDomain];\\n    nonces[_destinationDomain] = _nonce + 1;\\n    // format the message into packed bytes\\n    bytes memory _message = Message.formatMessage(\\n      DOMAIN,\\n      bytes32(uint256(uint160(msg.sender))), // TODO necessary?\\n      _nonce,\\n      _destinationDomain,\\n      _recipientAddress,\\n      _messageBody\\n    );\\n    // insert the hashed message into the Merkle tree\\n    bytes32 _messageHash = keccak256(_message);\\n    tree.insert(_messageHash);\\n    // TODO: see comment on queue manager at the top\\n    // Emit Dispatch event with message information\\n    // note: leafIndex is count() - 1 since new leaf has already been inserted\\n    emit Dispatch(_messageHash, count() - 1, tree.root(), _message);\\n    return _messageHash;\\n  }\\n\\n  /**\\n   * @notice Must be able to call the `handle` function on the BridgeRouter contract. This is called\\n   * on the destination domain to handle incoming messages.\\n   * @dev Intended to be called by the relayer at specific intervals during runtime.\\n   */\\n  function proveAndProcess(\\n    bytes memory _message,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) external {\\n    // 1. must prove existence of the given outbound root from destination domain\\n    // 2. must prove the existence of the given message in the destination\\n    // domain outbound root\\n    require(prove(keccak256(_message), _proof, _index), \\\"!prove\\\");\\n    // FIXME: implement proofs above before processing the message\\n    process(_message);\\n  }\\n\\n  // ============ Private fns ============\\n  /**\\n   * @notice This is either called by the Connector (AKA `this`) on the spoke (L2) chain after retrieving\\n   * latest `aggregateRoot` from the AMB (sourced from mainnet) OR called by the AMB directly.\\n   * @dev Must check the msg.sender on the origin chain to ensure only the root manager is passing\\n   * these roots.\\n   */\\n  function updateAggregateRoot(bytes32 _newRoot) internal {\\n    emit AggregateRootUpdated(_newRoot, aggregateRoot);\\n    aggregateRoot = _newRoot;\\n  }\\n\\n  /**\\n   * @notice Attempts to prove the validity of message given its leaf, the\\n   * merkle proof of inclusion for the leaf, and the index of the leaf.\\n   * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n   * already proven or processed)\\n   * @dev For convenience, we allow proving against any previous root.\\n   * This means that witnesses never need to be updated for the new root\\n   * @param _leaf Leaf of message to prove\\n   * @param _proof Merkle proof of inclusion for leaf\\n   * @param _index Index of leaf in home's merkle tree\\n   * @return Returns true if proof was valid and `prove` call succeeded\\n   **/\\n  function prove(\\n    bytes32 _leaf,\\n    bytes32[32] calldata _proof,\\n    uint256 _index\\n  ) internal returns (bool) {\\n    // FIXME: actually implement this later\\n    // ensure that message has not been proven or processed\\n    require(messages[_leaf] == MessageStatus.None, \\\"!MessageStatus.None\\\");\\n    // // calculate the expected root based on the proof\\n    // bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n    // // if the root is valid, change status to Proven\\n    // if (acceptableRoot(_calculatedRoot)) {\\n    //   messages[_leaf] = MessageStatus.Proven;\\n    //   return true;\\n    // }\\n    // return false;\\n\\n    messages[_leaf] = MessageStatus.Proven;\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Given formatted message, attempts to dispatch\\n   * message payload to end recipient.\\n   * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n   * Reverts if formatted message's destination domain is not the Replica's domain,\\n   * if message has not been proven,\\n   * or if not enough gas is provided for the dispatch transaction.\\n   * @param _message Formatted message\\n   * @return _success TRUE iff dispatch transaction succeeded\\n   */\\n  // TODO: Reentrancy\\n  function process(bytes memory _message) internal nonReentrant returns (bool _success) {\\n    bytes29 _m = _message.ref(0);\\n    // ensure message was meant for this domain\\n    require(_m.destination() == DOMAIN, \\\"!destination\\\");\\n    // ensure message has been proven\\n    bytes32 _messageHash = _m.keccak();\\n    require(messages[_messageHash] == MessageStatus.Proven, \\\"!proven\\\");\\n    // check re-entrancy guard\\n    // require(entered == 1, \\\"!reentrant\\\");\\n    // entered = 0;\\n    // update message status as processed\\n    messages[_messageHash] = MessageStatus.Processed;\\n    // A call running out of gas TYPICALLY errors the whole tx. We want to\\n    // a) ensure the call has a sufficient amount of gas to make a\\n    //    meaningful state change.\\n    // b) ensure that if the subcall runs out of gas, that the tx as a whole\\n    //    does not revert (i.e. we still mark the message processed)\\n    // To do this, we require that we have enough gas to process\\n    // and still return. We then delegate only the minimum processing gas.\\n    require(gasleft() >= PROCESS_GAS + RESERVE_GAS, \\\"!gas\\\");\\n    // get the message recipient\\n    address _recipient = _m.recipientAddress();\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    uint256 _maxCopy = 256;\\n    uint256 _gas = PROCESS_GAS;\\n    // allocate memory for returndata\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    bytes memory _calldata = abi.encodeWithSignature(\\n      \\\"handle(uint32,uint32,bytes32,bytes)\\\",\\n      _m.origin(),\\n      _m.nonce(),\\n      _m.sender(),\\n      _m.body().clone()\\n    );\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _recipient, // recipient\\n        0, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    // emit process results\\n    emit Process(_messageHash, _success, _returnData);\\n  }\\n}\\n\",\"keccak256\":\"0x9af2834eaabd0207563336f1f6162face8a59ef3cba1b64755c69e277d50bdca\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IRootManager} from \\\"../../interfaces/IRootManager.sol\\\";\\nimport {IHubConnector} from \\\"../../interfaces/IHubConnector.sol\\\";\\n\\nimport {SpokeConnector} from \\\"../SpokeConnector.sol\\\";\\n\\ncontract MainnetSpokeConnector is SpokeConnector, IHubConnector {\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas,\\n    uint256 _processGas,\\n    uint256 _reserveGas\\n  )\\n    SpokeConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorGas, _processGas, _reserveGas)\\n  {}\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice Sends a message over the amb\\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\\n   * @dev Get 'Base constructor arguments given twice' when trying to inherit\\n   */\\n  // TODO: make more opinionated (i.e. sendAggregateRoot)\\n  function sendMessage(bytes memory _data) external onlyRootManager {\\n    _sendMessage(_data);\\n    emit MessageSent(_data, msg.sender);\\n  }\\n\\n  // ============ Private fns ============\\n  /**\\n   * @dev Asserts the sender of a cross domain message. On mainnet all senders should be this\\n   */\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    return msg.sender == _expected;\\n  }\\n\\n  /**\\n   * @dev There are two times messages get \\\"sent\\\" from this connector:\\n   * 1. `RootManager` calls `sendMessage` during `propagate`\\n   * 2. Relayers call `send`, which calls `_sendMessage` to set the outbound root\\n   */\\n  function _sendMessage(bytes memory _data) internal override {\\n    // get the data (should be either the outbound or aggregate root, depending on sender)\\n    require(_data.length == 32, \\\"!length\\\");\\n    if (msg.sender == ROOT_MANAGER) {\\n      // update the aggregate root\\n      updateAggregateRoot(bytes32(_data));\\n      return;\\n    }\\n    // otherwise is relayer, update the outbound root on the root manager\\n    IRootManager(ROOT_MANAGER).setOutboundRoot(DOMAIN, bytes32(_data));\\n  }\\n\\n  /**\\n   * @dev The `RootManager` calls `.sendMessage` on all connectors, there is nothing on mainnet\\n   * that would be processing \\\"inbound messages\\\", so do nothing in this function\\n   */\\n  function _processMessage(bytes memory _data) internal override {}\\n}\\n\",\"keccak256\":\"0x4d126f252f5e08fc21ceb1a041178c3deec237a507aad2f142ee4b9f604fa323\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function (sent the message)\\n   */\\n  // TODO: should this be more specific, i.e. AggregateRootSent v OutboundRootSent ?\\n  event MessageSent(bytes data, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5265d81ad6e26308100e1c388be45df8d916daf450e68a592fde89d7c2c0e8bc\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\n/**\\n * @notice Each router extends the `XAppConnectionClient` contract. This contract\\n * allows an admin to call `setXAppConnectionManager` to update the underlying\\n * pointers to the messaging inboxes (Replicas) and outboxes (Homes).\\n *\\n * @dev This interface only contains the functions needed for the `XAppConnectionClient`\\n * will interface with.\\n */\\ninterface IConnectorManager {\\n  /**\\n   * @notice Get the local inbox contract from the xAppConnectionManager\\n   * @return The local inbox contract\\n   * @dev The local inbox contract is a SpokeConnector with AMBs, and a\\n   * Home contract with nomad\\n   */\\n  function home() external view returns (IOutbox);\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function isReplica(address _potentialReplica) external view returns (bool);\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xa2c9a88a7b76a89615fe199d8a78878e5deb8dd13b036a86b575d31966beab1a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IConnector} from \\\"./IConnector.sol\\\";\\n\\ninterface IHubConnector is IConnector {\\n  function sendMessage(bytes memory _data) external;\\n}\\n\",\"keccak256\":\"0xb302b9cd48c15cc308fb88a4539e8b8b9694e95c8e73fe31c4e20509ad1399b9\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @notice Interface for all contracts sending messages originating on their\\n * current domain.\\n *\\n * @dev These are the Home.sol interface methods used by the `Router`\\n * and exposed via `home()` on the `XAppConnectionClient`\\n */\\ninterface IOutbox {\\n  /**\\n   * @notice Emitted when a new message is added to an outbound message merkle root\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   * @return bytes32 The leaf added to the tree\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe6a213bd3c9e0c4dcf0e982cdef2a6a613a49b7bca3d6ad662c179e509de6c2b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to spoke domains\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function propagate() external;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on L1 to update the\\n   * latest outbound root\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function setOutboundRoot(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0x4ce8b03ca8b2293c53bd43410ff06b511f6a9ba53a298d3e3f7ea116cecc309c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  /**\\n   * @notice Inserts `_node` into merkle tree\\n   * @dev Reverts if tree is full\\n   * @param _node Element to insert into tree\\n   **/\\n  function insert(Tree storage _tree, bytes32 _node) internal {\\n    require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n    _tree.count += 1;\\n    uint256 size = _tree.count;\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      if ((size & 1) == 1) {\\n        _tree.branch[i] = _node;\\n        return;\\n      }\\n      _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n      size /= 2;\\n    }\\n    // As the loop should always end prematurely with the `return` statement,\\n    // this code should be unreachable. We assert `false` just to be safe.\\n    assert(false);\\n  }\\n\\n  /**\\n   * @notice Calculates and returns`_tree`'s current root given array of zero\\n   * hashes\\n   * @param _zeroes Array of zero hashes\\n   * @return _current Calculated root of `_tree`\\n   **/\\n  function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n    internal\\n    view\\n    returns (bytes32 _current)\\n  {\\n    uint256 _index = _tree.count;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _tree.branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculates and returns`_tree`'s current root\\n  function root(Tree storage _tree) internal view returns (bytes32) {\\n    return rootWithCtx(_tree, zeroHashes());\\n  }\\n\\n  /// @notice Returns array of TREE_DEPTH zero hashes\\n  /// @return _zeroes Array of TREE_DEPTH zero hashes\\n  function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\\n    _zeroes[0] = Z_0;\\n    _zeroes[1] = Z_1;\\n    _zeroes[2] = Z_2;\\n    _zeroes[3] = Z_3;\\n    _zeroes[4] = Z_4;\\n    _zeroes[5] = Z_5;\\n    _zeroes[6] = Z_6;\\n    _zeroes[7] = Z_7;\\n    _zeroes[8] = Z_8;\\n    _zeroes[9] = Z_9;\\n    _zeroes[10] = Z_10;\\n    _zeroes[11] = Z_11;\\n    _zeroes[12] = Z_12;\\n    _zeroes[13] = Z_13;\\n    _zeroes[14] = Z_14;\\n    _zeroes[15] = Z_15;\\n    _zeroes[16] = Z_16;\\n    _zeroes[17] = Z_17;\\n    _zeroes[18] = Z_18;\\n    _zeroes[19] = Z_19;\\n    _zeroes[20] = Z_20;\\n    _zeroes[21] = Z_21;\\n    _zeroes[22] = Z_22;\\n    _zeroes[23] = Z_23;\\n    _zeroes[24] = Z_24;\\n    _zeroes[25] = Z_25;\\n    _zeroes[26] = Z_26;\\n    _zeroes[27] = Z_27;\\n    _zeroes[28] = Z_28;\\n    _zeroes[29] = Z_29;\\n    _zeroes[30] = Z_30;\\n    _zeroes[31] = Z_31;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf\\n   * `_item`, a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    _current = _item;\\n\\n    for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _next));\\n      }\\n    }\\n  }\\n\\n  // keccak256 zero hashes\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x0000a6a0f65c9d18a1550fde89511bcd42f1ae3b3092b1b51d62d8f6010b85cf\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../shared/libraries/TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // Number of bytes in formatted message before `body` field\\n  uint256 internal constant PREFIX_LENGTH = 76;\\n\\n  /**\\n   * @notice Returns formatted (packed) message with provided fields\\n   * @param _originDomain Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes of message body\\n   * @return Formatted message\\n   **/\\n  function formatMessage(\\n    uint32 _originDomain,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destinationDomain,\\n    bytes32 _recipient,\\n    bytes memory _messageBody\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(_originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody);\\n  }\\n\\n  /**\\n   * @notice Returns leaf of formatted message with provided fields.\\n   * @param _origin Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce number\\n   * @param _destination Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _body Raw bytes of message body\\n   * @return Leaf (hash) of formatted message\\n   **/\\n  function messageHash(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bytes memory _body\\n  ) internal pure returns (bytes32) {\\n    return keccak256(formatMessage(_origin, _sender, _nonce, _destination, _recipient, _body));\\n  }\\n\\n  /// @notice Returns message's origin field\\n  function origin(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(0, 4));\\n  }\\n\\n  /// @notice Returns message's sender field\\n  function sender(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(4, 32);\\n  }\\n\\n  /// @notice Returns message's nonce field\\n  function nonce(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(36, 4));\\n  }\\n\\n  /// @notice Returns message's destination field\\n  function destination(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(40, 4));\\n  }\\n\\n  /// @notice Returns message's recipient field as bytes32\\n  function recipient(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(44, 32);\\n  }\\n\\n  /// @notice Returns message's recipient field as an address\\n  function recipientAddress(bytes29 _message) internal pure returns (address) {\\n    return TypeCasts.bytes32ToAddress(recipient(_message));\\n  }\\n\\n  /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n  function body(bytes29 _message) internal pure returns (bytes29) {\\n    return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n  }\\n\\n  function leaf(bytes29 _message) internal view returns (bytes32) {\\n    return\\n      messageHash(\\n        origin(_message),\\n        sender(_message),\\n        nonce(_message),\\n        destination(_message),\\n        recipient(_message),\\n        TypedMemView.clone(body(_message))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xa14f2f26f943a08b8666c2077ae7a04a7a26a27f1eb4badec42fb3a373c6a489\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __GAP;\\n}\\n\",\"keccak256\":\"0xf4c67a5db702cb9775ad3a0ed49bbe137e5a55b4000c507dd6fef3397f3607e3\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0xfb763d8c311e5972fd6e7d7334ce10cc3f5dbe8a922308b3c160bfb722109f63\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x818736bf6004223f78f8949c534c74f144b741f5b1ece635670f0fd9b2217344\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe3b9e398dff8870d5a597de93a9cb0aa139f27ed27c12bbe78c8ff60d85b0aaf\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162002d5738038062002d57833981016040819052620000359162000375565b87878787878787878787878787876200004e336200023a565b8563ffffffff16600003620000995760405162461bcd60e51b815260206004820152600c60248201526b32b6b83a3c903237b6b0b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b038316620000e55760405162461bcd60e51b815260206004820152601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b604482015260640162000090565b63ffffffff8087166080526001600160a01b0380861660a05284811660c05290861660e0528216156200011d576200011d8262000299565b80156200012f576200012f8162000302565b604080516001600160a01b0386811682528581166020830152841681830152905163ffffffff87811692908916917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f09181900360600190a350506001602655505050620cf8508310159050620001d75760405162461bcd60e51b815260206004820152600c60248201526b2170726f636573732067617360a01b604482015260640162000090565b613a988110156200021a5760405162461bcd60e51b815260206004820152600c60248201526b21726573657276652067617360a01b604482015260640162000090565b610100919091526101205250620004029c50505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b60045460408051918252602082018390527f34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511910160405180910390a1600455565b805163ffffffff811681146200035857600080fd5b919050565b80516001600160a01b03811681146200035857600080fd5b600080600080600080600080610100898b0312156200039357600080fd5b6200039e8962000343565b9750620003ae60208a0162000343565b9650620003be60408a016200035d565b9550620003ce60608a016200035d565b9450620003de60808a016200035d565b935060a0890151925060c0890151915060e089015190509295985092959890939650565b60805160a05160c05160e05161010051610120516128b86200049f600039600081816102840152610e6501526000818161052401528181610e860152610f0d01526000610248015260008181610381015281816107e40152818161113801526111790152600081816104fd01526105ad0152600081816103470152818161040f01528181610b6101528181610d6701526111a001526128b86000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063cf796c75116100b8578063db1b76591161007c578063db1b765914610546578063ee250e0614610559578063f38a267b14610562578063fa31de0114610585578063fd54b2281461059857600080fd5b8063cf796c75146104cc578063d1851c92146104d5578063d232c220146104e6578063d69f9d61146104f8578063d88beda21461051f57600080fd5b8063b46300ec116100ff578063b46300ec14610470578063b697f53114610478578063b95a20011461048b578063c5b350df146104b1578063cc394283146104b957600080fd5b80638da5cb5b146104335780639fa92f9d14610444578063b1f8100d1461044a578063b2f876431461045d57600080fd5b80635bd11efc116101b35780636a42b8f8116101825780636a42b8f8146103d65780636eb67a51146103df578063715018a6146103f257806382646a58146103fa5780638d3638f41461040d57600080fd5b80635bd11efc146103695780635f61e3ec1461037c5780636188af0e146103bb57806365eaf11b146103ce57600080fd5b80632bbd59ca116101fa5780632bbd59ca146102d95780633cf52ffb146103095780634ff746f6146103115780635190bc531461032657806352a9674b1461034257600080fd5b806306661abd1461022c578063141684161461024357806325e3beda1461027f578063272efc69146102a6575b600080fd5b6025545b6040519081526020015b60405180910390f35b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161023a565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102c96102b43660046121d8565b60296020526000908152604090205460ff1681565b604051901515815260200161023a565b6102fc6102e7366004612201565b602b6020526000908152604090205460ff1681565b60405161023a9190612230565b600254610230565b61032461031f3660046122fb565b6105a2565b005b6102c96103343660046121d8565b6001600160a01b0316301490565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b6103246103773660046121d8565b610648565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161023a565b6103246103c9366004612330565b61067f565b6102306106d5565b62093a80610230565b6103246103ed366004612201565b6106e6565b61032461071a565b6103246104083660046122fb565b6107d9565b7f000000000000000000000000000000000000000000000000000000000000000061026a565b6000546001600160a01b03166103a3565b306103a3565b6103246104583660046121d8565b61087a565b61032461046b3660046121d8565b61091f565b61032461099b565b6103246104863660046121d8565b6109d3565b61026a6104993660046123a9565b602a6020526000908152604090205463ffffffff1681565b610324610a52565b6003546103a3906001600160a01b031681565b61023060045481565b6001546001600160a01b03166103a3565b6000546001600160a01b0316156102c9565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102c96105543660046121d8565b610aad565b61023060275481565b6102c9610570366004612201565b60286020526000908152604090205460ff1681565b6102306105933660046123c4565b610ac2565b6025546102309081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461060c5760405162461bcd60e51b81526004016106039060208082526004908201526310a0a6a160e11b604082015260600190565b60405180910390fd5b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161063d929190612473565b60405180910390a150565b6000546001600160a01b03163314610673576040516311a8a1bb60e31b815260040160405180910390fd5b61067c81610c05565b50565b61069183805190602001208383610c6e565b6106c65760405162461bcd60e51b81526020600482015260066024820152652170726f766560d01b6044820152606401610603565b6106cf83610cf9565b50505050565b60006106e16005611040565b905090565b6000546001600160a01b03163314610711576040516311a8a1bb60e31b815260040160405180910390fd5b61067c81611053565b6000546001600160a01b03163314610745576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361076857604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261077a91906124b3565b11610798576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b0316156107c2576040516323295ef960e01b815260040160405180910390fd5b6001546107d7906001600160a01b0316611094565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108405760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b6044820152606401610603565b610849816110f3565b7fa69577a1e55dd0712044e7078b408c39fadff8b3e1b334b202ff17e70eda9fdc813360405161063d929190612473565b6000546001600160a01b031633146108a5576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b0382811691161480156108ca57506001600160a01b03811615155b156108e8576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361091657604051634a2fb73f60e11b815260040160405180910390fd5b61067c81611227565b6000546001600160a01b0316331461094a576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916905590519182527f384859c5ef5fafac31e8bc92ce7fb48b1f2c74c4dd5e212eb84ec202fa5d9fad910161063d565b60006109a76005611040565b6040516020016109b991815260200190565b6040516020818303038152906040529050610849816110f3565b6000546001600160a01b031633146109fe576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916600117905590519182527fd65eca5d561d3a4568c87b9b13ced4ab52a69edadfdfdb22d76bc595f36d7d87910161063d565b6001546001600160a01b03163314610a7d576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610a8f91906124b3565b116107c25760405163d39c12bb60e01b815260040160405180910390fd5b60006001600160a01b03821633145b92915050565b3360009081526029602052604081205460ff16610b105760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610603565b63ffffffff8085166000908152602a602052604090205416610b338160016124ca565b63ffffffff8681166000908152602a60205260408120805463ffffffff191693909216929092179055610b8a7f00000000000000000000000000000000000000000000000000000000000000003384898989611275565b80516020820120909150610b9f6005826112ad565b7f40f08ee347fc927ae45902edc87debb024aab1a311943731968607f603f2152f816001610bcc60255490565b610bd691906124b3565b610be06005611040565b85604051610bf194939291906124f2565b60405180910390a1925050505b9392505050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000858152602b602052604090205460ff166002811115610c9457610c9461221a565b14610cd75760405162461bcd60e51b8152602060048201526013602482015272214d6573736167655374617475732e4e6f6e6560681b6044820152606401610603565b5050506000908152602b60205260409020805460ff1916600190811790915590565b6000600260265403610d4d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610603565b60026026556000610d5e83826113ca565b905063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610d9662ffffff1983166113ee565b63ffffffff1614610dd85760405162461bcd60e51b815260206004820152600c60248201526b10b232b9ba34b730ba34b7b760a11b6044820152606401610603565b6000610de962ffffff198316611403565b905060016000828152602b602052604090205460ff166002811115610e1057610e1061221a565b14610e475760405162461bcd60e51b815260206004820152600760248201526610b83937bb32b760c91b6044820152606401610603565b6000818152602b60205260409020805460ff19166002179055610eaa7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612517565b5a1015610ee25760405162461bcd60e51b8152600401610603906020808252600490820152632167617360e01b604082015260600190565b6000610ef362ffffff19841661144c565b6040805161010080825261012082019092529192506000917f0000000000000000000000000000000000000000000000000000000000000000908390836020820181803683370190505090506000610f5062ffffff19891661145d565b610f5f62ffffff198a16611471565b610f6e62ffffff198b16611486565b610f8b610f8062ffffff198d1661149b565b62ffffff19166114c9565b604051602401610f9e949392919061252f565b60408051601f198184030181529190526020810180516001600160e01b031663ab2dc3f560e01b17815281519192506000918291828a88f198503d945083851115610fe7578394505b848252846000602084013e7fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe48878a846040516110259392919061255e565b60405180910390a15050600160265550949695505050505050565b6000610abc8261104e611512565b6119d3565b60045460408051918252602082018390527f34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511910160405180910390a1600455565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160201461112e5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610603565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361116f5761067c61116a8261257f565b611aa5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166378ffd0a17f00000000000000000000000000000000000000000000000000000000000000006111c88461257f565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6060868686868686604051602001611292969594939291906125a3565b60405160208183030381529060405290509695505050505050565b60016112bb602060026126e1565b6112c591906124b3565b82602001541061130a5760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19481d1c995948199d5b1b60821b6044820152606401610603565b600182602001600082825461131f9190612517565b9091555050602082015460005b60208110156113bc578160011660010361135b5782848260208110611353576113536126ed565b015550505050565b83816020811061136d5761136d6126ed565b015460408051602081019290925281018490526060016040516020818303038152906040528051906020012092506002826113a89190612703565b9150806113b481612725565b91505061132c565b506113c561273e565b505050565b8151600090602084016113e564ffffffffff85168284611ae7565b95945050505050565b6000610abc62ffffff19831660286004611b2e565b6000806114198360781c6001600160601b031690565b6001600160601b0316905060006114398460181c6001600160601b031690565b6001600160601b03169091209392505050565b6000610abc61145a83611b5e565b90565b6000610abc62ffffff198316826004611b2e565b6000610abc62ffffff19831660246004611b2e565b6000610abc62ffffff19831660046020611b6f565b6000610abc604c6114b981601886901c6001600160601b03166124b3565b62ffffff19851691906000611ccb565b60606000806114e18460181c6001600160601b031690565b6001600160601b0316905060405191508192506115018483602001611d47565b508181016020016040529052919050565b61151a6121b9565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015611a9d57600182821c166000868360208110611a0057611a006126ed565b0154905081600103611a3d576040805160208101839052908101869052606001604051602081830303815290604052805190602001209450611a88565b84868460208110611a5057611a506126ed565b6020020151604051602001611a6f929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50508080611a9590612725565b9150506119dd565b505092915050565b6027546040805183815260208101929092527fd93b9a9123395d96a15a0cff10295f286f99a0962c9adb978bad3ab6aaea7213910160405180910390a1602755565b600080611af48385612517565b9050604051811115611b04575060005b80600003611b195762ffffff19915050610bfe565b5050606092831b9190911790911b1760181b90565b6000611b3b826020612754565b611b46906008612777565b60ff16611b54858585611b6f565b901c949350505050565b6000610abc62ffffff198316602c60205b60008160ff16600003611b8457506000610bfe565b611b978460181c6001600160601b031690565b6001600160601b0316611bad60ff841685612517565b1115611c1157611bf8611bc98560781c6001600160601b031690565b6001600160601b0316611be58660181c6001600160601b031690565b6001600160601b0316858560ff16611ea8565b60405162461bcd60e51b81526004016106039190612798565b60208260ff161115611c8b5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610603565b600882026000611ca48660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600080611ce18660781c6001600160601b031690565b6001600160601b03169050611cf586611f16565b84611d008784612517565b611d0a9190612517565b1115611d1d5762ffffff19915050611d3f565b611d278582612517565b9050611d3b8364ffffffffff168286611ae7565b9150505b949350505050565b600062ffffff1980841603611daf5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610603565b611db883611f4f565b611e185760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610603565b6000611e2d8460181c6001600160601b031690565b6001600160601b031690506000611e4d8560781c6001600160601b031690565b6001600160601b031690506000604051905084811115611e6d5760206060fd5b8285848460045afa50611e9e611e838760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b9695505050505050565b60606000611eb586611f8c565b9150506000611ec386611f8c565b9150506000611ed186611f8c565b9150506000611edf86611f8c565b91505083838383604051602001611ef994939291906127ab565b604051602081830303815290604052945050505050949350505050565b6000611f2b8260181c6001600160601b031690565b611f3e8360781c6001600160601b031690565b016001600160601b03169050919050565b6000611f5b8260d81c90565b64ffffffffff1664ffffffffff03611f7557506000919050565b6000611f8083611f16565b60405110199392505050565b600080601f5b600f8160ff161115611fe1576000611fab826008612777565b60ff1685901c9050611fbc8161203a565b61ffff16841793508160ff16601014611fd757601084901b93505b5060001901611f92565b50600f5b60ff8160ff161015612034576000611ffe826008612777565b60ff1685901c905061200f8161203a565b61ffff16831792508160ff1660001461202a57601083901b92505b5060001901611fe5565b50915091565b600061204c60048360ff16901c61206c565b60ff1661ffff919091161760081b6120638261206c565b60ff1617919050565b600060f08083179060ff821690036120875750603092915050565b8060ff1660f10361209b5750603192915050565b8060ff1660f2036120af5750603292915050565b8060ff1660f3036120c35750603392915050565b8060ff1660f4036120d75750603492915050565b8060ff1660f5036120eb5750603592915050565b8060ff1660f6036120ff5750603692915050565b8060ff1660f7036121135750603792915050565b8060ff1660f8036121275750603892915050565b8060ff1660f90361213b5750603992915050565b8060ff1660fa0361214f5750606192915050565b8060ff1660fb036121635750606292915050565b8060ff1660fc036121775750606392915050565b8060ff1660fd0361218b5750606492915050565b8060ff1660fe0361219f5750606592915050565b8060ff1660ff036121b35750606692915050565b50919050565b6040518061040001604052806020906020820280368337509192915050565b6000602082840312156121ea57600080fd5b81356001600160a01b0381168114610bfe57600080fd5b60006020828403121561221357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061225257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261227f57600080fd5b813567ffffffffffffffff8082111561229a5761229a612258565b604051601f8301601f19908116603f011681019082821181831017156122c2576122c2612258565b816040528381528660208588010111156122db57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561230d57600080fd5b813567ffffffffffffffff81111561232457600080fd5b611d3f8482850161226e565b6000806000610440848603121561234657600080fd5b833567ffffffffffffffff81111561235d57600080fd5b6123698682870161226e565b93505061042084018581111561237e57600080fd5b60208501925080359150509250925092565b803563ffffffff811681146123a457600080fd5b919050565b6000602082840312156123bb57600080fd5b610bfe82612390565b6000806000606084860312156123d957600080fd5b6123e284612390565b925060208401359150604084013567ffffffffffffffff81111561240557600080fd5b6124118682870161226e565b9150509250925092565b60005b8381101561243657818101518382015260200161241e565b838111156106cf5750506000910152565b6000815180845261245f81602086016020860161241b565b601f01601f19169290920160200192915050565b6040815260006124866040830185612447565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156124c5576124c561249d565b500390565b600063ffffffff8083168185168083038211156124e9576124e961249d565b01949350505050565b848152836020820152826040820152608060608201526000611e9e6080830184612447565b6000821982111561252a5761252a61249d565b500190565b600063ffffffff808716835280861660208401525083604083015260806060830152611e9e6080830184612447565b83815282151560208201526060604082015260006113e56060830184612447565b805160208083015191908110156121b35760001960209190910360031b1b16919050565b600063ffffffff60e01b808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c83015282516125eb81604c85016020870161241b565b91909101604c01979650505050505050565b600181815b8085111561263857816000190482111561261e5761261e61249d565b8085161561262b57918102915b93841c9390800290612602565b509250929050565b60008261264f57506001610abc565b8161265c57506000610abc565b8160018114612672576002811461267c57612698565b6001915050610abc565b60ff84111561268d5761268d61249d565b50506001821b610abc565b5060208310610133831016604e8410600b84101617156126bb575081810a610abc565b6126c583836125fd565b80600019048211156126d9576126d961249d565b029392505050565b6000610bfe8383612640565b634e487b7160e01b600052603260045260246000fd5b60008261272057634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016127375761273761249d565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600060ff821660ff84168082101561276e5761276e61249d565b90039392505050565b600060ff821660ff84168160ff04811182151516156126d9576126d961249d565b602081526000610bfe6020830184612447565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201611e9e56fea26469706673582212206cd5f2e71913b52f48b3210b908d15134060e704be320524d517ccd5874fee8c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063cf796c75116100b8578063db1b76591161007c578063db1b765914610546578063ee250e0614610559578063f38a267b14610562578063fa31de0114610585578063fd54b2281461059857600080fd5b8063cf796c75146104cc578063d1851c92146104d5578063d232c220146104e6578063d69f9d61146104f8578063d88beda21461051f57600080fd5b8063b46300ec116100ff578063b46300ec14610470578063b697f53114610478578063b95a20011461048b578063c5b350df146104b1578063cc394283146104b957600080fd5b80638da5cb5b146104335780639fa92f9d14610444578063b1f8100d1461044a578063b2f876431461045d57600080fd5b80635bd11efc116101b35780636a42b8f8116101825780636a42b8f8146103d65780636eb67a51146103df578063715018a6146103f257806382646a58146103fa5780638d3638f41461040d57600080fd5b80635bd11efc146103695780635f61e3ec1461037c5780636188af0e146103bb57806365eaf11b146103ce57600080fd5b80632bbd59ca116101fa5780632bbd59ca146102d95780633cf52ffb146103095780634ff746f6146103115780635190bc531461032657806352a9674b1461034257600080fd5b806306661abd1461022c578063141684161461024357806325e3beda1461027f578063272efc69146102a6575b600080fd5b6025545b6040519081526020015b60405180910390f35b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161023a565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102c96102b43660046121d8565b60296020526000908152604090205460ff1681565b604051901515815260200161023a565b6102fc6102e7366004612201565b602b6020526000908152604090205460ff1681565b60405161023a9190612230565b600254610230565b61032461031f3660046122fb565b6105a2565b005b6102c96103343660046121d8565b6001600160a01b0316301490565b61026a7f000000000000000000000000000000000000000000000000000000000000000081565b6103246103773660046121d8565b610648565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161023a565b6103246103c9366004612330565b61067f565b6102306106d5565b62093a80610230565b6103246103ed366004612201565b6106e6565b61032461071a565b6103246104083660046122fb565b6107d9565b7f000000000000000000000000000000000000000000000000000000000000000061026a565b6000546001600160a01b03166103a3565b306103a3565b6103246104583660046121d8565b61087a565b61032461046b3660046121d8565b61091f565b61032461099b565b6103246104863660046121d8565b6109d3565b61026a6104993660046123a9565b602a6020526000908152604090205463ffffffff1681565b610324610a52565b6003546103a3906001600160a01b031681565b61023060045481565b6001546001600160a01b03166103a3565b6000546001600160a01b0316156102c9565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102c96105543660046121d8565b610aad565b61023060275481565b6102c9610570366004612201565b60286020526000908152604090205460ff1681565b6102306105933660046123c4565b610ac2565b6025546102309081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461060c5760405162461bcd60e51b81526004016106039060208082526004908201526310a0a6a160e11b604082015260600190565b60405180910390fd5b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161063d929190612473565b60405180910390a150565b6000546001600160a01b03163314610673576040516311a8a1bb60e31b815260040160405180910390fd5b61067c81610c05565b50565b61069183805190602001208383610c6e565b6106c65760405162461bcd60e51b81526020600482015260066024820152652170726f766560d01b6044820152606401610603565b6106cf83610cf9565b50505050565b60006106e16005611040565b905090565b6000546001600160a01b03163314610711576040516311a8a1bb60e31b815260040160405180910390fd5b61067c81611053565b6000546001600160a01b03163314610745576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361076857604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261077a91906124b3565b11610798576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b0316156107c2576040516323295ef960e01b815260040160405180910390fd5b6001546107d7906001600160a01b0316611094565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108405760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b6044820152606401610603565b610849816110f3565b7fa69577a1e55dd0712044e7078b408c39fadff8b3e1b334b202ff17e70eda9fdc813360405161063d929190612473565b6000546001600160a01b031633146108a5576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b0382811691161480156108ca57506001600160a01b03811615155b156108e8576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361091657604051634a2fb73f60e11b815260040160405180910390fd5b61067c81611227565b6000546001600160a01b0316331461094a576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916905590519182527f384859c5ef5fafac31e8bc92ce7fb48b1f2c74c4dd5e212eb84ec202fa5d9fad910161063d565b60006109a76005611040565b6040516020016109b991815260200190565b6040516020818303038152906040529050610849816110f3565b6000546001600160a01b031633146109fe576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff1916600117905590519182527fd65eca5d561d3a4568c87b9b13ced4ab52a69edadfdfdb22d76bc595f36d7d87910161063d565b6001546001600160a01b03163314610a7d576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610a8f91906124b3565b116107c25760405163d39c12bb60e01b815260040160405180910390fd5b60006001600160a01b03821633145b92915050565b3360009081526029602052604081205460ff16610b105760405162461bcd60e51b815260206004820152600c60248201526b085dda1a5d195b1a5cdd195960a21b6044820152606401610603565b63ffffffff8085166000908152602a602052604090205416610b338160016124ca565b63ffffffff8681166000908152602a60205260408120805463ffffffff191693909216929092179055610b8a7f00000000000000000000000000000000000000000000000000000000000000003384898989611275565b80516020820120909150610b9f6005826112ad565b7f40f08ee347fc927ae45902edc87debb024aab1a311943731968607f603f2152f816001610bcc60255490565b610bd691906124b3565b610be06005611040565b85604051610bf194939291906124f2565b60405180910390a1925050505b9392505050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000858152602b602052604090205460ff166002811115610c9457610c9461221a565b14610cd75760405162461bcd60e51b8152602060048201526013602482015272214d6573736167655374617475732e4e6f6e6560681b6044820152606401610603565b5050506000908152602b60205260409020805460ff1916600190811790915590565b6000600260265403610d4d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610603565b60026026556000610d5e83826113ca565b905063ffffffff7f000000000000000000000000000000000000000000000000000000000000000016610d9662ffffff1983166113ee565b63ffffffff1614610dd85760405162461bcd60e51b815260206004820152600c60248201526b10b232b9ba34b730ba34b7b760a11b6044820152606401610603565b6000610de962ffffff198316611403565b905060016000828152602b602052604090205460ff166002811115610e1057610e1061221a565b14610e475760405162461bcd60e51b815260206004820152600760248201526610b83937bb32b760c91b6044820152606401610603565b6000818152602b60205260409020805460ff19166002179055610eaa7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612517565b5a1015610ee25760405162461bcd60e51b8152600401610603906020808252600490820152632167617360e01b604082015260600190565b6000610ef362ffffff19841661144c565b6040805161010080825261012082019092529192506000917f0000000000000000000000000000000000000000000000000000000000000000908390836020820181803683370190505090506000610f5062ffffff19891661145d565b610f5f62ffffff198a16611471565b610f6e62ffffff198b16611486565b610f8b610f8062ffffff198d1661149b565b62ffffff19166114c9565b604051602401610f9e949392919061252f565b60408051601f198184030181529190526020810180516001600160e01b031663ab2dc3f560e01b17815281519192506000918291828a88f198503d945083851115610fe7578394505b848252846000602084013e7fd42de95a9b26f1be134c8ecce389dc4fcfa18753d01661b7b361233569e8fe48878a846040516110259392919061255e565b60405180910390a15050600160265550949695505050505050565b6000610abc8261104e611512565b6119d3565b60045460408051918252602082018390527f34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511910160405180910390a1600455565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805160201461112e5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b6044820152606401610603565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361116f5761067c61116a8261257f565b611aa5565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166378ffd0a17f00000000000000000000000000000000000000000000000000000000000000006111c88461257f565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b6060868686868686604051602001611292969594939291906125a3565b60405160208183030381529060405290509695505050505050565b60016112bb602060026126e1565b6112c591906124b3565b82602001541061130a5760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19481d1c995948199d5b1b60821b6044820152606401610603565b600182602001600082825461131f9190612517565b9091555050602082015460005b60208110156113bc578160011660010361135b5782848260208110611353576113536126ed565b015550505050565b83816020811061136d5761136d6126ed565b015460408051602081019290925281018490526060016040516020818303038152906040528051906020012092506002826113a89190612703565b9150806113b481612725565b91505061132c565b506113c561273e565b505050565b8151600090602084016113e564ffffffffff85168284611ae7565b95945050505050565b6000610abc62ffffff19831660286004611b2e565b6000806114198360781c6001600160601b031690565b6001600160601b0316905060006114398460181c6001600160601b031690565b6001600160601b03169091209392505050565b6000610abc61145a83611b5e565b90565b6000610abc62ffffff198316826004611b2e565b6000610abc62ffffff19831660246004611b2e565b6000610abc62ffffff19831660046020611b6f565b6000610abc604c6114b981601886901c6001600160601b03166124b3565b62ffffff19851691906000611ccb565b60606000806114e18460181c6001600160601b031690565b6001600160601b0316905060405191508192506115018483602001611d47565b508181016020016040529052919050565b61151a6121b9565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015611a9d57600182821c166000868360208110611a0057611a006126ed565b0154905081600103611a3d576040805160208101839052908101869052606001604051602081830303815290604052805190602001209450611a88565b84868460208110611a5057611a506126ed565b6020020151604051602001611a6f929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b50508080611a9590612725565b9150506119dd565b505092915050565b6027546040805183815260208101929092527fd93b9a9123395d96a15a0cff10295f286f99a0962c9adb978bad3ab6aaea7213910160405180910390a1602755565b600080611af48385612517565b9050604051811115611b04575060005b80600003611b195762ffffff19915050610bfe565b5050606092831b9190911790911b1760181b90565b6000611b3b826020612754565b611b46906008612777565b60ff16611b54858585611b6f565b901c949350505050565b6000610abc62ffffff198316602c60205b60008160ff16600003611b8457506000610bfe565b611b978460181c6001600160601b031690565b6001600160601b0316611bad60ff841685612517565b1115611c1157611bf8611bc98560781c6001600160601b031690565b6001600160601b0316611be58660181c6001600160601b031690565b6001600160601b0316858560ff16611ea8565b60405162461bcd60e51b81526004016106039190612798565b60208260ff161115611c8b5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610603565b600882026000611ca48660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b600080611ce18660781c6001600160601b031690565b6001600160601b03169050611cf586611f16565b84611d008784612517565b611d0a9190612517565b1115611d1d5762ffffff19915050611d3f565b611d278582612517565b9050611d3b8364ffffffffff168286611ae7565b9150505b949350505050565b600062ffffff1980841603611daf5760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610603565b611db883611f4f565b611e185760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610603565b6000611e2d8460181c6001600160601b031690565b6001600160601b031690506000611e4d8560781c6001600160601b031690565b6001600160601b031690506000604051905084811115611e6d5760206060fd5b8285848460045afa50611e9e611e838760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b9695505050505050565b60606000611eb586611f8c565b9150506000611ec386611f8c565b9150506000611ed186611f8c565b9150506000611edf86611f8c565b91505083838383604051602001611ef994939291906127ab565b604051602081830303815290604052945050505050949350505050565b6000611f2b8260181c6001600160601b031690565b611f3e8360781c6001600160601b031690565b016001600160601b03169050919050565b6000611f5b8260d81c90565b64ffffffffff1664ffffffffff03611f7557506000919050565b6000611f8083611f16565b60405110199392505050565b600080601f5b600f8160ff161115611fe1576000611fab826008612777565b60ff1685901c9050611fbc8161203a565b61ffff16841793508160ff16601014611fd757601084901b93505b5060001901611f92565b50600f5b60ff8160ff161015612034576000611ffe826008612777565b60ff1685901c905061200f8161203a565b61ffff16831792508160ff1660001461202a57601083901b92505b5060001901611fe5565b50915091565b600061204c60048360ff16901c61206c565b60ff1661ffff919091161760081b6120638261206c565b60ff1617919050565b600060f08083179060ff821690036120875750603092915050565b8060ff1660f10361209b5750603192915050565b8060ff1660f2036120af5750603292915050565b8060ff1660f3036120c35750603392915050565b8060ff1660f4036120d75750603492915050565b8060ff1660f5036120eb5750603592915050565b8060ff1660f6036120ff5750603692915050565b8060ff1660f7036121135750603792915050565b8060ff1660f8036121275750603892915050565b8060ff1660f90361213b5750603992915050565b8060ff1660fa0361214f5750606192915050565b8060ff1660fb036121635750606292915050565b8060ff1660fc036121775750606392915050565b8060ff1660fd0361218b5750606492915050565b8060ff1660fe0361219f5750606592915050565b8060ff1660ff036121b35750606692915050565b50919050565b6040518061040001604052806020906020820280368337509192915050565b6000602082840312156121ea57600080fd5b81356001600160a01b0381168114610bfe57600080fd5b60006020828403121561221357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061225257634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261227f57600080fd5b813567ffffffffffffffff8082111561229a5761229a612258565b604051601f8301601f19908116603f011681019082821181831017156122c2576122c2612258565b816040528381528660208588010111156122db57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561230d57600080fd5b813567ffffffffffffffff81111561232457600080fd5b611d3f8482850161226e565b6000806000610440848603121561234657600080fd5b833567ffffffffffffffff81111561235d57600080fd5b6123698682870161226e565b93505061042084018581111561237e57600080fd5b60208501925080359150509250925092565b803563ffffffff811681146123a457600080fd5b919050565b6000602082840312156123bb57600080fd5b610bfe82612390565b6000806000606084860312156123d957600080fd5b6123e284612390565b925060208401359150604084013567ffffffffffffffff81111561240557600080fd5b6124118682870161226e565b9150509250925092565b60005b8381101561243657818101518382015260200161241e565b838111156106cf5750506000910152565b6000815180845261245f81602086016020860161241b565b601f01601f19169290920160200192915050565b6040815260006124866040830185612447565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156124c5576124c561249d565b500390565b600063ffffffff8083168185168083038211156124e9576124e961249d565b01949350505050565b848152836020820152826040820152608060608201526000611e9e6080830184612447565b6000821982111561252a5761252a61249d565b500190565b600063ffffffff808716835280861660208401525083604083015260806060830152611e9e6080830184612447565b83815282151560208201526060604082015260006113e56060830184612447565b805160208083015191908110156121b35760001960209190910360031b1b16919050565b600063ffffffff60e01b808960e01b168352876004840152808760e01b166024840152808660e01b1660288401525083602c83015282516125eb81604c85016020870161241b565b91909101604c01979650505050505050565b600181815b8085111561263857816000190482111561261e5761261e61249d565b8085161561262b57918102915b93841c9390800290612602565b509250929050565b60008261264f57506001610abc565b8161265c57506000610abc565b8160018114612672576002811461267c57612698565b6001915050610abc565b60ff84111561268d5761268d61249d565b50506001821b610abc565b5060208310610133831016604e8410600b84101617156126bb575081810a610abc565b6126c583836125fd565b80600019048211156126d9576126d961249d565b029392505050565b6000610bfe8383612640565b634e487b7160e01b600052603260045260246000fd5b60008261272057634e487b7160e01b600052601260045260246000fd5b500490565b6000600182016127375761273761249d565b5060010190565b634e487b7160e01b600052600160045260246000fd5b600060ff821660ff84168082101561276e5761276e61249d565b90039392505050565b600060ff821660ff84168160ff04811182151516156126d9576126d961249d565b602081526000610bfe6020830184612447565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d8201611e9e56fea26469706673582212206cd5f2e71913b52f48b3210b908d15134060e704be320524d517ccd5874fee8c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addSender(address)": {
        "details": "Only whitelisted routers can call `dispatch`"
      },
      "dispatch(uint32,bytes32,bytes)": {
        "details": "The root of this tree will eventually be dispatched to mainnet via `send`. On mainnet (the \"hub\"), it will be combined into a single aggregate root by RootManager (along with outbound roots from other chains). This aggregate root will be redistributed to all destination chains."
      },
      "home()": {
        "details": "The local inbox contract is a SpokeConnector with AMBs, and a Home contract with nomad",
        "returns": {
          "_0": "The local inbox contract"
        }
      },
      "isReplica(address)": {
        "returns": {
          "_0": "True if _potentialReplica is an enrolled Replica"
        }
      },
      "processMessage(bytes)": {
        "details": "This is called by AMBs to process messages originating from mirror connector"
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "details": "Intended to be called by the relayer at specific intervals during runtime."
      },
      "removeSender(address)": {
        "details": "Only whitelisted routers can call `dispatch`"
      },
      "sendMessage(bytes)": {
        "details": "This is called by the root manager *only* on mainnet to propagate the aggregate rootGet 'Base constructor arguments given twice' when trying to inherit"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MessageProcessed(bytes,address)": {
        "notice": "Emitted whenever a message is successfully received over an AMB"
      },
      "MessageSent(bytes,address)": {
        "notice": "Emitted whenever a message is successfully sent over an AMB"
      }
    },
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "MIRROR_DOMAIN()": {
        "notice": "The domain of the corresponding messaging (i.e. Connector) contract."
      },
      "PROCESS_GAS()": {
        "notice": "Minimum gas for processing a received message (reserved for handle)"
      },
      "RESERVE_GAS()": {
        "notice": "Reserved gas (to ensure tx completes in case message processing runs out)"
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addSender(address)": {
        "notice": "Adds a sender to the whitelist"
      },
      "aggregateRoot()": {
        "notice": "This tracks the root of the tree containing outbound roots from all other supported domains"
      },
      "count()": {
        "notice": "Returns the number of inserted leaves in the tree (current index)"
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "dispatch(uint32,bytes32,bytes)": {
        "notice": "This function adds transfers to the outbound transfer merkle tree."
      },
      "home()": {
        "notice": "Get the local inbox contract from the xAppConnectionManager"
      },
      "isReplica(address)": {
        "notice": "Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager"
      },
      "localDomain()": {
        "notice": "This provides the implementation for what is defined in the ConnectorManager to avoid storing the domain redundantly"
      },
      "messages(bytes32)": {
        "notice": "Mapping of message leaves to MessageStatus, keyed on leaf"
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "mirrorGas()": {
        "notice": "Gas costs forwarded to the `processMessage` call on the mirror domain"
      },
      "nonces(uint32)": {
        "notice": "domain => next available nonce for the domain"
      },
      "outboundRoot()": {
        "notice": "This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages)"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processMessage(bytes)": {
        "notice": "Processes a message received by an AMB"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proveAndProcess(bytes,bytes32[32],uint256)": {
        "notice": "Must be able to call the `handle` function on the BridgeRouter contract. This is called on the destination domain to handle incoming messages."
      },
      "provenRoots(bytes32)": {
        "notice": "This tracks whether the root has been proven to exist within the given aggregate root"
      },
      "removeSender(address)": {
        "notice": "Removes a sender from the whitelist"
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "send()": {
        "notice": "This returns the root of all messages with the origin domain as this domain (i.e. all outbound messages)"
      },
      "sendMessage(bytes)": {
        "notice": "Sends a message over the amb"
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "setMirrorGas(uint256)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "verifySender(address)": {
        "notice": "Checks the cross domain sender for a given address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36166,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 36168,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 36170,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 29620,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 29623,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "mirrorGas",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 29136,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "tree",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Tree)34952_storage"
      },
      {
        "astId": 2887,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "_status",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 30178,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "aggregateRoot",
        "offset": 0,
        "slot": "39",
        "type": "t_bytes32"
      },
      {
        "astId": 30183,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "provenRoots",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 30188,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "whitelistedSenders",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 30193,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "nonces",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 30199,
        "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
        "label": "messages",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_bytes32,t_enum(MessageStatus)30169)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)32_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[32]",
        "numberOfBytes": "1024"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(MessageStatus)30169": {
        "encoding": "inplace",
        "label": "enum SpokeConnector.MessageStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_enum(MessageStatus)30169)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum SpokeConnector.MessageStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(MessageStatus)30169"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Tree)34952_storage": {
        "encoding": "inplace",
        "label": "struct MerkleLib.Tree",
        "members": [
          {
            "astId": 34949,
            "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
            "label": "branch",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)32_storage"
          },
          {
            "astId": 34951,
            "contract": "contracts/messaging/connectors/mainnet/MainnetSpokeConnector.sol:MainnetSpokeConnector",
            "label": "count",
            "offset": 0,
            "slot": "32",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}