schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type stagingmumbai_AggregateRoot {
  id: ID!
  root: stagingmumbai_Bytes!
}

input stagingmumbai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AggregateRoot_orderBy {
  id
  root
}

type stagingmumbai_Asset {
  id: ID!
  key: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalDomain: BigInt
  adoptedAsset: stagingmumbai_Bytes
  localAsset: stagingmumbai_Bytes
  blockNumber: BigInt
}

type stagingmumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingmumbai_Router!
  asset: stagingmumbai_Asset!
}

input stagingmumbai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingmumbai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input stagingmumbai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingmumbai_Bytes
  key_not: stagingmumbai_Bytes
  key_in: [stagingmumbai_Bytes!]
  key_not_in: [stagingmumbai_Bytes!]
  key_contains: stagingmumbai_Bytes
  key_not_contains: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: stagingmumbai_Bytes
  adoptedAsset_not: stagingmumbai_Bytes
  adoptedAsset_in: [stagingmumbai_Bytes!]
  adoptedAsset_not_in: [stagingmumbai_Bytes!]
  adoptedAsset_contains: stagingmumbai_Bytes
  adoptedAsset_not_contains: stagingmumbai_Bytes
  localAsset: stagingmumbai_Bytes
  localAsset_not: stagingmumbai_Bytes
  localAsset_in: [stagingmumbai_Bytes!]
  localAsset_not_in: [stagingmumbai_Bytes!]
  localAsset_contains: stagingmumbai_Bytes
  localAsset_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar stagingmumbai_BigDecimal

scalar BigInt

input stagingmumbai_BlockChangedFilter {
  number_gte: Int!
}

input stagingmumbai_Block_height {
  hash: stagingmumbai_Bytes
  number: Int
  number_gte: Int
}

scalar stagingmumbai_Bytes

type stagingmumbai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: stagingmumbai_Bytes
  rootManager: stagingmumbai_Bytes
  mirrorConnector: stagingmumbai_Bytes
}

input stagingmumbai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmumbai_Bytes
  amb_not: stagingmumbai_Bytes
  amb_in: [stagingmumbai_Bytes!]
  amb_not_in: [stagingmumbai_Bytes!]
  amb_contains: stagingmumbai_Bytes
  amb_not_contains: stagingmumbai_Bytes
  rootManager: stagingmumbai_Bytes
  rootManager_not: stagingmumbai_Bytes
  rootManager_in: [stagingmumbai_Bytes!]
  rootManager_not_in: [stagingmumbai_Bytes!]
  rootManager_contains: stagingmumbai_Bytes
  rootManager_not_contains: stagingmumbai_Bytes
  mirrorConnector: stagingmumbai_Bytes
  mirrorConnector_not: stagingmumbai_Bytes
  mirrorConnector_in: [stagingmumbai_Bytes!]
  mirrorConnector_not_in: [stagingmumbai_Bytes!]
  mirrorConnector_contains: stagingmumbai_Bytes
  mirrorConnector_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmumbai_DestinationMessage {
  id: ID!
  leaf: stagingmumbai_Bytes
  processed: Boolean
  returnData: stagingmumbai_Bytes
  success: Boolean
  transactionHash: stagingmumbai_Bytes
  blockNumber: BigInt
}

input stagingmumbai_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: stagingmumbai_Bytes
  leaf_not: stagingmumbai_Bytes
  leaf_in: [stagingmumbai_Bytes!]
  leaf_not_in: [stagingmumbai_Bytes!]
  leaf_contains: stagingmumbai_Bytes
  leaf_not_contains: stagingmumbai_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: stagingmumbai_Bytes
  returnData_not: stagingmumbai_Bytes
  returnData_in: [stagingmumbai_Bytes!]
  returnData_not_in: [stagingmumbai_Bytes!]
  returnData_contains: stagingmumbai_Bytes
  returnData_not_contains: stagingmumbai_Bytes
  success: Boolean
  success_not: Boolean
  success_in: [Boolean!]
  success_not_in: [Boolean!]
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  success
  transactionHash
  blockNumber
}

type stagingmumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  status: stagingmumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_Router_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_Router_filter): [stagingmumbai_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  receiveLocal: Boolean
  callData: stagingmumbai_Bytes
  slippage: BigInt
  originSender: stagingmumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingmumbai_Bytes
  asset: stagingmumbai_Asset
  executedCaller: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input stagingmumbai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingmumbai_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  delegate_not: stagingmumbai_Bytes
  delegate_in: [stagingmumbai_Bytes!]
  delegate_not_in: [stagingmumbai_Bytes!]
  delegate_contains: stagingmumbai_Bytes
  delegate_not_contains: stagingmumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingmumbai_Bytes
  originSender_not: stagingmumbai_Bytes
  originSender_in: [stagingmumbai_Bytes!]
  originSender_not_in: [stagingmumbai_Bytes!]
  originSender_contains: stagingmumbai_Bytes
  originSender_not_contains: stagingmumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  executedCaller: stagingmumbai_Bytes
  executedCaller_not: stagingmumbai_Bytes
  executedCaller_in: [stagingmumbai_Bytes!]
  executedCaller_not_in: [stagingmumbai_Bytes!]
  executedCaller_contains: stagingmumbai_Bytes
  executedCaller_not_contains: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
  executedTransactionHash_not: stagingmumbai_Bytes
  executedTransactionHash_in: [stagingmumbai_Bytes!]
  executedTransactionHash_not_in: [stagingmumbai_Bytes!]
  executedTransactionHash_contains: stagingmumbai_Bytes
  executedTransactionHash_not_contains: stagingmumbai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: stagingmumbai_Bytes
  reconciledCaller_not: stagingmumbai_Bytes
  reconciledCaller_in: [stagingmumbai_Bytes!]
  reconciledCaller_not_in: [stagingmumbai_Bytes!]
  reconciledCaller_contains: stagingmumbai_Bytes
  reconciledCaller_not_contains: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
  reconciledTransactionHash_not: stagingmumbai_Bytes
  reconciledTransactionHash_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_not_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_contains: stagingmumbai_Bytes
  reconciledTransactionHash_not_contains: stagingmumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingmumbai_OrderDirection {
  asc
  desc
}

type stagingmumbai_OriginMessage {
  id: ID!
  transferId: stagingmumbai_Bytes
  destinationDomain: BigInt
  leaf: stagingmumbai_Bytes
  index: BigInt
  root: stagingmumbai_Bytes
  message: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  blockNumber: BigInt
  rootCount: stagingmumbai_RootCount
}

input stagingmumbai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingmumbai_Bytes
  leaf_not: stagingmumbai_Bytes
  leaf_in: [stagingmumbai_Bytes!]
  leaf_not_in: [stagingmumbai_Bytes!]
  leaf_contains: stagingmumbai_Bytes
  leaf_not_contains: stagingmumbai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  message: stagingmumbai_Bytes
  message_not: stagingmumbai_Bytes
  message_in: [stagingmumbai_Bytes!]
  message_not_in: [stagingmumbai_Bytes!]
  message_contains: stagingmumbai_Bytes
  message_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: stagingmumbai_RootCount_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
  blockNumber
  rootCount
}

type stagingmumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  status: stagingmumbai_TransferStatus
  messageHash: stagingmumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  receiveLocal: Boolean
  callData: stagingmumbai_Bytes
  slippage: BigInt
  originSender: stagingmumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingmumbai_Bytes
  asset: stagingmumbai_Asset
  message: stagingmumbai_OriginMessage
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmumbai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
  messageHash: stagingmumbai_Bytes
  messageHash_not: stagingmumbai_Bytes
  messageHash_in: [stagingmumbai_Bytes!]
  messageHash_not_in: [stagingmumbai_Bytes!]
  messageHash_contains: stagingmumbai_Bytes
  messageHash_not_contains: stagingmumbai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  delegate_not: stagingmumbai_Bytes
  delegate_in: [stagingmumbai_Bytes!]
  delegate_not_in: [stagingmumbai_Bytes!]
  delegate_contains: stagingmumbai_Bytes
  delegate_not_contains: stagingmumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingmumbai_Bytes
  originSender_not: stagingmumbai_Bytes
  originSender_in: [stagingmumbai_Bytes!]
  originSender_not_in: [stagingmumbai_Bytes!]
  originSender_contains: stagingmumbai_Bytes
  originSender_not_contains: stagingmumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingmumbai_OriginMessage_filter
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  stagingmumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Sequencer
  stagingmumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Sequencer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Sequencer!]!
  stagingmumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationMessage
  stagingmumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationMessage!]!
  stagingmumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootCount
  stagingmumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootCount_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootCount!]!
  stagingmumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageSent!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
}

type stagingmumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingmumbai_Bytes
}

input stagingmumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingmumbai_Bytes
  relayer_not: stagingmumbai_Bytes
  relayer_in: [stagingmumbai_Bytes!]
  relayer_not_in: [stagingmumbai_Bytes!]
  relayer_contains: stagingmumbai_Bytes
  relayer_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingmumbai_RootCount {
  id: ID!
  count: BigInt
}

input stagingmumbai_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootCount_orderBy {
  id
  count
}

type stagingmumbai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingmumbai_Bytes
  count: BigInt
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmumbai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingmumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_AssetBalance_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_AssetBalance_filter): [stagingmumbai_AssetBalance!]!
}

input stagingmumbai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingmumbai_Bytes
  owner_not: stagingmumbai_Bytes
  owner_in: [stagingmumbai_Bytes!]
  owner_not_in: [stagingmumbai_Bytes!]
  owner_contains: stagingmumbai_Bytes
  owner_not_contains: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  recipient_not: stagingmumbai_Bytes
  recipient_in: [stagingmumbai_Bytes!]
  recipient_not_in: [stagingmumbai_Bytes!]
  recipient_contains: stagingmumbai_Bytes
  recipient_not_contains: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedOwner_not: stagingmumbai_Bytes
  proposedOwner_in: [stagingmumbai_Bytes!]
  proposedOwner_not_in: [stagingmumbai_Bytes!]
  proposedOwner_contains: stagingmumbai_Bytes
  proposedOwner_not_contains: stagingmumbai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingmumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingmumbai_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: stagingmumbai_Bytes
}

input stagingmumbai_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: stagingmumbai_Bytes
  sequencer_not: stagingmumbai_Bytes
  sequencer_in: [stagingmumbai_Bytes!]
  sequencer_not_in: [stagingmumbai_Bytes!]
  sequencer_contains: stagingmumbai_Bytes
  sequencer_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type stagingmumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingmumbai_Bytes!
}

input stagingmumbai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type stagingmumbai_StableSwap {
  id: ID!
  canonicalId: stagingmumbai_Bytes!
  domain: BigInt
  swapPool: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingmumbai_Bytes
  swapPool_not: stagingmumbai_Bytes
  swapPool_in: [stagingmumbai_Bytes!]
  swapPool_not_in: [stagingmumbai_Bytes!]
  swapPool_contains: stagingmumbai_Bytes
  swapPool_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  stagingmumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Sequencer
  stagingmumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Sequencer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Sequencer!]!
  stagingmumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationMessage
  stagingmumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationMessage!]!
  stagingmumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootCount
  stagingmumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootCount_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootCount!]!
  stagingmumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageSent!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
}

enum stagingmumbai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type stagingmumbai__Block_ {
  """The hash of the block"""
  hash: stagingmumbai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingmumbai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingmumbai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}