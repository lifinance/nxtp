specVersion: 0.0.4
schema:
  file: ./src/amarok-runtime-staging/schema.graphql
dataSources:
  # ConnextHandler.sol events
  - kind: ethereum/contract
    name: Connext
    network: "{{network}}"
    source:
      address: "{{address}}"
      abi: ConnextHandler
      # prettier-ignore
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Asset
        - AssetBalance
        - Router
        - Transfer
      abis:
        - name: ConnextHandler
          file: ./src/amarok-runtime-staging/abis/ConnextHandler.json
      eventHandlers:
        # AssetAdded: key, canonicalId, domain, adoptedAsset, localAsset, caller
        - event: AssetAdded(indexed bytes32,indexed bytes32,indexed uint32,address,address,address)
          handler: handleAssetAdded
        # RelayerAdded: relayer, caller
        - event: RelayerAdded(address,address)
          handler: handleRelayerAdded
        # RelayerRemoved: relayer, caller
        - event: RelayerRemoved(address,address)
          handler: handleRelayerRemoved
        - event: RouterLiquidityAdded(indexed address,address,bytes32,uint256,address)
          handler: handleRouterLiquidityAdded
        - event: RouterLiquidityRemoved(indexed address,address,address,uint256,address)
          handler: handleRouterLiquidityRemoved
        - event: XCalled(indexed bytes32,indexed uint256,indexed bytes32,((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,uint256,uint256),address,uint256,address)
          handler: handleXCalled
        - event: Executed(indexed bytes32,indexed address,((address,bytes,uint32,uint32,address,address,bool,bool,address,uint256,uint256,uint256),address,address[],bytes[],address,bytes,uint256,uint256,address),address,uint256,address)
          handler: handleExecuted
          # Reconciled: transferId, origin, routers, asset, amount, caller
        - event: Reconciled(indexed bytes32,uint32,address[],address,uint256,address)
          handler: handleReconciled
          # StableSwapAdded: bytes32 canonicalId, bytes32 domain, address swapPool, address caller
        - event: StableSwapAdded(indexed bytes32,indexed bytes32,indexed uint32,address,address)
          handler: handleStableSwapAdded
          # SponsorVaultUpdated: address oldSponsorVault, address newSponsorVault, address caller
        - event: SponsorVaultUpdated(address,address,address)
          handler: handleSponsorVaultUpdated
        - event: RouterAdded(indexed address,address)
          handler: handleRouterAdded
        - event: RouterRemoved(indexed address,address)
          handler: handleRouterRemoved
        - event: RouterRecipientSet(indexed address,indexed address,indexed address)
          handler: handleRouterRecipientSet
        - event: RouterOwnerProposed(indexed address,indexed address,indexed address)
          handler: handleRouterOwnerProposed
        - event: RouterOwnerAccepted(indexed address,indexed address,indexed address)
          handler: handleRouterOwnerAccepted
        - event: MaxRoutersPerTransferUpdated(uint256,address)
          handler: handleMaxRoutersPerTransferUpdated
          # Swap utils events:
        # - event: TokenSwap(indexed bytes32,indexed address,uint256,uint256,uint128,uint128)
        #   handler: handleAmmTokenSwap
        # - event: AddLiquidity(indexed bytes32,indexed address,uint256[],uint256[],uint256,uint256)
        #   handler: handleAmmAddLiquidity
        # - event: RemoveLiquidity(indexed bytes32,indexed address,uint256[],uint256)
        #   handler: handleAmmRemoveLiquidity
        # - event: RemoveLiquidityOne(indexed bytes32,indexed address,uint256,uint256,uint256,uint256)
        #   handler: handleAmmRemoveLiquidityOne
        # - event: RemoveLiquidityImbalance(indexed bytes32,indexed address,uint256[],uint256[],uint256,uint256)
        #   handler: handleAmmRemoveLiquidityImbalance
        # - event: NewAdminFee(indexed bytes32,uint256)
        #   handler: handleAmmNewAdminFee
        # - event: NewSwapFee(indexed bytes32,uint256)
        #   handler: handleAmmNewSwapFee
      file: ./src/amarok-runtime-staging/mapping.ts
  # Connector.sol events
  - kind: ethereum/contract
    name: Connector
    network: "{{network}}"
    source:
      address: "{{address}}"
      abi: Connector
      # prettier-ignore
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Asset
        - AssetBalance
        - Router
        - Transfer
      abis:
        - name: Connector
          file: ./src/amarok-runtime-staging/abis/Connector.json
      eventHandlers:
        #AggregateRootUpdated(bytes32 current, bytes32 previous);
        - event: AggregateRootUpdated(bytes32,bytes32)
          handler: handleAggregateRootUpdated
        # Dispatch(bytes32 leaf, uint256 index, bytes32 root, bytes message);
        - event: Dispatch(bytes32,uint256,bytes32,bytes)
          handler: handleDispatch
        # # Process(bytes32 leaf, bool success, bytes returnData);
        # - event: Process(bytes32,bool,bytes)
        #   handler: handleProcess
        - event: MessageSent(bytes,address)
          handler: handleMessageSent
        - event: MessageProcessed(bytes,address)
          handler: handleMessageProcessed
        - event: NewConnector(indexed uint32,indexed uint32,address,address,address)
          handler: handleNewConnector
      file: ./src/amarok-runtime-staging/mapping.ts
