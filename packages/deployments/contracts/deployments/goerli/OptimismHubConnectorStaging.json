{
  "address": "0x7D9c146cEdEb97d9161b0f2E4E73255E78dc10cd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mirrorGas",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stateCommitmentChain",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        }
      ],
      "name": "MirrorGasUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "mirrorDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amb",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mirrorConnector",
          "type": "address"
        }
      ],
      "name": "NewConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIRROR_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_messageNonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "stateRoot",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "batchIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "batchRoot",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "batchSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "prevTotalElements",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct ChainBatchHeader",
              "name": "stateRootBatchHeader",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "siblings",
                  "type": "bytes32[]"
                }
              ],
              "internalType": "struct ChainInclusionProof",
              "name": "stateRootProof",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "stateTrieWitness",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "storageTrieWitness",
              "type": "bytes"
            }
          ],
          "internalType": "struct L2MessageInclusionProof",
          "name": "_proof",
          "type": "tuple"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mirrorGas",
          "type": "uint256"
        }
      ],
      "name": "setMirrorGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateCommitmentChain",
      "outputs": [
        {
          "internalType": "contract IStateCommitmentChain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3531852e309ab1eb6d8b051a94d7b1fb1845f822d266afb729737f858d1eadf",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x7D9c146cEdEb97d9161b0f2E4E73255E78dc10cd",
    "transactionIndex": 89,
    "gasUsed": "2798549",
    "logsBloom": "0x
    "blockHash": "0xdcc4041b9665fad95496979f4e2ff23ba901940762c69bbdaa33f8ad57574760",
    "transactionHash": "0xc3531852e309ab1eb6d8b051a94d7b1fb1845f822d266afb729737f858d1eadf",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 7795147,
        "transactionHash": "0xc3531852e309ab1eb6d8b051a94d7b1fb1845f822d266afb729737f858d1eadf",
        "address": "0x7D9c146cEdEb97d9161b0f2E4E73255E78dc10cd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 174,
        "blockHash": "0xdcc4041b9665fad95496979f4e2ff23ba901940762c69bbdaa33f8ad57574760"
      },
      {
        "transactionIndex": 89,
        "blockNumber": 7795147,
        "transactionHash": "0xc3531852e309ab1eb6d8b051a94d7b1fb1845f822d266afb729737f858d1eadf",
        "address": "0x7D9c146cEdEb97d9161b0f2E4E73255E78dc10cd",
        "topics": [
          "0x34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf850",
        "logIndex": 175,
        "blockHash": "0xdcc4041b9665fad95496979f4e2ff23ba901940762c69bbdaa33f8ad57574760"
      },
      {
        "transactionIndex": 89,
        "blockNumber": 7795147,
        "transactionHash": "0xc3531852e309ab1eb6d8b051a94d7b1fb1845f822d266afb729737f858d1eadf",
        "address": "0x7D9c146cEdEb97d9161b0f2E4E73255E78dc10cd",
        "topics": [
          "0x4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f0",
          "0x00000000000000000000000000000000000000000000000000000000676f6572",
          "0x00000000000000000000000000000000000000000000000000000000676f7074"
        ],
        "data": "0x0000000000000000000000005086d1eef304eb5284a0f6720f79403b4e9be294000000000000000000000000d864761b8480f57e78060485f442a9a51f1da0d10000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 176,
        "blockHash": "0xdcc4041b9665fad95496979f4e2ff23ba901940762c69bbdaa33f8ad57574760"
      }
    ],
    "blockNumber": 7795147,
    "cumulativeGasUsed": "15818292",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1735353714",
    "1735356532",
    "0x5086d1eEF304eb5284A0f6720f79403b4e9bE294",
    "0xD864761B8480F57E78060485f442A9A51f1DA0d1",
    "0x0000000000000000000000000000000000000000",
    "850000",
    "0x9c945aC97Baf48cB784AbBB61399beB71aF7A378"
  ],
  "numDeployments": 1,
  "solcInputHash": "2cb19c6ff260c62b0df6791111e721e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mirrorGas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stateCommitmentChain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"MirrorGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"mirrorDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorConnector\",\"type\":\"address\"}],\"name\":\"NewConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIRROR_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_messageNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct ChainBatchHeader\",\"name\":\"stateRootBatchHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"siblings\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct ChainInclusionProof\",\"name\":\"stateRootProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"stateTrieWitness\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"storageTrieWitness\",\"type\":\"bytes\"}],\"internalType\":\"struct L2MessageInclusionProof\",\"name\":\"_proof\",\"type\":\"tuple\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mirrorGas\",\"type\":\"uint256\"}],\"name\":\"setMirrorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateCommitmentChain\",\"outputs\":[{\"internalType\":\"contract IStateCommitmentChain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"processMessage(bytes)\":{\"details\":\"This is called by AMBs to process messages originating from mirror connector\"},\"processMessageFromRoot(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))\":{\"details\":\"modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L165\"},\"sendMessage(bytes)\":{\"details\":\"This is called by the root manager *only* on mainnet to propagate the aggregate root\"}},\"version\":1},\"userdoc\":{\"events\":{\"MessageProcessed(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully received over an AMB\"},\"MessageSent(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully sent over an AMB\"}},\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"MIRROR_DOMAIN()\":{\"notice\":\"The domain of the corresponding messaging (i.e. Connector) contract.\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"mirrorGas()\":{\"notice\":\"Gas costs forwarded to the `processMessage` call on the mirror domain\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processMessage(bytes)\":{\"notice\":\"Processes a message received by an AMB\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"sendMessage(bytes)\":{\"notice\":\"Sends a message over the amb\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"setMirrorGas(uint256)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"verifySender(address)\":{\"notice\":\"Checks the cross domain sender for a given address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/connectors/optimism/OptimismHubConnector.sol\":\"OptimismHubConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"contracts/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n/**\\n * @title Connector\\n * @author Connext Labs, Inc.\\n * @notice This contract has the messaging interface functions used by all connectors.\\n *\\n * @dev This contract stores information about mirror connectors, but can be used as a\\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\\n * mainnet). In this case, the `mirrorConnector`, `MIRROR_DOMAIN`, and `mirrorGas`\\n * will be empty\\n */\\nabstract contract Connector is ProposedOwnable, IConnector {\\n  // ============ Events ============\\n\\n  event NewConnector(\\n    uint32 indexed domain,\\n    uint32 indexed mirrorDomain,\\n    address amb,\\n    address rootManager,\\n    address mirrorConnector\\n  );\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  event MirrorGasUpdated(uint256 previous, uint256 current);\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable MIRROR_DOMAIN;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  /**\\n   * @notice Gas costs forwarded to the `processMessage` call on the mirror domain\\n   */\\n  uint256 public mirrorGas;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered AMB\\n   */\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\\n   */\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManager\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   * @param _mirrorGas The gas costs required to process a message on mirror\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas\\n  ) ProposedOwnable() {\\n    // set the owner\\n    _setOwner(msg.sender);\\n\\n    // sanity checks on values\\n    require(_domain != 0, \\\"empty domain\\\");\\n    require(_rootManager != address(0), \\\"empty rootManager\\\");\\n    // see note at top of contract on why the mirror values are not sanity checked\\n\\n    // set immutables\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n    MIRROR_DOMAIN = _mirrorDomain;\\n    // set mutables if defined\\n    if (_mirrorConnector != address(0)) {\\n      _setMirrorConnector(_mirrorConnector);\\n    }\\n\\n    if (_mirrorGas != 0) {\\n      _setMirrorGas(_mirrorGas);\\n    }\\n\\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    _setMirrorConnector(_mirrorConnector);\\n  }\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorGas(uint256 _mirrorGas) public onlyOwner {\\n    _setMirrorGas(_mirrorGas);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Processes a message received by an AMB\\n   * @dev This is called by AMBs to process messages originating from mirror connector\\n   */\\n  function processMessage(bytes memory _data) external onlyAMB {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Checks the cross domain sender for a given address\\n   */\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  // ============ Virtual Functions ============\\n\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   */\\n  function _sendMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(bytes memory _data) internal virtual;\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private Functions ============\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n\\n  function _setMirrorGas(uint256 _mirrorGas) internal {\\n    emit MirrorGasUpdated(mirrorGas, _mirrorGas);\\n    mirrorGas = _mirrorGas;\\n  }\\n}\\n\",\"keccak256\":\"0x6ee49b67b5c5678041444e27e214c6c9576ff2c0b430ebaf9d571fc29018e28b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/HubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\n\\n/**\\n * @title HubConnector\\n * @author Connext Labs, Inc.\\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\\n * it contains no logic to store or prove messages.\\n *\\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\\n * which extend this should implement the virtual functions defined in the BaseConnector class\\n */\\nabstract contract HubConnector is Connector {\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   * @param _mirrorGas The gas costs required to process a message on mirror\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas\\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorGas) {}\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice Sends a message over the amb\\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\\n   */\\n  function sendMessage(bytes memory _data) external onlyRootManager {\\n    _sendMessage(_data);\\n    emit MessageSent(_data, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x9eaa0331d4011caff1751949bd64c434655195b08cee46596ffbec1821b360ab\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/BaseOptimism.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {OptimismAmb} from \\\"../../interfaces/ambs/optimism/OptimismAmb.sol\\\";\\n\\nabstract contract BaseOptimism {\\n  // ============ Constructor ============\\n  constructor() {}\\n\\n  // ============ Override Fns ============\\n  function _verifySender(address _amb, address _expected) internal view returns (bool) {\\n    require(msg.sender == _amb, \\\"!bridge\\\");\\n    return OptimismAmb(_amb).xDomainMessageSender() == _expected;\\n  }\\n}\\n\",\"keccak256\":\"0x96990e6b14d86db73bb1a8f63c9cba9e17f7274c97b1f81346f85c7385e1a5f4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/OptimismHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IRootManager} from \\\"../../interfaces/IRootManager.sol\\\";\\nimport {OptimismAmb} from \\\"../../interfaces/ambs/optimism/OptimismAmb.sol\\\";\\nimport {IStateCommitmentChain, ChainBatchHeader, ChainInclusionProof, L2MessageInclusionProof} from \\\"../../interfaces/ambs/optimism/IStateCommitmentChain.sol\\\";\\n\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {HubConnector} from \\\"../HubConnector.sol\\\";\\nimport {Connector} from \\\"../Connector.sol\\\";\\n\\nimport {PredeployAddresses} from \\\"./lib/PredeployAddresses.sol\\\";\\nimport {OVMCodec} from \\\"./lib/OVMCodec.sol\\\";\\nimport {SecureMerkleTrie} from \\\"./lib/SecureMerkleTrie.sol\\\";\\n\\nimport {BaseOptimism} from \\\"./BaseOptimism.sol\\\";\\n\\ncontract OptimismHubConnector is HubConnector, BaseOptimism {\\n  // ============ Libraries ============\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Storage ============\\n  IStateCommitmentChain public stateCommitmentChain;\\n\\n  // NOTE: This is needed because we need to track the roots we've\\n  // already sent across chains. When sending an optimism message, we send calldata\\n  // for Connector.processMessage. At any point these messages could be processed\\n  // before the timeout using `processFromRoot` or after the timeout using `process`\\n  // we track the roots sent here to ensure we process each root once\\n  mapping(bytes32 => bool) public processed;\\n\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    uint256 _mirrorGas,\\n    address _stateCommitmentChain\\n  ) HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector, _mirrorGas) BaseOptimism() {\\n    stateCommitmentChain = IStateCommitmentChain(_stateCommitmentChain);\\n  }\\n\\n  // ============ Override Fns ============\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    return _verifySender(AMB, _expected);\\n  }\\n\\n  /**\\n   * @dev Sends `aggregateRoot` to messaging on l2\\n   */\\n  function _sendMessage(bytes memory _data) internal override {\\n    // Should always be dispatching the aggregate root\\n    require(_data.length == 32, \\\"!length\\\");\\n    // Get the calldata\\n    bytes memory _calldata = abi.encodeWithSelector(Connector.processMessage.selector, _data);\\n    // Dispatch message\\n    OptimismAmb(AMB).sendMessage(mirrorConnector, _calldata, uint32(mirrorGas));\\n  }\\n\\n  /**\\n   * @notice Processes messages\\n   * @param _data The message to process (should be an outbound root originating on\\n   * spoke)\\n   */\\n  function _processMessage(bytes memory _data) internal override {\\n    // sanity check root length\\n    require(_data.length == 32, \\\"!length\\\");\\n\\n    // get root from data\\n    bytes32 root = bytes32(_data);\\n\\n    if (!processed[root]) {\\n      // set root to processed\\n      processed[root] = true;\\n      // update the root on the root manager\\n      IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, root);\\n    } // otherwise root was already sent to root manager\\n  }\\n\\n  /**\\n   * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L165\\n   */\\n  function processMessageFromRoot(\\n    address _target,\\n    address _sender,\\n    bytes memory _message,\\n    uint256 _messageNonce,\\n    L2MessageInclusionProof memory _proof\\n  ) external {\\n    // verify the sender is the l2 contract\\n    require(_sender == mirrorConnector, \\\"!mirrorConnector\\\");\\n\\n    // verify the target is this contract\\n    require(_target == address(this), \\\"!this\\\");\\n\\n    // Get the encoded data\\n    bytes memory xDomainData = _encodeXDomainCalldata(_target, _sender, _message, _messageNonce);\\n\\n    require(_verifyXDomainMessage(xDomainData, _proof), \\\"!proof\\\");\\n\\n    // NOTE: optimism seems to pad the calldata sent in to include more than the expected\\n    // 36 bytes, i.e. in this transaction:\\n    // https://blockscout.com/optimism/goerli/tx/0x440fda036d28eb547394a8689af90c5342a00a8ca2ab5117f2b85f54d1416ddd/logs\\n    // the corresponding _message is:\\n    // 0x4ff746f60000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002027ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\\n    //\\n    // this means the length check and byte parsing used in the `ArbitrumHubConnector` would\\n    // not work here. Instead, take the back 32 bytes of the string, regardless of the length. The length\\n    // can be validated in _processMessage\\n\\n    // NOTE: TypedMemView only loads 32-byte chunks onto stack, which is fine in this case\\n    bytes29 _view = _message.ref(0);\\n    bytes32 _data = _view.index(_view.len() - 32, 32);\\n\\n    _processMessage(abi.encode(_data));\\n    emit MessageProcessed(abi.encode(_data), msg.sender);\\n  }\\n\\n  /**\\n   * Verifies that the given message is valid.\\n   * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L283-L288\\n   * @param _xDomainCalldata Calldata to verify.\\n   * @param _proof Inclusion proof for the message.\\n   * @return Whether or not the provided message is valid.\\n   */\\n  function _verifyXDomainMessage(bytes memory _xDomainCalldata, L2MessageInclusionProof memory _proof)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return (_verifyStateRootProof(_proof) && _verifyStorageProof(_xDomainCalldata, _proof));\\n  }\\n\\n  /**\\n   * Verifies that the state root within an inclusion proof is valid.\\n   * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L295-L311\\n   * @param _proof Message inclusion proof.\\n   * @return Whether or not the provided proof is valid.\\n   */\\n  function _verifyStateRootProof(L2MessageInclusionProof memory _proof) internal view returns (bool) {\\n    return\\n      stateCommitmentChain.verifyStateCommitment(_proof.stateRoot, _proof.stateRootBatchHeader, _proof.stateRootProof);\\n  }\\n\\n  /**\\n   * Verifies that the storage proof within an inclusion proof is valid.\\n   * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L313-L357\\n   * @param _xDomainCalldata Encoded message calldata.\\n   * @param _proof Message inclusion proof.\\n   * @return Whether or not the provided proof is valid.\\n   */\\n  function _verifyStorageProof(bytes memory _xDomainCalldata, L2MessageInclusionProof memory _proof)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    bytes32 storageKey = keccak256(\\n      abi.encodePacked(\\n        keccak256(abi.encodePacked(_xDomainCalldata, PredeployAddresses.L2_CROSS_DOMAIN_MESSENGER)),\\n        uint256(0)\\n      )\\n    );\\n\\n    (bool exists, bytes memory encodedMessagePassingAccount) = SecureMerkleTrie.get(\\n      abi.encodePacked(PredeployAddresses.L2_TO_L1_MESSAGE_PASSER),\\n      _proof.stateTrieWitness,\\n      _proof.stateRoot\\n    );\\n\\n    require(exists == true, \\\"Message passing predeploy has not been initialized or invalid proof provided.\\\");\\n\\n    OVMCodec.EVMAccount memory account = OVMCodec.decodeEVMAccount(encodedMessagePassingAccount);\\n\\n    return\\n      SecureMerkleTrie.verifyInclusionProof(\\n        abi.encodePacked(storageKey),\\n        abi.encodePacked(uint8(1)),\\n        _proof.storageTrieWitness,\\n        account.storageRoot\\n      );\\n  }\\n\\n  /**\\n   * Generates the correct cross domain calldata for a message.\\n   * @dev taken from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/bridge/Lib_CrossDomainUtils.sol\\n   * @param _target Target contract address.\\n   * @param _sender Message sender address.\\n   * @param _message Message to send to the target.\\n   * @param _messageNonce Nonce for the provided message.\\n   * @return ABI encoded cross domain calldata.\\n   */\\n  function _encodeXDomainCalldata(\\n    address _target,\\n    address _sender,\\n    bytes memory _message,\\n    uint256 _messageNonce\\n  ) internal pure returns (bytes memory) {\\n    return\\n      abi.encodeWithSignature(\\\"relayMessage(address,address,bytes,uint256)\\\", _target, _sender, _message, _messageNonce);\\n  }\\n}\\n\",\"keccak256\":\"0xe0440470d2df77dc09526a20e5f0d87b1153d0dadd42f3f3bb72d09068b40460\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title BytesUtils\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/utils/Lib_BytesUtils.sol\\n */\\nlibrary BytesUtils {\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  function slice(\\n    bytes memory _bytes,\\n    uint256 _start,\\n    uint256 _length\\n  ) internal pure returns (bytes memory) {\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n    require(_start + _length >= _start, \\\"slice_overflow\\\");\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n    bytes memory tempBytes;\\n\\n    assembly {\\n      switch iszero(_length)\\n      case 0 {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n        tempBytes := mload(0x40)\\n\\n        // The first word of the slice result is potentially a partial\\n        // word read from the original array. To read it, we calculate\\n        // the length of that partial word and start copying that many\\n        // bytes into the array. The first word we copy will start with\\n        // data we don't care about, but the last `lengthmod` bytes will\\n        // land at the beginning of the contents of the new array. When\\n        // we're done copying, we overwrite the full first word with\\n        // the actual length of the slice.\\n        let lengthmod := and(_length, 31)\\n\\n        // The multiplication in the next line is necessary\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\n        // the following copy loop was copying the origin's length\\n        // and then ending prematurely not copying everything it should.\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n        let end := add(mc, _length)\\n\\n        for {\\n          // The multiplication in the next line has the same exact purpose\\n          // as the one above.\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n        } lt(mc, end) {\\n          mc := add(mc, 0x20)\\n          cc := add(cc, 0x20)\\n        } {\\n          mstore(mc, mload(cc))\\n        }\\n\\n        mstore(tempBytes, _length)\\n\\n        //update free-memory pointer\\n        //allocating the array padded to 32 bytes like the compiler does now\\n        mstore(0x40, and(add(mc, 31), not(31)))\\n      }\\n      //if we want a zero-length slice let's just return a zero-length array\\n      default {\\n        tempBytes := mload(0x40)\\n\\n        //zero out the 32 bytes slice we are about to return\\n        //we need to do it because Solidity does not garbage collect\\n        mstore(tempBytes, 0)\\n\\n        mstore(0x40, add(tempBytes, 0x20))\\n      }\\n    }\\n\\n    return tempBytes;\\n  }\\n\\n  function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {\\n    if (_start >= _bytes.length) {\\n      return bytes(\\\"\\\");\\n    }\\n\\n    return slice(_bytes, _start, _bytes.length - _start);\\n  }\\n\\n  function toBytes32(bytes memory _bytes) internal pure returns (bytes32) {\\n    if (_bytes.length < 32) {\\n      bytes32 ret;\\n      assembly {\\n        ret := mload(add(_bytes, 32))\\n      }\\n      return ret;\\n    }\\n\\n    return abi.decode(_bytes, (bytes32)); // will truncate if input length > 32 bytes\\n  }\\n\\n  function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n    return uint256(toBytes32(_bytes));\\n  }\\n\\n  function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n    bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n    for (uint256 i = 0; i < _bytes.length; i++) {\\n      nibbles[i * 2] = _bytes[i] >> 4;\\n      nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n    }\\n\\n    return nibbles;\\n  }\\n\\n  function fromNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n    bytes memory ret = new bytes(_bytes.length / 2);\\n\\n    for (uint256 i = 0; i < ret.length; i++) {\\n      ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n    }\\n\\n    return ret;\\n  }\\n\\n  function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {\\n    return keccak256(_bytes) == keccak256(_other);\\n  }\\n}\\n\",\"keccak256\":\"0x1924b1b5b3686616ec8e56f62e8609fd4a696847bd8e47fa6a78757ce8803233\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/MerkleTrie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/* Library Imports */\\nimport {BytesUtils} from \\\"./BytesUtils.sol\\\";\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\n/**\\n * @title MerkleTrie\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/trie/Lib_MerkleTrie.sol\\n */\\nlibrary MerkleTrie {\\n  /*******************\\n   * Data Structures *\\n   *******************/\\n\\n  enum NodeType {\\n    BranchNode,\\n    ExtensionNode,\\n    LeafNode\\n  }\\n\\n  struct TrieNode {\\n    bytes encoded;\\n    RLPReader.RLPItem[] decoded;\\n  }\\n\\n  /**********************\\n   * Contract Constants *\\n   **********************/\\n\\n  // TREE_RADIX determines the number of elements per branch node.\\n  uint256 constant TREE_RADIX = 16;\\n  // Branch nodes have TREE_RADIX elements plus an additional `value` slot.\\n  uint256 constant BRANCH_NODE_LENGTH = TREE_RADIX + 1;\\n  // Leaf nodes and extension nodes always have two elements, a `path` and a `value`.\\n  uint256 constant LEAF_OR_EXTENSION_NODE_LENGTH = 2;\\n\\n  // Prefixes are prepended to the `path` within a leaf or extension node and\\n  // allow us to differentiate between the two node types. `ODD` or `EVEN` is\\n  // determined by the number of nibbles within the unprefixed `path`. If the\\n  // number of nibbles if even, we need to insert an extra padding nibble so\\n  // the resulting prefixed `path` has an even number of nibbles.\\n  uint8 constant PREFIX_EXTENSION_EVEN = 0;\\n  uint8 constant PREFIX_EXTENSION_ODD = 1;\\n  uint8 constant PREFIX_LEAF_EVEN = 2;\\n  uint8 constant PREFIX_LEAF_ODD = 3;\\n\\n  // Just a utility constant. RLP represents `NULL` as 0x80.\\n  bytes1 constant RLP_NULL = bytes1(0x80);\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /**\\n   * @notice Verifies a proof that a given key/value pair is present in the\\n   * Merkle trie.\\n   * @param _key Key of the node to search for, as a hex string.\\n   * @param _value Value of the node to search for, as a hex string.\\n   * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n   * traditional Merkle trees, this proof is executed top-down and consists\\n   * of a list of RLP-encoded nodes that make a path down to the target node.\\n   * @param _root Known root of the Merkle trie. Used to verify that the\\n   * included proof is correctly constructed.\\n   * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n   */\\n  function verifyInclusionProof(\\n    bytes memory _key,\\n    bytes memory _value,\\n    bytes memory _proof,\\n    bytes32 _root\\n  ) internal pure returns (bool _verified) {\\n    (bool exists, bytes memory value) = get(_key, _proof, _root);\\n\\n    return (exists && BytesUtils.equal(_value, value));\\n  }\\n\\n  /**\\n   * @notice Retrieves the value associated with a given key.\\n   * @param _key Key to search for, as hex bytes.\\n   * @param _proof Merkle trie inclusion proof for the key.\\n   * @param _root Known root of the Merkle trie.\\n   * @return _exists Whether or not the key exists.\\n   * @return _value Value of the key if it exists.\\n   */\\n  function get(\\n    bytes memory _key,\\n    bytes memory _proof,\\n    bytes32 _root\\n  ) internal pure returns (bool _exists, bytes memory _value) {\\n    TrieNode[] memory proof = _parseProof(_proof);\\n    (uint256 pathLength, bytes memory keyRemainder, bool isFinalNode) = _walkNodePath(proof, _key, _root);\\n\\n    bool exists = keyRemainder.length == 0;\\n\\n    require(exists || isFinalNode, \\\"Provided proof is invalid.\\\");\\n\\n    bytes memory value = exists ? _getNodeValue(proof[pathLength - 1]) : bytes(\\\"\\\");\\n\\n    return (exists, value);\\n  }\\n\\n  /*********************\\n   * Private Functions *\\n   *********************/\\n\\n  /**\\n   * @notice Walks through a proof using a provided key.\\n   * @param _proof Inclusion proof to walk through.\\n   * @param _key Key to use for the walk.\\n   * @param _root Known root of the trie.\\n   * @return _pathLength Length of the final path\\n   * @return _keyRemainder Portion of the key remaining after the walk.\\n   * @return _isFinalNode Whether or not we've hit a dead end.\\n   */\\n  function _walkNodePath(\\n    TrieNode[] memory _proof,\\n    bytes memory _key,\\n    bytes32 _root\\n  )\\n    private\\n    pure\\n    returns (\\n      uint256 _pathLength,\\n      bytes memory _keyRemainder,\\n      bool _isFinalNode\\n    )\\n  {\\n    uint256 pathLength = 0;\\n    bytes memory key = BytesUtils.toNibbles(_key);\\n\\n    bytes32 currentNodeID = _root;\\n    uint256 currentKeyIndex = 0;\\n    uint256 currentKeyIncrement = 0;\\n    TrieNode memory currentNode;\\n\\n    // Proof is top-down, so we start at the first element (root).\\n    for (uint256 i = 0; i < _proof.length; i++) {\\n      currentNode = _proof[i];\\n      currentKeyIndex += currentKeyIncrement;\\n\\n      // Keep track of the proof elements we actually need.\\n      // It's expensive to resize arrays, so this simply reduces gas costs.\\n      pathLength += 1;\\n\\n      if (currentKeyIndex == 0) {\\n        // First proof element is always the root node.\\n        require(keccak256(currentNode.encoded) == currentNodeID, \\\"Invalid root hash\\\");\\n      } else if (currentNode.encoded.length >= 32) {\\n        // Nodes 32 bytes or larger are hashed inside branch nodes.\\n        require(keccak256(currentNode.encoded) == currentNodeID, \\\"Invalid large internal hash\\\");\\n      } else {\\n        // Nodes smaller than 31 bytes aren't hashed.\\n        require(BytesUtils.toBytes32(currentNode.encoded) == currentNodeID, \\\"Invalid internal node hash\\\");\\n      }\\n\\n      if (currentNode.decoded.length == BRANCH_NODE_LENGTH) {\\n        if (currentKeyIndex == key.length) {\\n          // We've hit the end of the key\\n          // meaning the value should be within this branch node.\\n          break;\\n        } else {\\n          // We're not at the end of the key yet.\\n          // Figure out what the next node ID should be and continue.\\n          uint8 branchKey = uint8(key[currentKeyIndex]);\\n          RLPReader.RLPItem memory nextNode = currentNode.decoded[branchKey];\\n          currentNodeID = _getNodeID(nextNode);\\n          currentKeyIncrement = 1;\\n          continue;\\n        }\\n      } else if (currentNode.decoded.length == LEAF_OR_EXTENSION_NODE_LENGTH) {\\n        bytes memory path = _getNodePath(currentNode);\\n        uint8 prefix = uint8(path[0]);\\n        uint8 offset = 2 - (prefix % 2);\\n        bytes memory pathRemainder = BytesUtils.slice(path, offset);\\n        bytes memory keyRemainder = BytesUtils.slice(key, currentKeyIndex);\\n        uint256 sharedNibbleLength = _getSharedNibbleLength(pathRemainder, keyRemainder);\\n\\n        if (prefix == PREFIX_LEAF_EVEN || prefix == PREFIX_LEAF_ODD) {\\n          if (pathRemainder.length == sharedNibbleLength && keyRemainder.length == sharedNibbleLength) {\\n            // The key within this leaf matches our key exactly.\\n            // Increment the key index to reflect that we have no remainder.\\n            currentKeyIndex += sharedNibbleLength;\\n          }\\n\\n          // We've hit a leaf node, so our next node should be NULL.\\n          currentNodeID = bytes32(RLP_NULL);\\n          break;\\n        } else if (prefix == PREFIX_EXTENSION_EVEN || prefix == PREFIX_EXTENSION_ODD) {\\n          if (sharedNibbleLength != pathRemainder.length) {\\n            // Our extension node is not identical to the remainder.\\n            // We've hit the end of this path\\n            // updates will need to modify this extension.\\n            currentNodeID = bytes32(RLP_NULL);\\n            break;\\n          } else {\\n            // Our extension shares some nibbles.\\n            // Carry on to the next node.\\n            currentNodeID = _getNodeID(currentNode.decoded[1]);\\n            currentKeyIncrement = sharedNibbleLength;\\n            continue;\\n          }\\n        } else {\\n          revert(\\\"Received a node with an unknown prefix\\\");\\n        }\\n      } else {\\n        revert(\\\"Received an unparseable node.\\\");\\n      }\\n    }\\n\\n    // If our node ID is NULL, then we're at a dead end.\\n    bool isFinalNode = currentNodeID == bytes32(RLP_NULL);\\n    return (pathLength, BytesUtils.slice(key, currentKeyIndex), isFinalNode);\\n  }\\n\\n  /**\\n   * @notice Parses an RLP-encoded proof into something more useful.\\n   * @param _proof RLP-encoded proof to parse.\\n   * @return _parsed Proof parsed into easily accessible structs.\\n   */\\n  function _parseProof(bytes memory _proof) private pure returns (TrieNode[] memory _parsed) {\\n    RLPReader.RLPItem[] memory nodes = RLPReader.readList(_proof);\\n    TrieNode[] memory proof = new TrieNode[](nodes.length);\\n\\n    for (uint256 i = 0; i < nodes.length; i++) {\\n      bytes memory encoded = RLPReader.readBytes(nodes[i]);\\n      proof[i] = TrieNode({encoded: encoded, decoded: RLPReader.readList(encoded)});\\n    }\\n\\n    return proof;\\n  }\\n\\n  /**\\n   * @notice Picks out the ID for a node. Node ID is referred to as the\\n   * \\\"hash\\\" within the specification, but nodes < 32 bytes are not actually\\n   * hashed.\\n   * @param _node Node to pull an ID for.\\n   * @return _nodeID ID for the node, depending on the size of its contents.\\n   */\\n  function _getNodeID(RLPReader.RLPItem memory _node) private pure returns (bytes32 _nodeID) {\\n    bytes memory nodeID;\\n\\n    if (_node.length < 32) {\\n      // Nodes smaller than 32 bytes are RLP encoded.\\n      nodeID = RLPReader.readRawBytes(_node);\\n    } else {\\n      // Nodes 32 bytes or larger are hashed.\\n      nodeID = RLPReader.readBytes(_node);\\n    }\\n\\n    return BytesUtils.toBytes32(nodeID);\\n  }\\n\\n  /**\\n   * @notice Gets the path for a leaf or extension node.\\n   * @param _node Node to get a path for.\\n   * @return _path Node path, converted to an array of nibbles.\\n   */\\n  function _getNodePath(TrieNode memory _node) private pure returns (bytes memory _path) {\\n    return BytesUtils.toNibbles(RLPReader.readBytes(_node.decoded[0]));\\n  }\\n\\n  /**\\n   * @notice Gets the path for a node.\\n   * @param _node Node to get a value for.\\n   * @return _value Node value, as hex bytes.\\n   */\\n  function _getNodeValue(TrieNode memory _node) private pure returns (bytes memory _value) {\\n    return RLPReader.readBytes(_node.decoded[_node.decoded.length - 1]);\\n  }\\n\\n  /**\\n   * @notice Utility; determines the number of nibbles shared between two\\n   * nibble arrays.\\n   * @param _a First nibble array.\\n   * @param _b Second nibble array.\\n   * @return _shared Number of shared nibbles.\\n   */\\n  function _getSharedNibbleLength(bytes memory _a, bytes memory _b) private pure returns (uint256 _shared) {\\n    uint256 i = 0;\\n    while (_a.length > i && _b.length > i && _a[i] == _b[i]) {\\n      i++;\\n    }\\n    return i;\\n  }\\n}\\n\",\"keccak256\":\"0x1215df49820ffeb86fb227d9db6f897bf191b726c37da2c8ddf15d86aa9bb000\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/OVMCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/* Library Imports */\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\n/**\\n * @title OVMCodec\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/codec/Lib_OVMCodec.sol\\n */\\nlibrary OVMCodec {\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct EVMAccount {\\n    uint256 nonce;\\n    uint256 balance;\\n    bytes32 storageRoot;\\n    bytes32 codeHash;\\n  }\\n\\n  /**\\n   * @notice Decodes an RLP-encoded account state into a useful struct.\\n   * @param _encoded RLP-encoded account state.\\n   * @return Account state struct.\\n   */\\n  function decodeEVMAccount(bytes memory _encoded) internal pure returns (EVMAccount memory) {\\n    RLPReader.RLPItem[] memory accountState = RLPReader.readList(_encoded);\\n\\n    return\\n      EVMAccount({\\n        nonce: RLPReader.readUint256(accountState[0]),\\n        balance: RLPReader.readUint256(accountState[1]),\\n        storageRoot: RLPReader.readBytes32(accountState[2]),\\n        codeHash: RLPReader.readBytes32(accountState[3])\\n      });\\n  }\\n}\\n\",\"keccak256\":\"0xb3fa5a075ad5f9d6c69ff8d7e9d9be5098615538ce922c7f0faabc80782d8307\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/PredeployAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title PredeployAddresses\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/constants/Lib_PredeployAddresses.sol\\n */\\nlibrary PredeployAddresses {\\n  address internal constant L2_TO_L1_MESSAGE_PASSER = 0x4200000000000000000000000000000000000000;\\n  address internal constant L1_MESSAGE_SENDER = 0x4200000000000000000000000000000000000001;\\n  address internal constant DEPLOYER_WHITELIST = 0x4200000000000000000000000000000000000002;\\n  address payable internal constant OVM_ETH = payable(0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000);\\n  address internal constant L2_CROSS_DOMAIN_MESSENGER = 0x4200000000000000000000000000000000000007;\\n  address internal constant LIB_ADDRESS_MANAGER = 0x4200000000000000000000000000000000000008;\\n  address internal constant PROXY_EOA = 0x4200000000000000000000000000000000000009;\\n  address internal constant L2_STANDARD_BRIDGE = 0x4200000000000000000000000000000000000010;\\n  address internal constant SEQUENCER_FEE_WALLET = 0x4200000000000000000000000000000000000011;\\n  address internal constant L2_STANDARD_TOKEN_FACTORY = 0x4200000000000000000000000000000000000012;\\n  address internal constant L1_BLOCK_NUMBER = 0x4200000000000000000000000000000000000013;\\n}\\n\",\"keccak256\":\"0x8f04f2dd42e752274f6b86fd457089acb207ea99f042a7d3e1477f6ea995ac20\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title RLPReader\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/rlp/Lib_RLPReader.sol\\n */\\nlibrary RLPReader {\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  uint256 internal constant MAX_LIST_LENGTH = 32;\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum RLPItemType {\\n    DATA_ITEM,\\n    LIST_ITEM\\n  }\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct RLPItem {\\n    uint256 length;\\n    uint256 ptr;\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /**\\n   * Converts bytes to a reference to memory position and length.\\n   * @param _in Input bytes to convert.\\n   * @return Output memory reference.\\n   */\\n  function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(_in, 32)\\n    }\\n\\n    return RLPItem({length: _in.length, ptr: ptr});\\n  }\\n\\n  /**\\n   * Reads an RLP list value into a list of RLP items.\\n   * @param _in RLP list value.\\n   * @return Decoded RLP list items.\\n   */\\n  function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {\\n    (uint256 listOffset, , RLPItemType itemType) = _decodeLength(_in);\\n\\n    require(itemType == RLPItemType.LIST_ITEM, \\\"Invalid RLP list value.\\\");\\n\\n    // Solidity in-memory arrays can't be increased in size, but *can* be decreased in size by\\n    // writing to the length. Since we can't know the number of RLP items without looping over\\n    // the entire input, we'd have to loop twice to accurately size this array. It's easier to\\n    // simply set a reasonable maximum list length and decrease the size before we finish.\\n    RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n    uint256 itemCount = 0;\\n    uint256 offset = listOffset;\\n    while (offset < _in.length) {\\n      require(itemCount < MAX_LIST_LENGTH, \\\"Provided RLP list exceeds max list length.\\\");\\n\\n      (uint256 itemOffset, uint256 itemLength, ) = _decodeLength(\\n        RLPItem({length: _in.length - offset, ptr: _in.ptr + offset})\\n      );\\n\\n      out[itemCount] = RLPItem({length: itemLength + itemOffset, ptr: _in.ptr + offset});\\n\\n      itemCount += 1;\\n      offset += itemOffset + itemLength;\\n    }\\n\\n    // Decrease the array size to match the actual item count.\\n    assembly {\\n      mstore(out, itemCount)\\n    }\\n\\n    return out;\\n  }\\n\\n  /**\\n   * Reads an RLP list value into a list of RLP items.\\n   * @param _in RLP list value.\\n   * @return Decoded RLP list items.\\n   */\\n  function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {\\n    return readList(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP bytes value into bytes.\\n   * @param _in RLP bytes value.\\n   * @return Decoded bytes.\\n   */\\n  function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n    (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n    require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes value.\\\");\\n\\n    return _copy(_in.ptr, itemOffset, itemLength);\\n  }\\n\\n  /**\\n   * Reads an RLP bytes value into bytes.\\n   * @param _in RLP bytes value.\\n   * @return Decoded bytes.\\n   */\\n  function readBytes(bytes memory _in) internal pure returns (bytes memory) {\\n    return readBytes(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP string value into a string.\\n   * @param _in RLP string value.\\n   * @return Decoded string.\\n   */\\n  function readString(RLPItem memory _in) internal pure returns (string memory) {\\n    return string(readBytes(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP string value into a string.\\n   * @param _in RLP string value.\\n   * @return Decoded string.\\n   */\\n  function readString(bytes memory _in) internal pure returns (string memory) {\\n    return readString(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP bytes32 value into a bytes32.\\n   * @param _in RLP bytes32 value.\\n   * @return Decoded bytes32.\\n   */\\n  function readBytes32(RLPItem memory _in) internal pure returns (bytes32) {\\n    require(_in.length <= 33, \\\"Invalid RLP bytes32 value.\\\");\\n\\n    (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n    require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes32 value.\\\");\\n\\n    uint256 ptr = _in.ptr + itemOffset;\\n    bytes32 out;\\n    assembly {\\n      out := mload(ptr)\\n\\n      // Shift the bytes over to match the item size.\\n      if lt(itemLength, 32) {\\n        out := div(out, exp(256, sub(32, itemLength)))\\n      }\\n    }\\n\\n    return out;\\n  }\\n\\n  /**\\n   * Reads an RLP bytes32 value into a bytes32.\\n   * @param _in RLP bytes32 value.\\n   * @return Decoded bytes32.\\n   */\\n  function readBytes32(bytes memory _in) internal pure returns (bytes32) {\\n    return readBytes32(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP uint256 value into a uint256.\\n   * @param _in RLP uint256 value.\\n   * @return Decoded uint256.\\n   */\\n  function readUint256(RLPItem memory _in) internal pure returns (uint256) {\\n    return uint256(readBytes32(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP uint256 value into a uint256.\\n   * @param _in RLP uint256 value.\\n   * @return Decoded uint256.\\n   */\\n  function readUint256(bytes memory _in) internal pure returns (uint256) {\\n    return readUint256(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP bool value into a bool.\\n   * @param _in RLP bool value.\\n   * @return Decoded bool.\\n   */\\n  function readBool(RLPItem memory _in) internal pure returns (bool) {\\n    require(_in.length == 1, \\\"Invalid RLP boolean value.\\\");\\n\\n    uint256 ptr = _in.ptr;\\n    uint256 out;\\n    assembly {\\n      out := byte(0, mload(ptr))\\n    }\\n\\n    require(out == 0 || out == 1, \\\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\\");\\n\\n    return out != 0;\\n  }\\n\\n  /**\\n   * Reads an RLP bool value into a bool.\\n   * @param _in RLP bool value.\\n   * @return Decoded bool.\\n   */\\n  function readBool(bytes memory _in) internal pure returns (bool) {\\n    return readBool(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads an RLP address value into a address.\\n   * @param _in RLP address value.\\n   * @return Decoded address.\\n   */\\n  function readAddress(RLPItem memory _in) internal pure returns (address) {\\n    if (_in.length == 1) {\\n      return address(0);\\n    }\\n\\n    require(_in.length == 21, \\\"Invalid RLP address value.\\\");\\n\\n    return address(uint160(readUint256(_in)));\\n  }\\n\\n  /**\\n   * Reads an RLP address value into a address.\\n   * @param _in RLP address value.\\n   * @return Decoded address.\\n   */\\n  function readAddress(bytes memory _in) internal pure returns (address) {\\n    return readAddress(toRLPItem(_in));\\n  }\\n\\n  /**\\n   * Reads the raw bytes of an RLP item.\\n   * @param _in RLP item to read.\\n   * @return Raw RLP bytes.\\n   */\\n  function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n    return _copy(_in);\\n  }\\n\\n  /*********************\\n   * Private Functions *\\n   *********************/\\n\\n  /**\\n   * Decodes the length of an RLP item.\\n   * @param _in RLP item to decode.\\n   * @return Offset of the encoded data.\\n   * @return Length of the encoded data.\\n   * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n   */\\n  function _decodeLength(RLPItem memory _in)\\n    private\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      RLPItemType\\n    )\\n  {\\n    require(_in.length > 0, \\\"RLP item cannot be null.\\\");\\n\\n    uint256 ptr = _in.ptr;\\n    uint256 prefix;\\n    assembly {\\n      prefix := byte(0, mload(ptr))\\n    }\\n\\n    if (prefix <= 0x7f) {\\n      // Single byte.\\n\\n      return (0, 1, RLPItemType.DATA_ITEM);\\n    } else if (prefix <= 0xb7) {\\n      // Short string.\\n\\n      // slither-disable-next-line variable-scope\\n      uint256 strLen = prefix - 0x80;\\n\\n      require(_in.length > strLen, \\\"Invalid RLP short string.\\\");\\n\\n      return (1, strLen, RLPItemType.DATA_ITEM);\\n    } else if (prefix <= 0xbf) {\\n      // Long string.\\n      uint256 lenOfStrLen = prefix - 0xb7;\\n\\n      require(_in.length > lenOfStrLen, \\\"Invalid RLP long string length.\\\");\\n\\n      uint256 strLen;\\n      assembly {\\n        // Pick out the string length.\\n        strLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfStrLen)))\\n      }\\n\\n      require(_in.length > lenOfStrLen + strLen, \\\"Invalid RLP long string.\\\");\\n\\n      return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n    } else if (prefix <= 0xf7) {\\n      // Short list.\\n      // slither-disable-next-line variable-scope\\n      uint256 listLen = prefix - 0xc0;\\n\\n      require(_in.length > listLen, \\\"Invalid RLP short list.\\\");\\n\\n      return (1, listLen, RLPItemType.LIST_ITEM);\\n    } else {\\n      // Long list.\\n      uint256 lenOfListLen = prefix - 0xf7;\\n\\n      require(_in.length > lenOfListLen, \\\"Invalid RLP long list length.\\\");\\n\\n      uint256 listLen;\\n      assembly {\\n        // Pick out the list length.\\n        listLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfListLen)))\\n      }\\n\\n      require(_in.length > lenOfListLen + listLen, \\\"Invalid RLP long list.\\\");\\n\\n      return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n    }\\n  }\\n\\n  /**\\n   * Copies the bytes from a memory location.\\n   * @param _src Pointer to the location to read from.\\n   * @param _offset Offset to start reading from.\\n   * @param _length Number of bytes to read.\\n   * @return Copied bytes.\\n   */\\n  function _copy(\\n    uint256 _src,\\n    uint256 _offset,\\n    uint256 _length\\n  ) private pure returns (bytes memory) {\\n    bytes memory out = new bytes(_length);\\n    if (out.length == 0) {\\n      return out;\\n    }\\n\\n    uint256 src = _src + _offset;\\n    uint256 dest;\\n    assembly {\\n      dest := add(out, 32)\\n    }\\n\\n    // Copy over as many complete words as we can.\\n    for (uint256 i = 0; i < _length / 32; i++) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += 32;\\n      dest += 32;\\n    }\\n\\n    // Pick out the remaining bytes.\\n    uint256 mask;\\n    unchecked {\\n      mask = 256**(32 - (_length % 32)) - 1;\\n    }\\n\\n    assembly {\\n      mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n    }\\n    return out;\\n  }\\n\\n  /**\\n   * Copies an RLP item into bytes.\\n   * @param _in RLP item to copy.\\n   * @return Copied bytes.\\n   */\\n  function _copy(RLPItem memory _in) private pure returns (bytes memory) {\\n    return _copy(_in.ptr, 0, _in.length);\\n  }\\n}\\n\",\"keccak256\":\"0x5ebb8e6f1d06471c136840c82ee943787bced02a12bac8590fa644f31e380a2d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/SecureMerkleTrie.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/* Library Imports */\\nimport {MerkleTrie} from \\\"./MerkleTrie.sol\\\";\\n\\n/**\\n * @title SecureMerkleTrie\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/trie/Lib_SecureMerkleTrie.sol\\n */\\nlibrary SecureMerkleTrie {\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /**\\n   * @notice Verifies a proof that a given key/value pair is present in the\\n   * Merkle trie.\\n   * @param _key Key of the node to search for, as a hex string.\\n   * @param _value Value of the node to search for, as a hex string.\\n   * @param _proof Merkle trie inclusion proof for the desired node. Unlike\\n   * traditional Merkle trees, this proof is executed top-down and consists\\n   * of a list of RLP-encoded nodes that make a path down to the target node.\\n   * @param _root Known root of the Merkle trie. Used to verify that the\\n   * included proof is correctly constructed.\\n   * @return _verified `true` if the k/v pair exists in the trie, `false` otherwise.\\n   */\\n  function verifyInclusionProof(\\n    bytes memory _key,\\n    bytes memory _value,\\n    bytes memory _proof,\\n    bytes32 _root\\n  ) internal pure returns (bool _verified) {\\n    bytes memory key = _getSecureKey(_key);\\n    return MerkleTrie.verifyInclusionProof(key, _value, _proof, _root);\\n  }\\n\\n  /**\\n   * @notice Retrieves the value associated with a given key.\\n   * @param _key Key to search for, as hex bytes.\\n   * @param _proof Merkle trie inclusion proof for the key.\\n   * @param _root Known root of the Merkle trie.\\n   * @return _exists Whether or not the key exists.\\n   * @return _value Value of the key if it exists.\\n   */\\n  function get(\\n    bytes memory _key,\\n    bytes memory _proof,\\n    bytes32 _root\\n  ) internal pure returns (bool _exists, bytes memory _value) {\\n    bytes memory key = _getSecureKey(_key);\\n    return MerkleTrie.get(key, _proof, _root);\\n  }\\n\\n  /*********************\\n   * Private Functions *\\n   *********************/\\n\\n  /**\\n   * Computes the secure counterpart to a key.\\n   * @param _key Key to get a secure key from.\\n   * @return _secureKey Secure version of the key.\\n   */\\n  function _getSecureKey(bytes memory _key) private pure returns (bytes memory _secureKey) {\\n    return abi.encodePacked(keccak256(_key));\\n  }\\n}\\n\",\"keccak256\":\"0xd07a006a1a671d0091ca70d5d603c5b74b74ff0563b9387f359ad2d36668dec8\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4a68506b623f3b6e54552bace2d56e53602473faa24c3e2e5b78ff43bb99120d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(uint32[] calldata _domains, address[] calldata _connectors) external;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0x63a56570ba3c6e4622c1172c79d924fd91a0ff0d103e15885bcbe99cc783048d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/ambs/optimism/IStateCommitmentChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// modified from: https://github.com/ethereum-optimism/optimism/blob/fcfcf6e7e69801e63904ec53815db01a8d45dcac/packages/contracts/contracts/libraries/codec/Lib_OVMCodec.sol#L34-L40\\nstruct ChainBatchHeader {\\n  uint256 batchIndex;\\n  bytes32 batchRoot;\\n  uint256 batchSize;\\n  uint256 prevTotalElements;\\n  bytes extraData;\\n}\\n\\n// modified from: https://github.com/ethereum-optimism/optimism/blob/fcfcf6e7e69801e63904ec53815db01a8d45dcac/packages/contracts/contracts/libraries/codec/Lib_OVMCodec.sol#L42-L45\\nstruct ChainInclusionProof {\\n  uint256 index;\\n  bytes32[] siblings;\\n}\\n\\n// modified from: https://github.com/ethereum-optimism/optimism/blob/fcfcf6e7e69801e63904ec53815db01a8d45dcac/packages/contracts/contracts/L1/messaging/IL1CrossDomainMessenger.sol#L18-L24\\nstruct L2MessageInclusionProof {\\n  bytes32 stateRoot;\\n  ChainBatchHeader stateRootBatchHeader;\\n  ChainInclusionProof stateRootProof;\\n  bytes stateTrieWitness;\\n  bytes storageTrieWitness;\\n}\\n\\n/**\\n * @title IStateCommitmentChain\\n *\\n * @dev modified from: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/rollup/IStateCommitmentChain.sol\\n */\\ninterface IStateCommitmentChain {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  event StateBatchAppended(\\n    uint256 indexed _batchIndex,\\n    bytes32 _batchRoot,\\n    uint256 _batchSize,\\n    uint256 _prevTotalElements,\\n    bytes _extraData\\n  );\\n\\n  event StateBatchDeleted(uint256 indexed _batchIndex, bytes32 _batchRoot);\\n\\n  /********************\\n   * Public Functions *\\n   ********************/\\n\\n  /**\\n   * Retrieves the total number of elements submitted.\\n   * @return _totalElements Total submitted elements.\\n   */\\n  function getTotalElements() external view returns (uint256 _totalElements);\\n\\n  /**\\n   * Retrieves the total number of batches submitted.\\n   * @return _totalBatches Total submitted batches.\\n   */\\n  function getTotalBatches() external view returns (uint256 _totalBatches);\\n\\n  /**\\n   * Retrieves the timestamp of the last batch submitted by the sequencer.\\n   * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n   */\\n  function getLastSequencerTimestamp() external view returns (uint256 _lastSequencerTimestamp);\\n\\n  /**\\n   * Appends a batch of state roots to the chain.\\n   * @param _batch Batch of state roots.\\n   * @param _shouldStartAtElement Index of the element at which this batch should start.\\n   */\\n  function appendStateBatch(bytes32[] calldata _batch, uint256 _shouldStartAtElement) external;\\n\\n  /**\\n   * Deletes all state roots after (and including) a given batch.\\n   * @param _batchHeader Header of the batch to start deleting from.\\n   */\\n  function deleteStateBatch(ChainBatchHeader memory _batchHeader) external;\\n\\n  /**\\n   * Verifies a batch inclusion proof.\\n   * @param _element Hash of the element to verify a proof for.\\n   * @param _batchHeader Header of the batch in which the element was included.\\n   * @param _proof Merkle inclusion proof for the element.\\n   */\\n  function verifyStateCommitment(\\n    bytes32 _element,\\n    ChainBatchHeader memory _batchHeader,\\n    ChainInclusionProof memory _proof\\n  ) external view returns (bool _verified);\\n\\n  /**\\n   * Checks whether a given batch is still inside its fraud proof window.\\n   * @param _batchHeader Header of the batch to check.\\n   * @return _inside Whether or not the batch is inside the fraud proof window.\\n   */\\n  function insideFraudProofWindow(ChainBatchHeader memory _batchHeader) external view returns (bool _inside);\\n}\\n\",\"keccak256\":\"0xc7645098cf88b840a71b3bf6f71d1ea83f6223e3770f70be728611c1c1137d5b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/ambs/optimism/OptimismAmb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev The optimism bridge shares both of these functions, but it is important\\n * to note that when going from L2 -> L1, the message cannot be processed by the\\n * AMB until the challenge period elapses.\\n *\\n * HOWEVER, before the challenge elapses, you can read the state of the L2 as it is\\n * placed on mainnet. By processing data from the L2 state, we are able to \\\"circumvent\\\"\\n * this delay to a reasonable degree.\\n *\\n * This means that for messages going L1 -> L2, you can call \\\"processMessage\\\" and expect\\n * the call to be executed to pass up the aggregate root. When going from L2 -> L1, you\\n * must read the root from the L2 state\\n *\\n * L2 messenger: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/L2CrossDomainMessenger.sol\\n * L1 messenger: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol\\n */\\ninterface OptimismAmb {\\n  function sendMessage(\\n    address _target,\\n    bytes memory _message,\\n    uint32 _gasLimit\\n  ) external;\\n\\n  function xDomainMessageSender() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2e4f4441bf620cdae12cf679adcdd285912656bab4fd6a86d8953c835bdf7028\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __GAP;\\n}\\n\",\"keccak256\":\"0xf4c67a5db702cb9775ad3a0ed49bbe137e5a55b4000c507dd6fef3397f3607e3\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0xfb763d8c311e5972fd6e7d7334ce10cc3f5dbe8a922308b3c160bfb722109f63\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe3b9e398dff8870d5a597de93a9cb0aa139f27ed27c12bbe78c8ff60d85b0aaf\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620033f3380380620033f38339810160408190526200003591620002fa565b8686868686868585858585856200004c33620001bf565b8563ffffffff16600003620000975760405162461bcd60e51b815260206004820152600c60248201526b32b6b83a3c903237b6b0b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b038316620000e35760405162461bcd60e51b815260206004820152601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b60448201526064016200008e565b63ffffffff8087166080526001600160a01b0380861660a05284811660c05290861660e0528216156200011b576200011b826200021e565b80156200012d576200012d8162000287565b604080516001600160a01b0386811682528581166020830152841681830152905163ffffffff87811692908916917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f09181900360600190a35050600580546001600160a01b0319166001600160a01b039c909c169b909b17909a5550620003869e505050505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b60045460408051918252602082018390527f34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511910160405180910390a1600455565b805163ffffffff81168114620002dd57600080fd5b919050565b80516001600160a01b0381168114620002dd57600080fd5b600080600080600080600060e0888a0312156200031657600080fd5b6200032188620002c8565b96506200033160208901620002c8565b95506200034160408901620002e2565b94506200035160608901620002e2565b93506200036160808901620002e2565b925060a088015191506200037860c08901620002e2565b905092959891949750929550565b60805160a05160c05160e051613009620003ea6000396000818161017c015261091f015260008181610219015281816106f1015261095a0152600081816103280152818161036801528181610d5d0152610dea015260006101df01526130096000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806382646a58116100b8578063cc3942831161007c578063cc394283146102e4578063cf796c75146102f7578063d1851c9214610300578063d232c22014610311578063d69f9d6114610323578063db1b76591461034a57600080fd5b806382646a58146102725780638da5cb5b14610285578063b1f8100d14610296578063c1f0808a146102a9578063c5b350df146102dc57600080fd5b80635bd11efc1161010a5780635bd11efc146102015780635f61e3ec146102145780636a42b8f81461023b5780636e2edb4e146102445780636eb67a5114610257578063715018a61461026a57600080fd5b80630f329ef81461014757806314168416146101775780633cf52ffb146101b35780634ff746f6146101c557806352a9674b146101da575b600080fd5b60055461015a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161016e565b6002545b60405190815260200161016e565b6101d86101d336600461281b565b61035d565b005b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b6101d861020f36600461286d565b61040c565b61015a7f000000000000000000000000000000000000000000000000000000000000000081565b62093a806101b7565b6101d86102523660046129d3565b610443565b6101d8610265366004612b0c565b6105f3565b6101d8610627565b6101d861028036600461281b565b6106e6565b6000546001600160a01b031661015a565b6101d86102a436600461286d565b610787565b6102cc6102b7366004612b0c565b60066020526000908152604090205460ff1681565b604051901515815260200161016e565b6101d861082c565b60035461015a906001600160a01b031681565b6101b760045481565b6001546001600160a01b031661015a565b6000546001600160a01b0316156102cc565b61015a7f000000000000000000000000000000000000000000000000000000000000000081565b6102cc61035836600461286d565b610887565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103c75760405162461bcd60e51b81526004016103be9060208082526004908201526310a0a6a160e11b604082015260600190565b60405180910390fd5b6103d081610898565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced8133604051610401929190612b81565b60405180910390a150565b6000546001600160a01b03163314610437576040516311a8a1bb60e31b815260040160405180910390fd5b610440816109bc565b50565b6003546001600160a01b038581169116146104935760405162461bcd60e51b815260206004820152601060248201526f10b6b4b93937b921b7b73732b1ba37b960811b60448201526064016103be565b6001600160a01b03851630146104d35760405162461bcd60e51b8152602060048201526005602482015264217468697360d81b60448201526064016103be565b60006104e186868686610a25565b90506104ed8183610a72565b6105225760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b60448201526064016103be565b600061052e8582610a95565b9050600061056561054d6020601885901c6001600160601b0316612bc1565b62ffffff198416906001600160601b03166020610ab9565b90506105918160405160200161057d91815260200190565b604051602081830303815290604052610898565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced816040516020016105c591815260200190565b60408051601f19818403018152908290526105e1913390612b81565b60405180910390a15050505050505050565b6000546001600160a01b0316331461061e576040516311a8a1bb60e31b815260040160405180910390fd5b61044081610c15565b6000546001600160a01b03163314610652576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361067557604051630e4b303f60e21b815260040160405180910390fd5b62093a80600254426106879190612be9565b116106a5576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b0316156106cf576040516323295ef960e01b815260040160405180910390fd5b6001546106e4906001600160a01b0316610c56565b565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461074d5760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064016103be565b61075681610cb5565b7fa69577a1e55dd0712044e7078b408c39fadff8b3e1b334b202ff17e70eda9fdc8133604051610401929190612b81565b6000546001600160a01b031633146107b2576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b0382811691161480156107d757506001600160a01b03811615155b156107f5576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361082357604051634a2fb73f60e11b815260040160405180910390fd5b61044081610d95565b6001546001600160a01b03163314610857576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426108699190612be9565b116106cf5760405163d39c12bb60e01b815260040160405180910390fd5b600061089282610de3565b92915050565b80516020146108d35760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016103be565b60006108de82612c00565b60008181526006602052604090205490915060ff166109b85760008181526006602052604090819020805460ff191660011790555163473ec9fd60e11b81527f000000000000000000000000000000000000000000000000000000000000000063ffffffff166004820152602481018290526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e7d93fa906044015b600060405180830381600087803b15801561099f57600080fd5b505af11580156109b3573d6000803e3d6000fd5b505050505b5050565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b606084848484604051602401610a3e9493929190612c24565b60408051601f198184030181529190526020810180516001600160e01b031663cbd4ece960e01b1790529050949350505050565b6000610a7d82610e0f565b8015610a8e5750610a8e8383610e90565b9392505050565b815160009060208401610ab064ffffffffff8516828461101f565b95945050505050565b60008160ff16600003610ace57506000610a8e565b610ae18460181c6001600160601b031690565b6001600160601b0316610af760ff841685612c61565b1115610b5b57610b42610b138560781c6001600160601b031690565b6001600160601b0316610b2f8660181c6001600160601b031690565b6001600160601b0316858560ff16611066565b60405162461bcd60e51b81526004016103be9190612c79565b60208260ff161115610bd55760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016103be565b600882026000610bee8660781c6001600160601b031690565b6001600160601b03169490940151600160ff1b600019929092019190911d16949350505050565b60045460408051918252602082018390527f34b09b90f4cfa8747776f5cffd7d53ce7863a9b1f1fc8121903d22543a256511910160405180910390a1600455565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051602014610cf05760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016103be565b6000634ff746f660e01b82604051602401610d0b9190612c79565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252600354600480549351633dbb202b60e01b81529294506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694633dbb202b946109859490921692879201612c8c565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b60006108927f0000000000000000000000000000000000000000000000000000000000000000836110d4565b600554815160208301516040808501519051634d69ee5760e01b81526000946001600160a01b031693634d69ee5793610e4f939192909190600401612cc6565b602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108929190612d71565b600080836007602160991b01604051602001610ead929190612d93565b60408051601f1981840301815282825280516020918201209083015260009082015260600160408051601f19818403018152908290528051602091820120602160f91b9183019190915291506000908190610f219060340160408051601f1981840301815291905260608701518751611195565b9092509050600182151514610fb45760405162461bcd60e51b815260206004820152604d60248201527f4d6573736167652070617373696e67207072656465706c6f7920686173206e6f60448201527f74206265656e20696e697469616c697a6564206f7220696e76616c696420707260648201526c37b7b310383937bb34b232b21760991b608482015260a4016103be565b6000610fbf826111be565b905061101484604051602001610fd791815260200190565b60408051601f1981840301815290829052600160f81b60208301529060210160405160208183030381529060405288608001518460400151611282565b979650505050505050565b60008061102c8385612c61565b905060405181111561103c575060005b806000036110515762ffffff19915050610a8e565b5050606092831b9190911790911b1760181b90565b60606000611073866112a6565b9150506000611081866112a6565b915050600061108f866112a6565b915050600061109d866112a6565b915050838383836040516020016110b79493929190612dca565b604051602081830303815290604052945050505050949350505050565b6000336001600160a01b038416146111185760405162461bcd60e51b81526020600482015260076024820152662162726964676560c81b60448201526064016103be565b816001600160a01b0316836001600160a01b0316636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190612ea1565b6001600160a01b0316149392505050565b6000606060006111a486611354565b90506111b1818686611386565b9250925050935093915050565b6040805160808101825260008082526020820181905291810182905260608101829052906111eb83611461565b9050604051806080016040528061121b8360008151811061120e5761120e612ebe565b6020026020010151611494565b81526020016112368360018151811061120e5761120e612ebe565b815260200161125e8360028151811061125157611251612ebe565b602002602001015161149b565b81526020016112798360038151811061125157611251612ebe565b90529392505050565b60008061128e86611354565b905061129c8186868661159d565b9695505050505050565b600080601f5b600f8160ff1611156112fb5760006112c5826008612ed4565b60ff1685901c90506112d6816115d3565b61ffff16841793508160ff166010146112f157601084901b93505b50600019016112ac565b50600f5b60ff8160ff16101561134e576000611318826008612ed4565b60ff1685901c9050611329816115d3565b61ffff16831792508160ff1660001461134457601083901b92505b50600019016112ff565b50915091565b6060818051906020012060405160200161137091815260200190565b6040516020818303038152906040529050919050565b60006060600061139585611605565b905060008060006113a7848a89611700565b815192955090935091501580806113bb5750815b6114075760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e00000000000060448201526064016103be565b600081611423576040518060200160405280600081525061144f565b61144f86611432600188612be9565b8151811061144257611442612ebe565b6020026020010151611b1f565b919b919a509098505050505050505050565b60408051808201825260008082526020918201528151808301909252825182528083019082015260609061089290611b49565b6000610892825b60006021826000015111156114f25760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e00000000000060448201526064016103be565b600080600061150085611d35565b91945092509050600081600181111561151b5761151b612efd565b146115685760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e00000000000060448201526064016103be565b600083866020015161157a9190612c61565b8051909150602084101561129c5760208490036101000a90049695505050505050565b60008060006115ad878686611386565b915091508180156110145750805160208083019190912087519188019190912014611014565b60006115e560048360ff16901c61207f565b60ff1661ffff919091161760081b6115fc8261207f565b60ff1617919050565b6060600061161283611461565b90506000815167ffffffffffffffff81111561163057611630612718565b60405190808252806020026020018201604052801561167557816020015b604080518082019091526060808252602082015281526020019060019003908161164e5790505b50905060005b82518110156116f85760006116a884838151811061169b5761169b612ebe565b60200260200101516121cc565b905060405180604001604052808281526020016116c483611461565b8152508383815181106116d9576116d9612ebe565b60200260200101819052505080806116f090612f13565b91505061167b565b509392505050565b6000606081808061171087612253565b90506000869050600080611737604051806040016040528060608152602001606081525090565b60005b8c51811015611af7578c818151811061175557611755612ebe565b60200260200101519150828461176b9190612c61565b9350611778600188612c61565b9650836000036117d3578151805160209091012085146117ce5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b60448201526064016103be565b611890565b815151602011611835578151805160209091012085146117ce5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c2068617368000000000060448201526064016103be565b84611843836000015161238e565b146118905760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f6465206861736800000000000060448201526064016103be565b61189c60106001612c61565b8260200151510361190e5785518414611af75760008685815181106118c3576118c3612ebe565b602001015160f81c60f81b60f81c9050600083602001518260ff16815181106118ee576118ee612ebe565b60200260200101519050611901816123b6565b9650600194505050611ae5565b600282602001515103611a9d576000611926836123ec565b905060008160008151811061193d5761193d612ebe565b016020015160f81c90506000611954600283612f42565b61195f906002612f64565b90506000611970848360ff16612410565b9050600061197e8b8a612410565b9050600061198c8383612446565b905060ff8516600214806119a3575060ff85166003145b156119dd578083511480156119b85750808251145b156119ca576119c7818b612c61565b99505b50600160ff1b9950611af7945050505050565b60ff851615806119f0575060ff85166001145b15611a465782518114611a105750600160ff1b9950611af7945050505050565b611a378860200151600181518110611a2a57611a2a612ebe565b60200260200101516123b6565b9a509750611ae5945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b60648201526084016103be565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e00000060448201526064016103be565b80611aef81612f13565b91505061173a565b50600160ff1b841486611b0a8786612410565b909e909d50909b509950505050505050505050565b6020810151805160609161089291611b3990600190612be9565b8151811061169b5761169b612ebe565b6060600080611b5784611d35565b91935090915060019050816001811115611b7357611b73612efd565b14611bc05760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e00000000000000000060448201526064016103be565b6040805160208082526104208201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611bd95790505090506000835b8651811015611d2a5760208210611c725760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b60648201526084016103be565b600080611caf6040518060400160405280858c60000151611c939190612be9565b8152602001858c60200151611ca89190612c61565b9052611d35565b509150915060405180604001604052808383611ccb9190612c61565b8152602001848b60200151611ce09190612c61565b815250858581518110611cf557611cf5612ebe565b6020908102919091010152611d0b600185612c61565b9350611d178183612c61565b611d219084612c61565b92505050611c06565b508152949350505050565b600080600080846000015111611d8d5760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e000000000000000060448201526064016103be565b6020840151805160001a607f8111611db2576000600160009450945094505050612078565b60b78111611e2e576000611dc7608083612be9565b905080876000015111611e1c5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e0000000000000060448201526064016103be565b60019550935060009250612078915050565b60bf8111611f1d576000611e4360b783612be9565b905080876000015111611e985760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e0060448201526064016103be565b600183015160208290036101000a9004611eb28183612c61565b885111611f015760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e000000000000000060448201526064016103be565b611f0c826001612c61565b965094506000935061207892505050565b60f78111611f98576000611f3260c083612be9565b905080876000015111611f875760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e00000000000000000060448201526064016103be565b600195509350849250612078915050565b6000611fa560f783612be9565b905080876000015111611ffa5760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e00000060448201526064016103be565b600183015160208290036101000a90046120148183612c61565b88511161205c5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b60448201526064016103be565b612067826001612c61565b965094506001935061207892505050565b9193909250565b600060f08083179060ff8216900361209a5750603092915050565b8060ff1660f1036120ae5750603192915050565b8060ff1660f2036120c25750603292915050565b8060ff1660f3036120d65750603392915050565b8060ff1660f4036120ea5750603492915050565b8060ff1660f5036120fe5750603592915050565b8060ff1660f6036121125750603692915050565b8060ff1660f7036121265750603792915050565b8060ff1660f80361213a5750603892915050565b8060ff1660f90361214e5750603992915050565b8060ff1660fa036121625750606192915050565b8060ff1660fb036121765750606292915050565b8060ff1660fc0361218a5750606392915050565b8060ff1660fd0361219e5750606492915050565b8060ff1660fe036121b25750606592915050565b8060ff1660ff036121c65750606692915050565b50919050565b606060008060006121dc85611d35565b9194509250905060008160018111156121f7576121f7612efd565b146122445760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e000000000000000060448201526064016103be565b610ab0856020015184846124c2565b60606000825160026122659190612f87565b67ffffffffffffffff81111561227d5761227d612718565b6040519080825280601f01601f1916602001820160405280156122a7576020820181803683370190505b50905060005b83518110156123875760048482815181106122ca576122ca612ebe565b01602001516001600160f81b031916901c826122e7836002612f87565b815181106122f7576122f7612ebe565b60200101906001600160f81b031916908160001a905350601084828151811061232257612322612ebe565b0160200151612334919060f81c612f42565b60f81b82612343836002612f87565b61234e906001612c61565b8151811061235e5761235e612ebe565b60200101906001600160f81b031916908160001a9053508061237f81612f13565b9150506122ad565b5092915050565b60006020825110156123a257506020015190565b818060200190518101906108929190612fa6565b600060606020836000015110156123d7576123d0836125a0565b90506123e3565b6123e0836121cc565b90505b610a8e8161238e565b606061089261240b836020015160008151811061169b5761169b612ebe565b612253565b60608251821061242f5750604080516020810190915260008152610892565b610a8e83838486516124419190612be9565b6125ab565b6000805b80845111801561245a5750808351115b80156124ab575082818151811061247357612473612ebe565b602001015160f81c60f81b6001600160f81b03191684828151811061249a5761249a612ebe565b01602001516001600160f81b031916145b15610a8e57806124ba81612f13565b91505061244a565b606060008267ffffffffffffffff8111156124df576124df612718565b6040519080825280601f01601f191660200182016040528015612509576020820181803683370190505b509050805160000361251c579050610a8e565b60006125288587612c61565b90506020820160005b61253c602087612fbf565b8110156125735782518252612552602084612c61565b925061255f602083612c61565b91508061256b81612f13565b915050612531565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b606061089282612702565b6060816125b981601f612c61565b10156125f85760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016103be565b826126038382612c61565b10156126425760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016103be565b61264c8284612c61565b845110156126905760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016103be565b6060821580156126af57604051915060008252602082016040526126f9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156126e85780518352602092830192016126d0565b5050858452601f01601f1916604052505b50949350505050565b60606108928260200151600084600001516124c2565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561275157612751612718565b60405290565b60405160a0810167ffffffffffffffff8111828210171561275157612751612718565b604051601f8201601f1916810167ffffffffffffffff811182821017156127a3576127a3612718565b604052919050565b600082601f8301126127bc57600080fd5b813567ffffffffffffffff8111156127d6576127d6612718565b6127e9601f8201601f191660200161277a565b8181528460208386010111156127fe57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561282d57600080fd5b813567ffffffffffffffff81111561284457600080fd5b612850848285016127ab565b949350505050565b6001600160a01b038116811461044057600080fd5b60006020828403121561287f57600080fd5b8135610a8e81612858565b600060a0828403121561289c57600080fd5b60405160a0810167ffffffffffffffff82821081831117156128c0576128c0612718565b816040528293508435835260208501356020840152604085013560408401526060850135606084015260808501359150808211156128fd57600080fd5b5061290a858286016127ab565b6080830152505092915050565b60006040828403121561292957600080fd5b61293161272e565b90508135815260208083013567ffffffffffffffff8082111561295357600080fd5b818501915085601f83011261296757600080fd5b81358181111561297957612979612718565b8060051b915061298a84830161277a565b81815291830184019184810190888411156129a457600080fd5b938501935b838510156129c2578435825293850193908501906129a9565b808688015250505050505092915050565b600080600080600060a086880312156129eb57600080fd5b85356129f681612858565b94506020860135612a0681612858565b9350604086013567ffffffffffffffff80821115612a2357600080fd5b612a2f89838a016127ab565b9450606088013593506080880135915080821115612a4c57600080fd5b9087019060a0828a031215612a6057600080fd5b612a68612757565b82358152602083013582811115612a7e57600080fd5b612a8a8b82860161288a565b602083015250604083013582811115612aa257600080fd5b612aae8b828601612917565b604083015250606083013582811115612ac657600080fd5b612ad28b8286016127ab565b606083015250608083013582811115612aea57600080fd5b612af68b8286016127ab565b6080830152508093505050509295509295909350565b600060208284031215612b1e57600080fd5b5035919050565b60005b83811015612b40578181015183820152602001612b28565b83811115612b4f576000848401525b50505050565b60008151808452612b6d816020860160208601612b25565b601f01601f19169290920160200192915050565b604081526000612b946040830185612b55565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b60006001600160601b0383811690831681811015612be157612be1612bab565b039392505050565b600082821015612bfb57612bfb612bab565b500390565b805160208083015191908110156121c65760001960209190910360031b1b16919050565b6001600160a01b03858116825284166020820152608060408201819052600090612c5090830185612b55565b905082606083015295945050505050565b60008219821115612c7457612c74612bab565b500190565b602081526000610a8e6020830184612b55565b6001600160a01b0384168152606060208201819052600090612cb090830185612b55565b905063ffffffff83166040830152949350505050565b8381526000602060608184015284516060840152808501516080840152604085015160a0840152606085015160c0840152608085015160a060e0850152612d11610100850182612b55565b905083810360408501526040810185518252828601516040848401528181518084526060850191508583019450600093505b80841015612d635784518252938501936001939093019290850190612d43565b509998505050505050505050565b600060208284031215612d8357600080fd5b81518015158114610a8e57600080fd5b60008351612da5818460208801612b25565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d820161129c565b600060208284031215612eb357600080fd5b8151610a8e81612858565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168160ff0481118215151615612ef557612ef5612bab565b029392505050565b634e487b7160e01b600052602160045260246000fd5b600060018201612f2557612f25612bab565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600060ff831680612f5557612f55612f2c565b8060ff84160691505092915050565b600060ff821660ff841680821015612f7e57612f7e612bab565b90039392505050565b6000816000190483118215151615612fa157612fa1612bab565b500290565b600060208284031215612fb857600080fd5b5051919050565b600082612fce57612fce612f2c565b50049056fea2646970667358221220ab265ad70ad95ca083ae11cca24fbdfaa3a983b80e8bb036c81f429588d6ea0f64736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "processMessage(bytes)": {
        "details": "This is called by AMBs to process messages originating from mirror connector"
      },
      "processMessageFromRoot(address,address,bytes,uint256,(bytes32,(uint256,bytes32,uint256,uint256,bytes),(uint256,bytes32[]),bytes,bytes))": {
        "details": "modified from: https://github.com/ethereum-optimism/optimism/blob/9973c1da3211e094a180a8a96ba9f8bb1ab1b389/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L165"
      },
      "sendMessage(bytes)": {
        "details": "This is called by the root manager *only* on mainnet to propagate the aggregate root"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MessageProcessed(bytes,address)": {
        "notice": "Emitted whenever a message is successfully received over an AMB"
      },
      "MessageSent(bytes,address)": {
        "notice": "Emitted whenever a message is successfully sent over an AMB"
      }
    },
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "MIRROR_DOMAIN()": {
        "notice": "The domain of the corresponding messaging (i.e. Connector) contract."
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "mirrorGas()": {
        "notice": "Gas costs forwarded to the `processMessage` call on the mirror domain"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processMessage(bytes)": {
        "notice": "Processes a message received by an AMB"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "sendMessage(bytes)": {
        "notice": "Sends a message over the amb"
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "setMirrorGas(uint256)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "verifySender(address)": {
        "notice": "Checks the cross domain sender for a given address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 47175,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 47177,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 47179,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 37128,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 37131,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "mirrorGas",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 39869,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "stateCommitmentChain",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IStateCommitmentChain)45787"
      },
      {
        "astId": 39873,
        "contract": "contracts/messaging/connectors/optimism/OptimismHubConnector.sol:OptimismHubConnector",
        "label": "processed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStateCommitmentChain)45787": {
        "encoding": "inplace",
        "label": "contract IStateCommitmentChain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}