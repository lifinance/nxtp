schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type mumbai_AggregateRoot {
  id: ID!
  root: mumbai_Bytes!
}

input mumbai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AggregateRoot_orderBy {
  id
  root
}

type mumbai_Asset {
  id: ID!
  key: mumbai_Bytes
  local: mumbai_Bytes!
  adoptedAsset: mumbai_Bytes!
  canonicalId: mumbai_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type mumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: mumbai_Router!
  asset: mumbai_Asset!
}

input mumbai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mumbai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mumbai_Asset_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input mumbai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: mumbai_Bytes
  key_not: mumbai_Bytes
  key_in: [mumbai_Bytes!]
  key_not_in: [mumbai_Bytes!]
  key_contains: mumbai_Bytes
  key_not_contains: mumbai_Bytes
  local: mumbai_Bytes
  local_not: mumbai_Bytes
  local_in: [mumbai_Bytes!]
  local_not_in: [mumbai_Bytes!]
  local_contains: mumbai_Bytes
  local_not_contains: mumbai_Bytes
  adoptedAsset: mumbai_Bytes
  adoptedAsset_not: mumbai_Bytes
  adoptedAsset_in: [mumbai_Bytes!]
  adoptedAsset_not_in: [mumbai_Bytes!]
  adoptedAsset_contains: mumbai_Bytes
  adoptedAsset_not_contains: mumbai_Bytes
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar mumbai_BigDecimal

scalar BigInt

input mumbai_BlockChangedFilter {
  number_gte: Int!
}

input mumbai_Block_height {
  hash: mumbai_Bytes
  number: Int
  number_gte: Int
}

scalar mumbai_Bytes

type mumbai_DestinationMessage {
  id: ID!
  leaf: mumbai_Bytes
  processed: Boolean
  returnData: mumbai_Bytes
  transactionHash: mumbai_Bytes
}

input mumbai_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: mumbai_Bytes
  leaf_not: mumbai_Bytes
  leaf_in: [mumbai_Bytes!]
  leaf_not_in: [mumbai_Bytes!]
  leaf_contains: mumbai_Bytes
  leaf_not_contains: mumbai_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: mumbai_Bytes
  returnData_not: mumbai_Bytes
  returnData_in: [mumbai_Bytes!]
  returnData_not_in: [mumbai_Bytes!]
  returnData_contains: mumbai_Bytes
  returnData_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type mumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  to: mumbai_Bytes
  callData: mumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: mumbai_Bytes
  recovery: mumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: mumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: mumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mumbai_Router_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_Router_filter): [mumbai_Router!]
  originSender: mumbai_Bytes
  transactingAsset: mumbai_Bytes
  transactingAmount: BigInt
  localAsset: mumbai_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input mumbai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: mumbai_Bytes
  agent_not: mumbai_Bytes
  agent_in: [mumbai_Bytes!]
  agent_not_in: [mumbai_Bytes!]
  agent_contains: mumbai_Bytes
  agent_not_contains: mumbai_Bytes
  recovery: mumbai_Bytes
  recovery_not: mumbai_Bytes
  recovery_in: [mumbai_Bytes!]
  recovery_not_in: [mumbai_Bytes!]
  recovery_contains: mumbai_Bytes
  recovery_not_contains: mumbai_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: mumbai_Bytes
  callback_not: mumbai_Bytes
  callback_in: [mumbai_Bytes!]
  callback_not_in: [mumbai_Bytes!]
  callback_contains: mumbai_Bytes
  callback_not_contains: mumbai_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: mumbai_Router_filter
  originSender: mumbai_Bytes
  originSender_not: mumbai_Bytes
  originSender_in: [mumbai_Bytes!]
  originSender_not_in: [mumbai_Bytes!]
  originSender_contains: mumbai_Bytes
  originSender_not_contains: mumbai_Bytes
  transactingAsset: mumbai_Bytes
  transactingAsset_not: mumbai_Bytes
  transactingAsset_in: [mumbai_Bytes!]
  transactingAsset_not_in: [mumbai_Bytes!]
  transactingAsset_contains: mumbai_Bytes
  transactingAsset_not_contains: mumbai_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: mumbai_Bytes
  localAsset_not: mumbai_Bytes
  localAsset_in: [mumbai_Bytes!]
  localAsset_not_in: [mumbai_Bytes!]
  localAsset_contains: mumbai_Bytes
  localAsset_not_contains: mumbai_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: mumbai_Bytes
  executedCaller_not: mumbai_Bytes
  executedCaller_in: [mumbai_Bytes!]
  executedCaller_not_in: [mumbai_Bytes!]
  executedCaller_contains: mumbai_Bytes
  executedCaller_not_contains: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
  executedTransactionHash_not: mumbai_Bytes
  executedTransactionHash_in: [mumbai_Bytes!]
  executedTransactionHash_not_in: [mumbai_Bytes!]
  executedTransactionHash_contains: mumbai_Bytes
  executedTransactionHash_not_contains: mumbai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: mumbai_Bytes
  reconciledCaller_not: mumbai_Bytes
  reconciledCaller_in: [mumbai_Bytes!]
  reconciledCaller_not_in: [mumbai_Bytes!]
  reconciledCaller_contains: mumbai_Bytes
  reconciledCaller_not_contains: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
  reconciledTransactionHash_not: mumbai_Bytes
  reconciledTransactionHash_in: [mumbai_Bytes!]
  reconciledTransactionHash_not_in: [mumbai_Bytes!]
  reconciledTransactionHash_contains: mumbai_Bytes
  reconciledTransactionHash_not_contains: mumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum mumbai_OrderDirection {
  asc
  desc
}

type mumbai_OriginMessage {
  id: ID!
  transferId: mumbai_Bytes
  destinationDomain: BigInt
  leaf: mumbai_Bytes
  index: BigInt
  root: mumbai_Bytes
  message: mumbai_Bytes
  transactionHash: mumbai_Bytes
}

input mumbai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: mumbai_Bytes
  leaf_not: mumbai_Bytes
  leaf_in: [mumbai_Bytes!]
  leaf_not_in: [mumbai_Bytes!]
  leaf_contains: mumbai_Bytes
  leaf_not_contains: mumbai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  message: mumbai_Bytes
  message_not: mumbai_Bytes
  message_in: [mumbai_Bytes!]
  message_not_in: [mumbai_Bytes!]
  message_contains: mumbai_Bytes
  message_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type mumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  to: mumbai_Bytes
  callData: mumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: mumbai_Bytes
  recovery: mumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: mumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: mumbai_TransferStatus
  originMinOut: BigInt
  transactingAsset: mumbai_Bytes
  transactingAmount: BigInt
  bridgedAsset: mumbai_Bytes
  bridgedAmount: BigInt
  message: mumbai_OriginMessage
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mumbai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: mumbai_Bytes
  agent_not: mumbai_Bytes
  agent_in: [mumbai_Bytes!]
  agent_not_in: [mumbai_Bytes!]
  agent_contains: mumbai_Bytes
  agent_not_contains: mumbai_Bytes
  recovery: mumbai_Bytes
  recovery_not: mumbai_Bytes
  recovery_in: [mumbai_Bytes!]
  recovery_not_in: [mumbai_Bytes!]
  recovery_contains: mumbai_Bytes
  recovery_not_contains: mumbai_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: mumbai_Bytes
  callback_not: mumbai_Bytes
  callback_in: [mumbai_Bytes!]
  callback_not_in: [mumbai_Bytes!]
  callback_contains: mumbai_Bytes
  callback_not_contains: mumbai_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: mumbai_Bytes
  transactingAsset_not: mumbai_Bytes
  transactingAsset_in: [mumbai_Bytes!]
  transactingAsset_not_in: [mumbai_Bytes!]
  transactingAsset_contains: mumbai_Bytes
  transactingAsset_not_contains: mumbai_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: mumbai_Bytes
  bridgedAsset_not: mumbai_Bytes
  bridgedAsset_in: [mumbai_Bytes!]
  bridgedAsset_not_in: [mumbai_Bytes!]
  bridgedAsset_contains: mumbai_Bytes
  bridgedAsset_not_contains: mumbai_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: mumbai_OriginMessage_filter
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Relayer!]!
  mumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwap!]!
  mumbai_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SponsorVault
  mumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SponsorVault_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SponsorVault!]!
  mumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginMessage!]!
  mumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationMessage
  mumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationMessage!]!
  mumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_rootMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessage
  mumbai_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessage!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
}

type mumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mumbai_Bytes
}

input mumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mumbai_Bytes
  relayer_not: mumbai_Bytes
  relayer_in: [mumbai_Bytes!]
  relayer_not_in: [mumbai_Bytes!]
  relayer_contains: mumbai_Bytes
  relayer_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type mumbai_RootMessage {
  id: ID!
  data: mumbai_Bytes
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
  logIndex: BigInt
  transactionLogIndex: BigInt
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mumbai_RootMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  data: mumbai_Bytes
  data_not: mumbai_Bytes
  data_in: [mumbai_Bytes!]
  data_not_in: [mumbai_Bytes!]
  data_contains: mumbai_Bytes
  data_not_contains: mumbai_Bytes
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  transactionLogIndex: BigInt
  transactionLogIndex_not: BigInt
  transactionLogIndex_gt: BigInt
  transactionLogIndex_lt: BigInt
  transactionLogIndex_gte: BigInt
  transactionLogIndex_lte: BigInt
  transactionLogIndex_in: [BigInt!]
  transactionLogIndex_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_RootMessage_orderBy {
  id
  data
  caller
  transactionHash
  logIndex
  transactionLogIndex
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: mumbai_Bytes
  recipient: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mumbai_AssetBalance_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_AssetBalance_filter): [mumbai_AssetBalance!]!
}

input mumbai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: mumbai_Bytes
  owner_not: mumbai_Bytes
  owner_in: [mumbai_Bytes!]
  owner_not_in: [mumbai_Bytes!]
  owner_contains: mumbai_Bytes
  owner_not_contains: mumbai_Bytes
  recipient: mumbai_Bytes
  recipient_not: mumbai_Bytes
  recipient_in: [mumbai_Bytes!]
  recipient_not_in: [mumbai_Bytes!]
  recipient_contains: mumbai_Bytes
  recipient_not_contains: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedOwner_not: mumbai_Bytes
  proposedOwner_in: [mumbai_Bytes!]
  proposedOwner_not_in: [mumbai_Bytes!]
  proposedOwner_contains: mumbai_Bytes
  proposedOwner_not_contains: mumbai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: mumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type mumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mumbai_Bytes!
}

input mumbai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type mumbai_SponsorVault {
  id: ID!
  sponsorVault: mumbai_Bytes!
}

input mumbai_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: mumbai_Bytes
  sponsorVault_not: mumbai_Bytes
  sponsorVault_in: [mumbai_Bytes!]
  sponsorVault_not_in: [mumbai_Bytes!]
  sponsorVault_contains: mumbai_Bytes
  sponsorVault_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SponsorVault_orderBy {
  id
  sponsorVault
}

type mumbai_StableSwap {
  id: ID!
  canonicalId: mumbai_Bytes!
  domain: BigInt
  swapPool: mumbai_Bytes!
}

input mumbai_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: mumbai_Bytes
  swapPool_not: mumbai_Bytes
  swapPool_in: [mumbai_Bytes!]
  swapPool_not_in: [mumbai_Bytes!]
  swapPool_contains: mumbai_Bytes
  swapPool_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Relayer!]!
  mumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwap!]!
  mumbai_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SponsorVault
  mumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SponsorVault_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SponsorVault!]!
  mumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginMessage!]!
  mumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationMessage
  mumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationMessage!]!
  mumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_rootMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessage
  mumbai_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessage!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
}

enum mumbai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type mumbai__Block_ {
  """The hash of the block"""
  hash: mumbai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mumbai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mumbai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}